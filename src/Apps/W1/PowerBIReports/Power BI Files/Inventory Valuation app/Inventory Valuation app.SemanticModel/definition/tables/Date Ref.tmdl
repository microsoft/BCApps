table 'Date Ref'
	isHidden
	lineageTag: 8fcf4790-9076-4a2d-9880-093e5a65b1aa

	column Date
		isHidden
		formatString: General Date
		lineageTag: 070c7c0f-6ade-4f5a-99f6-21a5d4f8981a
		summarizeBy: none
		isNameInferred
		sourceColumn: [Date]

		annotation SummarizationSetBy = Automatic

	column DateKey
		isHidden
		formatString: 0
		lineageTag: 8bfa9b1e-250c-487f-9070-1fbbe257e0d0
		summarizeBy: count
		isNameInferred
		sourceColumn: [DateKey]

		annotation SummarizationSetBy = Automatic

	column 'Day of Month'
		isHidden
		formatString: 0
		lineageTag: 6849c754-d4b2-4c6e-b553-a47196cb8c15
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Day of Month]

		annotation SummarizationSetBy = Automatic

	column WeekDayNumber
		isHidden
		formatString: 0
		lineageTag: 1a79d83a-d0ab-4945-a49e-bc092729900c
		summarizeBy: sum
		isNameInferred
		sourceColumn: [WeekDayNumber]

		annotation SummarizationSetBy = Automatic

	column 'Week Day'
		isHidden
		lineageTag: 41082a82-f5fd-4850-b498-8b81545e51ab
		summarizeBy: none
		isNameInferred
		sourceColumn: [Week Day]

		annotation SummarizationSetBy = Automatic

	column Sequential365DayNumber
		isHidden
		formatString: 0
		lineageTag: 9f716c8e-c3b7-4a5f-a3cf-4430b0124f4c
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Sequential365DayNumber]

		annotation SummarizationSetBy = Automatic

	column 'Relative Day'
		isHidden
		formatString: 0
		lineageTag: bec27afd-fd0d-41f4-b8c7-a52f8c1a973b
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Relative Day]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearNumber'
		isHidden
		formatString: 0
		lineageTag: 36bee59f-cfbe-4e93-b02f-3cc16d31fa5a
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Year'
		isHidden
		lineageTag: 9fcc7861-5e04-468d-8d76-cc96cbe10bb1
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Year]

		annotation SummarizationSetBy = Automatic

	column 'Calendar QuarterNumber'
		isHidden
		lineageTag: edcc5e5e-e886-4bf5-b13a-979600d239f2
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar QuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar Quarter'
		isHidden
		lineageTag: 642737af-c4c1-47ef-8ac6-c15deecc0766
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Quarter]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearQuarterNumber'
		isHidden
		lineageTag: 7daf342a-bc00-418f-a8be-422fb5058c0f
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearQuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar Quarter Year'
		isHidden
		lineageTag: 96cc970e-be87-42ae-a833-1eedfd18870e
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Quarter Year]

		annotation SummarizationSetBy = Automatic

	column 'Calendar MonthNumber'
		isHidden
		formatString: 0
		lineageTag: afec2974-bb03-42cc-a616-498ff4d5ed4c
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar MonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Month'
		isHidden
		lineageTag: 02e0c314-a309-4eb2-9830-b21efc651ab1
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Month]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearMonthNumber'
		isHidden
		formatString: 0
		lineageTag: 825b7b5e-7f38-461d-a2c0-0ceccd462c8d
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Month Year'
		isHidden
		lineageTag: 931845c8-b027-487c-aae9-78dde3cbbbb3
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Month Year]

		annotation SummarizationSetBy = Automatic

	column 'Calendar WeekNumber'
		isHidden
		formatString: 0
		lineageTag: b74846b7-25e3-41af-b170-a13d039e8d1a
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar WeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Week'
		isHidden
		lineageTag: fb284d75-be47-4534-84db-49535f1dede1
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Week]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearWeekNumber'
		isHidden
		formatString: 0
		lineageTag: 74a1d56b-19ba-47ea-a646-d2fcb3e0853b
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearWeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Week Year'
		isHidden
		lineageTag: 5d09bce7-0564-46b6-b1a0-4eb2bdb067fb
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Week Year]

		annotation SummarizationSetBy = Automatic

	column 'Calendar WeekYearOrder'
		isHidden
		formatString: 0
		lineageTag: ace5c405-3ea1-487b-8bc9-f1822340b871
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar WeekYearOrder]

		annotation SummarizationSetBy = Automatic

	column 'Calendar RelativeWeekPos'
		isHidden
		lineageTag: 12f477fa-1a2d-427c-b3e8-d60de81a5353
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar RelativeWeekPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar RelativeMonthPos'
		isHidden
		lineageTag: 3e7eed41-ddc8-4e03-aabc-80299bb974e2
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar RelativeMonthPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar RelativeQuarterPos'
		isHidden
		lineageTag: b3898a94-35bd-4988-83b6-6c4c1a4be063
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar RelativeQuarterPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar RelativeYearPos'
		isHidden
		lineageTag: 323f3dd4-21bb-470f-b4b9-2cc2c3bd1e1d
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar RelativeYearPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar StartOfMonth'
		isHidden
		formatString: General Date
		lineageTag: 53a0c3bb-747a-4ff3-9f19-96590b0d7c24
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar StartOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'Calendar EndOfMonth'
		isHidden
		formatString: General Date
		lineageTag: 884fc684-459f-494c-a568-2fc7c0e155b2
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar EndOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'Calendar StartOfQuarter'
		isHidden
		formatString: General Date
		lineageTag: 4c045153-57d6-46e7-a530-6baa3ce8020a
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar StartOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Calendar EndOfQuarter'
		isHidden
		formatString: General Date
		lineageTag: afca61e0-5bfd-46b9-b5f4-68b034ae1968
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar EndOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Calendar StartOfYear'
		isHidden
		formatString: General Date
		lineageTag: 79e0fb2f-0b2f-4eb5-9f5c-8b4d6468fc2d
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar StartOfYear]

		annotation SummarizationSetBy = Automatic

	column 'Calendar EndOfYear'
		isHidden
		formatString: General Date
		lineageTag: 4c11a15b-e770-4eef-86cd-e11151cb8b10
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar EndOfYear]

		annotation SummarizationSetBy = Automatic

	column 'Calendar MonthDays'
		isHidden
		formatString: 0
		lineageTag: 6b0c4b7b-6ae0-486c-91d6-d0b45c1b8755
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar MonthDays]

		annotation SummarizationSetBy = Automatic

	column 'Calendar QuarterDays'
		isHidden
		formatString: 0
		lineageTag: a374a379-38e7-4210-9cc3-4d9574796577
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar QuarterDays]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearDays'
		isHidden
		formatString: 0
		lineageTag: 00d842f9-4bdc-4c95-82c8-9f16ba2ca90c
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearDays]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DayOfMonthNumber'
		isHidden
		formatString: 0
		lineageTag: 948465d6-4502-410d-a132-a55673ac83e2
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar DayOfMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DayOfQuarterNumber'
		isHidden
		formatString: 0
		lineageTag: e90289b6-8f73-4e68-9c94-393595f1ac4c
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar DayOfQuarterNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DayOfYearNumber'
		isHidden
		formatString: 0
		lineageTag: 3187603d-e3fb-4bef-9311-f3ce3868f5c1
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar DayOfYearNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DatePreviousWeek'
		isHidden
		formatString: General Date
		lineageTag: c8c4e615-9473-4752-b51a-b9cf42096321
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar DatePreviousWeek]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DatePreviousMonth'
		isHidden
		formatString: General Date
		lineageTag: 15b92c9a-d03d-47a9-aa6d-1d5fec570af9
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar DatePreviousMonth]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DatePreviousQuarter'
		isHidden
		formatString: General Date
		lineageTag: f3ed6ff4-4de3-4eff-917d-02294107748b
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar DatePreviousQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DatePreviousYear'
		isHidden
		formatString: General Date
		lineageTag: 8f035332-bf00-42dd-845d-2ab3ec88e009
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar DatePreviousYear]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Year'
		isHidden
		lineageTag: 3ccfde17-b212-45bb-9df2-dd3ced220fb4
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Year]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearNumber'
		isHidden
		formatString: 0
		lineageTag: 68315d5a-cc6c-4f6d-b84a-f796b63fd223
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal QuarterNumber'
		isHidden
		lineageTag: 840cbe72-bccc-4f1e-98e8-8ae3a6f6709b
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal QuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal Quarter'
		isHidden
		lineageTag: d45cc0e8-006a-4cb6-bb3e-345b1f07712e
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Quarter]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearQuarterNumber'
		isHidden
		lineageTag: eba32db1-16b3-440c-8c31-35d13d8197b0
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearQuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal Quarter Year'
		isHidden
		lineageTag: f2a3d037-8ba3-4244-af61-e53cc19e145e
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Quarter Year]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal MonthNumber'
		isHidden
		formatString: 0
		lineageTag: 9e11d4cf-9404-432c-b4b2-b0943ae71d72
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal MonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal MonthInQuarterNumber'
		isHidden
		formatString: 0
		lineageTag: 4c7f6b1b-467b-4cb0-a4e9-2af972072cbe
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal MonthInQuarterNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Month'
		isHidden
		lineageTag: d965bbea-032d-4731-9b82-5fc52fc4e9d2
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Month]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearMonthNumber'
		isHidden
		formatString: 0
		lineageTag: 8609f9f3-be8b-4245-b544-00cc9763a218
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Month Year'
		isHidden
		lineageTag: 78b49147-9628-499f-b36c-650246c92f02
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Month Year]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal WeekNumber'
		isHidden
		formatString: 0
		lineageTag: f14d37e0-5267-46b4-a0a5-cd67008e14a1
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal WeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Week'
		isHidden
		lineageTag: 8931427c-3c64-42ef-aed7-b684872b554b
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Week]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearWeekNumber'
		isHidden
		formatString: 0
		lineageTag: c1546f47-c918-478f-abac-21487441516d
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearWeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Week Year'
		isHidden
		lineageTag: ec5ee975-6b35-4a30-9a03-e7323ddf2700
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Week Year]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal WeekYearOrder'
		isHidden
		formatString: 0
		lineageTag: 34e7936e-7559-4f58-b583-e5726dcb1c02
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal WeekYearOrder]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal RelativeWeekPos'
		isHidden
		lineageTag: 57266553-e290-4b35-a163-e55f347b7230
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal RelativeWeekPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal RelativeMonthPos'
		isHidden
		lineageTag: 1dd04a4b-7642-4007-be2c-f7ee1422bd0c
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal RelativeMonthPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal RelativeQuarterPos'
		isHidden
		lineageTag: 5c8f5005-bd0f-41d4-8bea-1d7da9fef1f3
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal RelativeQuarterPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal RelativeYearPos'
		isHidden
		lineageTag: f939804c-2bec-497e-b2bd-1d8da1f39baa
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal RelativeYearPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal StartOfMonth'
		isHidden
		formatString: General Date
		lineageTag: c4647361-58e1-497e-9201-115c4ce8f041
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal StartOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal EndOfMonth'
		isHidden
		formatString: General Date
		lineageTag: c52e0008-af11-45b9-b82d-9463c35757cf
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal EndOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal StartOfQuarter'
		isHidden
		formatString: General Date
		lineageTag: 9549cd58-0bc2-4127-a8b0-6839e8f54ab0
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal StartOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal EndOfQuarter'
		isHidden
		formatString: General Date
		lineageTag: c708d0a8-203e-41e5-8273-14388b67b410
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal EndOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal StartOfYear'
		isHidden
		formatString: General Date
		lineageTag: 176439ff-cfb1-4ebd-8a15-0356208aa931
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal StartOfYear]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal EndOfYear'
		isHidden
		formatString: General Date
		lineageTag: 4f53ecb0-c32e-4aac-b086-86fd3bd8d40e
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal EndOfYear]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal MonthDays'
		isHidden
		formatString: 0
		lineageTag: cd0b252a-f594-421e-8c06-962c4d74451a
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal MonthDays]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal QuarterDays'
		isHidden
		formatString: 0
		lineageTag: f3a94635-7c6b-4d91-9deb-428aa25207c8
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal QuarterDays]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearDays'
		isHidden
		formatString: 0
		lineageTag: 5487fb6a-cf0b-4c4b-a64f-c8b76932c418
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearDays]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DayOfMonthNumber'
		isHidden
		formatString: 0
		lineageTag: 0c671446-9c03-44e4-88a4-d85bd5f2bd5d
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal DayOfMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DayOfQuarterNumber'
		isHidden
		formatString: 0
		lineageTag: ab1e3ffe-1467-472d-b8d5-8b9db7928279
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal DayOfQuarterNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DayOfYearNumber'
		isHidden
		formatString: 0
		lineageTag: dd73edb5-4562-4717-8d70-c0392ef9b63a
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal DayOfYearNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DatePreviousWeek'
		isHidden
		formatString: General Date
		lineageTag: e8b68c68-56fb-4dcb-94ba-58b066d816c6
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal DatePreviousWeek]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DatePreviousMonth'
		isHidden
		formatString: General Date
		lineageTag: d36b3a95-482e-426b-a862-9dfdea3d1f47
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal DatePreviousMonth]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DatePreviousQuarter'
		isHidden
		formatString: General Date
		lineageTag: dae2910c-ad27-45b2-b868-97318de2c320
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal DatePreviousQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DatePreviousYear'
		isHidden
		formatString: General Date
		lineageTag: 449fc74e-8f35-4a1f-814d-76c88ae50476
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal DatePreviousYear]

		annotation SummarizationSetBy = Automatic

	column 'FW YearNumber'
		isHidden
		formatString: 0
		lineageTag: 0bc13179-70b9-467c-8788-f9c1931c9e7c
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW Year'
		isHidden
		lineageTag: d9f720a5-74ed-4c54-9ee5-28a7efc88cbc
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Year]

		annotation SummarizationSetBy = Automatic

	column 'FW QuarterNumber'
		isHidden
		lineageTag: ae429941-2cbf-49fb-b0f4-5511fdb71b8e
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW QuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Quarter'
		isHidden
		lineageTag: a2d909e8-df3f-4035-a5d0-f714ceef969d
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Quarter]

		annotation SummarizationSetBy = Automatic

	column 'FW YearQuarterNumber'
		isHidden
		lineageTag: 6e6c0806-d23a-4ba5-8288-0a1029de71f8
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearQuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Quarter Year'
		isHidden
		lineageTag: e319e524-043b-41d9-8bc7-b28f374026d2
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Quarter Year]

		annotation SummarizationSetBy = Automatic

	column 'FW MonthNumber'
		isHidden
		lineageTag: cd382887-75fc-4d18-9c4c-f33040e6e55e
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW MonthNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Month'
		isHidden
		lineageTag: d0e63f01-4b04-4708-939b-fbfbb8c211c3
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Month]

		annotation SummarizationSetBy = Automatic

	column 'FW YearMonthNumber'
		isHidden
		lineageTag: b3473725-308d-41ed-8538-b5bd631f22c9
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearMonthNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Month Year'
		isHidden
		lineageTag: 72984487-3978-4d37-9cdd-fea7c4a622bc
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Month Year]

		annotation SummarizationSetBy = Automatic

	column 'FW WeekNumber'
		isHidden
		formatString: 0
		lineageTag: 87f2f4e4-fe2d-4907-a04a-62a2d3977d79
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW WeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW Week'
		isHidden
		lineageTag: dc91d823-c948-490c-965d-9eb218a01dc8
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Week]

		annotation SummarizationSetBy = Automatic

	column 'FW PeriodNumber'
		isHidden
		lineageTag: 18d9e051-b99d-4978-9df6-71d509060dd0
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW PeriodNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Period'
		isHidden
		lineageTag: c01bbfc5-8973-43b6-81a5-4af20f1e6832
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Period]

		annotation SummarizationSetBy = Automatic

	column 'FW YearWeekNumber'
		isHidden
		formatString: 0
		lineageTag: a2a185d8-3460-4a6e-8bac-01a8a65f78a3
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearWeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW Week Year'
		isHidden
		lineageTag: a2918aa5-b051-4053-81f1-30e09a762785
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Week Year]

		annotation SummarizationSetBy = Automatic

	column 'FW StartOfWeek'
		isHidden
		formatString: General Date
		lineageTag: e090ebb7-ebc0-4b8f-b47c-0c012c5d5720
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW StartOfWeek]

		annotation SummarizationSetBy = Automatic

	column 'FW EndOfWeek'
		isHidden
		formatString: General Date
		lineageTag: e5270114-081a-42a3-9a18-1d9027ef3b35
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW EndOfWeek]

		annotation SummarizationSetBy = Automatic

	column 'FW RelativeWeekPos'
		isHidden
		lineageTag: 9a8a536e-c417-432c-8113-b27f7f034b02
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW RelativeWeekPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW RelativeMonthPos'
		isHidden
		lineageTag: 508aa928-0df5-4e20-86d8-7a78c0bf2cc2
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW RelativeMonthPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW RelativeQuarterPos'
		isHidden
		lineageTag: e1763361-1eae-4920-8cef-e04a18477408
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW RelativeQuarterPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW RelativeYearPos'
		isHidden
		lineageTag: 2f559de8-e8e1-49b8-8c70-b81bc7b8d525
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW RelativeYearPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW StartOfMonth'
		isHidden
		formatString: General Date
		lineageTag: df0ae35c-0cf3-4835-852d-29c03ec9b2a2
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW StartOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'FW EndOfMonth'
		isHidden
		formatString: General Date
		lineageTag: c0b42f18-44b1-4398-87b3-8498155a7505
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW EndOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'FW StartOfQuarter'
		isHidden
		formatString: General Date
		lineageTag: 0ab8e2bd-3a13-41cb-b014-109640ec85cb
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW StartOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'FW EndOfQuarter'
		isHidden
		formatString: General Date
		lineageTag: 331b3192-67c1-4ae3-b2af-a60ce8bf9951
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW EndOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'FW StartOfYear'
		isHidden
		formatString: General Date
		lineageTag: 89ec0cd3-c9a0-4893-8224-d6786ba159ae
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW StartOfYear]

		annotation SummarizationSetBy = Automatic

	column 'FW EndOfYear'
		isHidden
		formatString: General Date
		lineageTag: ec42e208-4d0e-4679-8035-47124edd8239
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW EndOfYear]

		annotation SummarizationSetBy = Automatic

	column 'FW MonthDays'
		isHidden
		formatString: 0
		lineageTag: eee923eb-9751-4f80-97bb-bc62795e7e1d
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW MonthDays]

		annotation SummarizationSetBy = Automatic

	column 'FW QuarterDays'
		isHidden
		formatString: 0
		lineageTag: 8b77f3b1-98c5-4b7e-b621-0c275956828d
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW QuarterDays]

		annotation SummarizationSetBy = Automatic

	column 'FW YearDays'
		isHidden
		formatString: 0
		lineageTag: d1ce67b1-5d90-4d93-9ecc-bccae5143904
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearDays]

		annotation SummarizationSetBy = Automatic

	column 'FW DayOfMonthNumber'
		isHidden
		formatString: 0
		lineageTag: c217bbda-c286-4665-a1a6-3c3b08635d42
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW DayOfMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW DayOfQuarterNumber'
		isHidden
		formatString: 0
		lineageTag: 09cf77e8-dd25-447a-873d-06512030636d
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW DayOfQuarterNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW DayOfYearNumber'
		isHidden
		formatString: 0
		lineageTag: 3954a024-6838-421e-b2cc-4970e877dbd6
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW DayOfYearNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW DatePreviousWeek'
		isHidden
		formatString: General Date
		lineageTag: 026752ba-ef8f-4afc-9aa4-5cbcc772b177
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW DatePreviousWeek]

		annotation SummarizationSetBy = Automatic

	column 'FW DatePreviousMonth'
		isHidden
		formatString: General Date
		lineageTag: 4e1b6d29-ccad-4a84-a831-7dc59b38b9d8
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW DatePreviousMonth]

		annotation SummarizationSetBy = Automatic

	column 'FW DatePreviousQuarter'
		isHidden
		formatString: General Date
		lineageTag: 5401d25b-7754-499a-b1cc-61b51abc07c2
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW DatePreviousQuarter]

		annotation SummarizationSetBy = Automatic

	column 'FW DatePreviousYear'
		isHidden
		formatString: General Date
		lineageTag: f07bd25c-aa07-4a08-8234-03643920df1f
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW DatePreviousYear]

		annotation SummarizationSetBy = Automatic

	column 'Holiday Name'
		isHidden
		lineageTag: 4ef6eec3-7c4e-426d-b228-7a859e194b9a
		summarizeBy: none
		isNameInferred
		sourceColumn: [Holiday Name]

		annotation SummarizationSetBy = Automatic

	column IsWorkingDay
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 26a278ae-c2e8-4479-987b-114422e04cc9
		summarizeBy: none
		isNameInferred
		sourceColumn: [IsWorkingDay]

		annotation SummarizationSetBy = Automatic

	column 'Day Type'
		isHidden
		lineageTag: d0af2a72-c43b-458e-825f-57ed59f56582
		summarizeBy: none
		isNameInferred
		sourceColumn: [Day Type]

		annotation SummarizationSetBy = Automatic

	partition 'Date Ref' = calculated
		mode: import
		source = ```
				
				------------------------------------------------------------
				--
				-- Configuration
				--
				------------------------------------------------------------
				VAR TodayReference = VALUES('Date Table Setup'[Today]) -- Change this if you need to use another date as a reference "current" day
				
				// Based on the first and last dates in the main fact table
				VAR FirstYear = YEAR(VALUES('Date Table Setup'[dateTblStart]))
				VAR LastYear = YEAR(VALUES('Date Table Setup'[dateTblEnd]))
				
				// For Fiscal 52-53 weeks (start depends on rules) and Gregorian (starts on the first of the month) 
				VAR FiscalCalendarFirstMonth = VALUES('Date Table Setup'[fiscalCalendarFirstMonth])
				
				// Use: 0 - Sunday, 1 - Monday, 2 - Tuesday, ... 5 - Friday, 6 - Saturday
				VAR FirstDayOfWeek = VALUES('Date Table Setup'[First Day of Week]) 
				
				VAR TypeStartFiscalYear = 1 -- Fiscal year as Calendar Year of : 0 - First day of fiscal year, 1 - Last day of fiscal year
				
				VAR IsoCountryHolidays = VALUES('Date Table Setup'[isoCountryHolidays]) -- Use only supported ISO countries or "" for no holidays
				
				VAR WeeklyType = COALESCE(VALUES('Date Table Setup'[weeklyType]), "Nearest") -- Supports only "Nearest", or "Last"
				
				VAR QuarterWeekType = COALESCE(VALUES('Date Table Setup'[quarterWeekType]),"445") -- Supports only "445", "454", and "544"
				
				VAR CalendarRange = VALUES('Date Table Setup'[calendarRange]) -- Supports "Calendar", "FiscalGregorian", "FiscalWeekly"
				-- Last:    for last weekday of the month at fiscal year end
				-- Nearest: for last weekday nearest the end of month 
				-- Reference for Last/Nearest definition: https://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar)
				--
				-- For ISO calendar use 
				--   FiscalCalendarFirstMonth = 1 (ISO always starts in January)
				--   FirstDayOfWeek = 1           (ISO always starts on Monday)
				--   WeeklyType = "Nearest"       (ISO use the nearest week type algorithm)
				-- For US with last Saturday of the month at fiscal year end
				--   FirstDayOfWeek = 0           (US weeks start on Sunday)
				--   WeeklyType = "Last"
				-- For US with last Saturday nearest the end of month
				--   FirstDayOfWeek = 0           (US weeks start on Sunday)
				--   WeeklyType = "Nearest"
				--
				------------------------------
				VAR CalendarGregorianPrefix = VALUES('Date Table Setup'[calendarPrefix]) -- Prefix used in columns of standard Gregorian calendar
				VAR FiscalGregorianPrefix = VALUES('Date Table Setup'[fiscalGregorianPrefix]) -- Prefix used in columns of fiscal Gregorian calendar
				VAR FiscalWeeklyPrefix = VALUES('Date Table Setup'[fiscalWeeklyPrefix]) -- Prefix used in columns of fiscal weekly calendar
				VAR WorkingDayType = "Working day" -- Description for working days
				VAR NonWorkingDayType = "Non-working day" -- Description for non-working days
				------------------------------
				VAR WeeklyCalendarType = "Weekly" -- Supports "Weekly", "Custom"
				-- Set the working days - 0 = Sunday, 1 = Monday, ... 6 = Saturday
				VAR WorkingDays = VALUES('Working Days')
				
				
				-- Use CustomFiscalPeriods in case you need arbitrary definition of weekly fiscal years 
				-- Set "UseCustomFiscalPeriods" to TRUE in order to use CustomFiscalPeriods 
				VAR UseCustomFiscalPeriods = FALSE
				-- Set "IgnoreWeeklyFiscalPeriods" to TRUE in order to ignore the WeeklyFiscalPeriods
				-- You should set IgnoreWeeklyFiscalPeriods to TRUE only when UseCustomFiscalPeriods is TRUE, too
				VAR IgnoreWeeklyFiscalPeriods = FALSE
				-- Include here your own definition of custom fiscal periods
				VAR CustomFiscalPeriods =
				    FILTER ( 
				        DATATABLE (
				            "Fiscal YearNumber", INTEGER,
				            "FirstDayOfYear", DATETIME,
				            "LastDayOfYear", DATETIME,
				            {
				                -- IMPORTANT!!! The first day of each year must be a weekday corresponding to the definition of FirstDayOfWeek
				                --              If you want to use this table, remember to set the UseCustomFiscalPeriods variable to TRUE
				                --              If the IgnoreWeeklyFiscalPeriods is TRUE, there are no warnings in case the FirstDayOfWeek 
				                --              does not match the first day of the year 
				                { 2016, "2015-06-28", "2016-07-02" },
				                { 2017, "2016-07-03", "2017-07-01" },
				                { 2018, "2017-07-02", "2018-06-30" },
				                { 2019, "2018-07-01", "2019-06-29" }
				            }
				        ),
				        UseCustomFiscalPeriods
				    )
				
				------------------------------------------------------------
				--  
				-- End of General Configuration
				--
				------------------------------------------------------------
				--  
				-- The following variables define specific parameters 
				-- for calendars - you should modify them only to 
				-- change configuration of specific countries, translate 
				-- names of holidays, or to add configuration for other 
				-- countries
				--
				------------------------------------------------------------
				VAR InLieuOf_prefix = "(in lieu of " -- prefix of substitute holidays
				VAR InLieuOf_suffix = ")" -- suffix of substitute holidays
				VAR HolidayParameters =
				    DATATABLE (
				        "ISO Country", STRING,
				        -- ISO country code (to enable filter based on country)
				        "MonthNumber", INTEGER,
				        -- Number of month - use 99 for relative dates using Easter as a reference
				        "DayNumber", INTEGER,
				        -- Absolute day (ignore WeekDayNumber, otherwise use 0)
				        "WeekDayNumber", INTEGER,
				        -- 0 = Sunday, 1 = Monday, ... , 7 = Saturday
				        "OffsetWeek", INTEGER,
				        -- 1 = first, 2 = second, ... -1 = last, -2 = second-last, ...
				        "OffsetDays", INTEGER,
				        -- days to add after offsetWeek and WeekDayNumber have been applied
				        "HolidayName", STRING,
				        -- Holiday name 
				        "SubstituteHoliday", INTEGER,
				        -- 0 = no substituteHoliday, 1 = substitute holiday with next working day, 2 = substitute holiday with next working day 
				        -- (use 2 before 1 only, e.g. Christmas = 2, Boxing Day = 1)
				        -- -1 = if it falls on a Saturday then it is observed on Friday, if it falls on a Sunday then it is observed on Monday
				        "ConflictPriority", INTEGER,
				        -- Priority in case of two or more holidays in the same date - lower number --> higher priority
				        -- For example: marking Easter relative days with 150 and other holidays with 100 means that other holidays take 
				        --              precedence over Easter-related days; use 50 for Easter related holidays to invert such a priority
				        "FirstYear", INTEGER,
				        -- First year for the holiday, 0 if it is not defined
				        "LastYear", INTEGER,
				        -- Last year for the holiday, 0 if it is not defined
				        {
				            --
				            -- US = United States
				            { "US", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "US", 1, 0, 1, 3, 0, "Martin Luther King, Jr.", 0, 100, 0, 0 },
				            { "US", 2, 0, 1, 3, 0, "Presidents' Day", 0, 100, 0, 0 },
				            // aka Washington's Birthday
				            { "US", 5, 0, 1, -1, 0, "Memorial Day", 0, 100, 0, 0 },
				            { "US", 6, 19, 0, 0, 0, "Juneteenth", -1, 100, 2021, 0 },
				            { "US", 7, 4, 0, 0, 0, "Independence Day", 0, 100, 0, 0 },
				            { "US", 9, 0, 1, 1, 0, "Labor Day", 0, 100, 0, 0 },
				            { "US", 10, 0, 1, 2, 0, "Columbus Day", 0, 100, 0, 0 },
				            { "US", 11, 11, 0, 0, 0, "Veterans Day", 0, 100, 0, 0 },
				            { "US", 11, 0, 4, 4, 0, "Thanksgiving Day", 0, 100, 0, 0 },
				            { "US", 11, 0, 4, 4, 1, "Black Friday", 0, 100, 0, 0 },
				            { "US", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            -- 
				            -- The following countries are in alphabetical order (by ISO Code)
				            --
				            
				            --
				            -- AT = Austria
				            { "AT", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "AT", 1, 6, 0, 0, 0, "Epiphany", 0, 100, 0, 0 },
				            { "AT", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "AT", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "AT", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "AT", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "AT", 99, 60, 0, 0, 0, "Corpus Christi", 0, 50, 0, 0 },
				            { "AT", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "AT", 10, 26, 0, 0, 0, "National Day", 0, 100, 0, 0 },
				            { "AT", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "AT", 12, 8, 0, 0, 0, "Immaculate Conception Day", 0, 100, 0, 0 },
				            { "AT", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "AT", 12, 26, 0, 0, 0, "St. Stephen's Day", 0, 100, 0, 0 },
				            --
				            -- AU = Australia
				            { "AU", 1, 1, 0, 0, 0, "New Year's Day", 1, 100, 0, 0 },
				            { "AU", 1, 26, 0, 0, 0, "Australia Day", 1, 100, 0, 0 },
				            { "AU", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "AU", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "AU", 4, 25, 0, 0, 0, "Anzac Day", 1, 100, 0, 0 },
				            { "AU", 12, 25, 0, 0, 0, "Christmas Day", 2, 100, 0, 0 },
				            { "AU", 12, 26, 0, 0, 0, "Boxing Day", 1, 100, 0, 0 },
				            --
				            -- BE = Belgium
				            { "BE", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "BE", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "BE", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "BE", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "BE", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "BE", 7, 21, 0, 0, 0, "Belgian National DayDay", 0, 100, 0, 0 },
				            { "BE", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "BE", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "BE", 11, 11, 0, 0, 0, "Armistice Day", 0, 100, 0, 0 },
				            { "BE", 12, 25, 0, 0,0, "Christmas Day", 0, 100, 0, 0 },
				            --
				            -- CA = Canada (include only nationwide and Thanksgiving)
				            { "CA", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "CA", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "CA", 7, 1, 0, 0, 0, "Canada Day", 0, 100, 0, 0 },
				            { "CA", 9, 0, 1, 1, 0, "Labour Day", 0, 100, 0, 0 },
				            { "CA", 10, 0, 1, 2, 0, "Thanksgiving", 0, 100, 0, 0 },
				            { "CA", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            --
				            -- DE = Germany
				            { "DE", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "DE", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "DE", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "DE", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "DE", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "DE", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "DE", 10, 3, 0, 0, 0, "German Unity Day", 0, 100, 0, 0 },
				            { "DE", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "DE", 12, 26, 0, 0, 0, "St. Stephen's Day", 0, 100, 0, 0 },
				            --
				            -- ES = Spain
				            { "ES", 1, 1, 0, 0,0,  "New Year's Day", 0, 100, 0, 0 },
				            { "ES", 1, 6, 0, 0, 0, "Epiphany", 0, 100, 0, 0 },
				            { "ES", 99, -3, 0, 0, 0, "Maundy Thursday", 0, 50, 0, 0 },
				            // Except Catalonia
				            { "ES", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "ES", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            // Belearic Islands, Basque Country, Catalonia, La Rioja, Navarra and Valenciana only
				            { "ES", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "ES", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "ES", 10, 12, 0, 0, 0, "Fiesta Navional de España", 0, 100, 0, 0 },
				            { "ES", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "ES", 12, 6, 0, 0, 0, "Constitution Day", 0, 100, 0, 0 },
				            { "ES", 12, 8, 0, 0, 0, "Immaculate Conception", 0, 100, 0, 0 },
				            { "ES", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            --
				            -- FR = France
				            { "FR", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "FR", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "FR", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "FR", 5, 8, 0, 0, 0, "Victor in Europe Day", 0, 100, 0, 0 },
				            { "FR", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "FR", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "FR", 7, 14, 0, 0, 0, "Bastille Day", 0, 100, 0, 0 },
				            { "FR", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "FR", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "FR", 11, 11, 0, 0, 0, "Armistice Day", 0, 100, 0, 0 },
				            { "FR", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            --
				            -- GB = England (different configuration in Scotland and Northern Ireland)
				            { "GB", 1, 1, 0, 0, 0, "New Year's Day", 1, 100, 0, 0 },
				            { "GB", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "GB", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "GB", 5, 0, 1, 1, 0, "May Day Bank Holiday", 0, 100, 0, 0 },
				            { "GB", 5, 0, 1, -1, 0, "Spring Bank Holiday", 0, 100, 0, 0 },
				            { "GB", 8, 0, 1, -1, 0, "Late Summer Bank Holiday", 0, 100, 0, 0 },
				            { "GB", 12, 25, 0, 0, 0, "Christmas Day", 2, 100, 0, 0 },
				            { "GB", 12, 26, 0, 0, 0, "Boxing Day", 1, 100, 0, 0 },
				            --
				            -- IT = Italy
				            { "IT", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "IT", 1, 6, 0, 0, 0, "Epiphany", 0, 100, 0, 0 },
				            { "IT", 99, 1, 0, 0, 0, "Easter Monday", 0, 100, 0, 0 },
				            { "IT", 4, 25, 0, 0, 0, "Liberation Day", 0, 100, 0, 0 },
				            { "IT", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "IT", 6, 2, 0, 0, 0, "Republic Day", 0, 100, 0, 0 },
				            { "IT", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "IT", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "IT", 12, 8, 0, 0, 0, "Immaculate Conception", 0, 100, 0, 0 },
				            { "IT", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "IT", 12, 26, 0, 0, 0, "St. Stephen's Day", 0, 100, 0, 0 },
				            --
				            -- NL = The Netherlands
				            { "NL", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "NL", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "NL", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "NL", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "NL", 4, 27, 0, 0, 0, "King's Day", 0, 100, 0, 0 },
				            // King's day shifted to Saturday if on a Sunday - not handled in this calendar
				            { "NL", 5, 5, 0, 0, 0, "Liberation Day", 0, 100, 0, 0 },
				            { "NL", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "NL", 12, 26, 0, 0, 0, "St. Stephen's Day", 0, 100, 0, 0 },
				            --
				            -- NO = Norway
				            { "NO", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "NO", 99, -3, 0, 0, 0, "Maundy Thursday", 0, 100, 0, 0 },
				            { "NO", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "NO", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "NO", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "NO", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "NO", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "NO", 5, 17, 0, 0, 0, "Constitution Day", 0, 100, 0, 0 },
				            { "NO", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "NO", 12, 26, 0, 0, 0, "Boxing Day", 0, 100, 0, 0 },
				            -- De facto Holidays in Norway - not official public holidays
				            { "NO", 12, 24, 0, 0, 0, "Christmas Eve", 0, 50, 0, 0 },
				            { "NO", 12, 31, 0, 0, 0, "New Year's Eve", 0, 50, 0, 0 },
				            --
				            -- PT = Portugal
				            { "PT", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "PT", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "PT", 99, 60, 0, 0, 0, "Corpus Christi", 0, 50, 0, 0 },
				            { "PT", 4, 25, 0, 0, 0, "Freedom Day", 0, 100, 0, 0 },
				            { "PT", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "PT", 6, 10, 0, 0, 0, "Portugal Day", 0, 100, 0, 0 },
				            { "PT", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "PT", 10, 5, 0, 0, 0, "Republic Day", 0, 100, 0, 0 },
				            { "PT", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "PT", 12, 1, 0, 0, 0, "Restoration of Independence", 0, 100, 0, 0 },
				            { "PT", 12, 8, 0, 0, 0, "Immaculate Conception", 0, 100, 0, 0 },
				            { "PT", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },            --
				            --
				            -- SE = Sweden
				            { "SE", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "SE", 1, 6, 0, 0, 0, "Epiphany", 0, 100, 0, 0 },
				            { "SE", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "SE", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "SE", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "SE", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "SE", 6, 6, 0, 0, 0, "National Day", 0, 100, 0, 0 },
				            { "SE", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "SE", 12, 26, 0, 0, 0, "Boxing Day", 0, 100, 0, 0 },
				            -- De facto Holidays in Sweden - not official public holidays
				            { "SE", 12, 24, 0, 0, 0, "Christmas Eve", 0, 50, 0, 0 },
				            { "SE", 12, 31, 0, 0, 0, "New Year's Eve", 0, 50, 0, 0 },
				            -- Midsummer Day is a Saturday
				            -- { "SE", 98, 0, 0, 0, "Midsummer Day", 0, 50, 0, 0 },
				            { "SE", 98, -1, 0, 0, 0, "Midsummer Eve", 0, 50, 0, 0 }
				            ------------------------------------------------------------       
				            -- UK --> see GB
				        }
				    )
				VAR HolidayDates_ConfigGeneration =
				    FILTER (
				        HolidayParameters,
				        IF (
				            CONTAINS ( HolidayParameters, [ISO Country], IsoCountryHolidays )
				                || IsoCountryHolidays = "",
				            [ISO Country] = IsoCountryHolidays,
				            ERROR ( "IsoCountryHolidays set to an unsupported country code" )
				        )
				    )
				VAR HolidayDates_GeneratedRawWithDuplicatesUnfiltered =
				    GENERATE (
				        GENERATE (
				            GENERATESERIES ( FirstYear - 1, LastYear + 1, 1 ),
				            HolidayDates_ConfigGeneration
				        ),
				        VAR HolidayYear = [Value]
				        VAR EasterDate =
				            -- Code adapted from original VB version from https://www.assa.org.au/edm 
				            VAR EasterYear = HolidayYear
				            VAR FirstDig =
				                INT ( EasterYear / 100 )
				            VAR Remain19 =
				                MOD ( EasterYear, 19 ) //
				            -- Calculate PFM date
				            VAR temp1 =
				                MOD (
				                    INT ( ( FirstDig - 15 ) / 2 )
				                        + 202
				                        - 11 * Remain19
				                        + SWITCH (
				                            TRUE,
				                            FirstDig IN { 21, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 38 }, -1,
				                            FirstDig IN { 33, 36, 37, 39, 40 }, -2,
				                            0
				                        ),
				                    30
				                )
				            VAR tA =
				                temp1 + 21
				                    + IF ( temp1 = 29 || ( temp1 = 28 && Remain19 > 10 ), -1 ) // 
				            -- Find the next Sunday
				            VAR tB =
				                MOD ( tA - 19, 7 )
				            VAR tCpre =
				                MOD ( 40 - FirstDig, 4 )
				            VAR tC =
				                tCpre
				                    + IF ( tCpre = 3, 1 )
				                    + IF ( tCpre > 1, 1 )
				            VAR temp2 =
				                MOD ( EasterYear, 100 )
				            VAR tD =
				                MOD ( temp2 + INT ( temp2 / 4 ), 7 )
				            VAR tE =
				                MOD ( 20 - tB - tC - tD, 7 )
				                    + 1
				            VAR d = tA + tE //
				            -- Return the date
				            VAR EasterDay =
				                IF ( d > 31, d - 31, d )
				            VAR EasterMonth =
				                IF ( d > 31, 4, 3 )
				            RETURN
				                DATE ( EasterYear, EasterMonth, EasterDay ) //
				        -- End of code adapted from original VB version from https://www.assa.org.au/edm 
				        VAR SwedishMidSummer =
				            -- Compute the Midsummer day in Swedish - it is the Saturday between 20 and 26 June
				            -- This calculation is valid only for years after 1953 
				            -- https://sv.wikipedia.org/wiki/Midsommar_i_Sverige
				            VAR __June20 = 
				                DATE ( HolidayYear, 6, 20 )
				            RETURN
				                DATE ( HolidayYear, 6, 20 + (7 - WEEKDAY ( __June20, 1 ) ) )
				            -- End of SwedishMidSummer calculation
				        VAR HolidayDate =
				            SWITCH (
				                TRUE,
				                [DayNumber] <> 0
				                    && [WeekDayNumber] <> 0, ERROR ( "Wrong configuration in HolidayParameters" ),
				                [DayNumber] <> 0
				                    && [MonthNumber] <= 12, DATE ( HolidayYear, [MonthNumber], [DayNumber] ),
				                [MonthNumber] = 99, -- Easter offset
				                    EasterDate + [DayNumber],
				                [MonthNumber] = 98, -- Swedish Midsummer Day
				                    SwedishMidSummer + [DayNumber],
				                [WeekDayNumber] <> 0,
				                    VAR ReferenceDate =
				                        DATE ( HolidayYear, 1
				                            + MOD ( [MonthNumber] - 1 + IF ( [OffsetWeek] < 0, 1 ), 12 ), 1 )
				                            - IF ( [OffsetWeek] < 0, 1 )
				                    VAR ReferenceWeekDayNumber =
				                        WEEKDAY ( ReferenceDate, 1 ) - 1
				                    VAR Offset =
				                        [WeekDayNumber] - ReferenceWeekDayNumber
				                            + 7 * [OffsetWeek]
				                            + IF (
				                                [OffsetWeek] > 0,
				                                IF ( [WeekDayNumber] >= ReferenceWeekDayNumber, - 7 ),
				                                IF ( ReferenceWeekDayNumber >= [WeekDayNumber], 7 )
				                            )
				                RETURN
				                    ReferenceDate + Offset + [OffsetDays],
				                ERROR ( "Wrong configuration in HolidayParameters" )
				            )
				        VAR HolidayDay =
				            WEEKDAY ( HolidayDate, 1 ) - 1
				        VAR SubstituteHolidayOffset =
				            SWITCH (
				                TRUE,
				                [SubstituteHoliday] = -1,
				                    SWITCH ( 
				                        HolidayDay, 
				                        0, 1,       -- If it falls on a Sunday then it is observed on Monday
				                        6, -1,      -- If it falls on a Saturday then it is observed on Friday
				                        0
				                    ),
				                [SubstituteHoliday] > 0
				                    && NOT CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], HolidayDay ),
				                VAR NextWorkingDay =
				                    MINX (
				                        FILTER ( WorkingDays, [FSG_PBI_Day_Number] > HolidayDay ),
				                        [FSG_PBI_Day_Number]
				                    )
				                VAR SubstituteDay =
				                    IF (
				                        ISBLANK ( NextWorkingDay ),
				                        MINX ( WorkingDays, [FSG_PBI_Day_Number] ) + 7,
				                        NextWorkingDay
				                    )
				                RETURN
				                    SubstituteDay - HolidayDay
				                        + ( [SubstituteHoliday] - 1 )
				            )
				        RETURN
				            ROW (
				                -- Use DATE function to get a DATE column as a result 
				                "HolidayDate", DATE ( YEAR ( HolidayDate ), MONTH ( HolidayDate ), DAY ( HolidayDate ) ),
				                "SubstituteHolidayOffset", SubstituteHolidayOffset
				            )
				    ) //
				VAR HolidayDates_GeneratedRawWithDuplicates =
				    FILTER (
				        HolidayDates_GeneratedRawWithDuplicatesUnfiltered,
				        ( [FirstYear] = 0 || [FirstYear] <= [Value] )
				            && ( [LastYear] = 0 || [LastYear] >= [Value] )
				    )
				VAR HolidayDates_RawDatesUnique = 
				    DISTINCT ( 
				        SELECTCOLUMNS ( 
				            HolidayDates_GeneratedRawWithDuplicates,
				            "HolidayDateUnique", [HolidayDate]
				        )
				    )
				VAR HolidayDates_GeneratedRaw = 
				    GENERATE (
				        HolidayDates_RawDatesUnique,
				        VAR FilterDate = [HolidayDateUnique]
				        RETURN 
				            TOPN (
				                1,
				                FILTER ( 
				                    HolidayDates_GeneratedRawWithDuplicates,
				                    [HolidayDate] = FilterDate
				                ),
				                [ConflictPriority],
				                ASC,
				                [HolidayName], 
				                ASC
				            )
				    )  
				VAR HolidayDates_GeneratedSubstitutesOffset =
				    SELECTCOLUMNS (
				        FILTER ( HolidayDates_GeneratedRawWithDuplicates, [SubstituteHoliday] <> 0 ),
				        "Value", [Value],
				        "ISO Country", [ISO Country],
				        "MonthNumber", [MonthNumber],
				        "DayNumber", [DayNumber],
				        "WeekDayNumber", [WeekDayNumber],
				        "OffsetWeek", [OffsetWeek],
				        "HolidayName", [HolidayName],
				        "SubstituteHoliday", [SubstituteHoliday],
				        "ConflictPriority", [ConflictPriority],
				        "HolidayDate", [HolidayDate],
				        "SubstituteHolidayOffset", 
				            VAR CurrentHolidayDate = [HolidayDate]
				            VAR CurrentHolidayName = [HolidayName]
				            VAR OriginalSubstituteDate = [HolidayDate] + [SubstituteHolidayOffset]
				            VAR OtherHolidays = 
				                FILTER ( 
				                    HolidayDates_GeneratedRawWithDuplicates, 
				                    [HolidayDate] <> CurrentHolidayDate
				                    || [HolidayName] <> CurrentHolidayName
				                )
				            VAR ConflictDay0 = 
				                CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], OriginalSubstituteDate
				                )
				            VAR ConflictDay1 = 
				                ConflictDay0 
				                && CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], OriginalSubstituteDate + 1
				                )
				            VAR ConflictDay2 = 
				                ConflictDay1 
				                && CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], OriginalSubstituteDate + 2
				                )
				            VAR SubstituteOffsetStep1 = [SubstituteHolidayOffset] + ConflictDay0 + ConflictDay1 + ConflictDay2
				            VAR HolidayDateStep1 = CurrentHolidayDate + SubstituteOffsetStep1
				            VAR HolidayDayStep1 =
				                WEEKDAY ( HolidayDateStep1, 1 ) - 1
				            VAR SubstituteHolidayOffsetNonWorkingDays =
				                IF (
				                    NOT CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], HolidayDayStep1 ),
				                    VAR NextWorkingDayStep2 =
				                        MINX (
				                            FILTER ( WorkingDays, [FSG_PBI_Day_Number] > HolidayDayStep1 ),
				                            [FSG_PBI_Day_Number]
				                        )
				                    VAR SubstituteDay =
				                        IF (
				                            ISBLANK ( NextWorkingDayStep2 ),
				                            MINX ( WorkingDays, [FSG_PBI_Day_Number] ) + 7,
				                            NextWorkingDayStep2
				                        )
				                    RETURN SubstituteDay - HolidayDateStep1
				                )
				            VAR SubstituteOffsetStep2 = SubstituteOffsetStep1 + SubstituteHolidayOffsetNonWorkingDays
				            VAR SubstituteDateStep2 = OriginalSubstituteDate + SubstituteOffsetStep2
				            VAR ConflictDayStep2_0 = 
				                CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], SubstituteDateStep2
				                )
				            VAR ConflictDayStep2_1 = 
				                ConflictDayStep2_0
				                && CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], SubstituteDateStep2 + 1
				                )
				            VAR ConflictDayStep2_2 = 
				                ConflictDayStep2_1 
				                && CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], SubstituteDateStep2 + 2
				                )
				            VAR FinalSubstituteHolidayOffset = 
				                SubstituteOffsetStep2 + ConflictDayStep2_0 + ConflictDayStep2_1 + ConflictDayStep2_2
				            RETURN
				                FinalSubstituteHolidayOffset
				        )
				VAR HolidayDates_GeneratedSubstitutesExpanded =
				    ADDCOLUMNS (
				        HolidayDates_GeneratedSubstitutesOffset,
				        "ReplacementHolidayDate", [HolidayDate] + [SubstituteHolidayOffset]
				    )
				VAR HolidayDates_GeneratedSubstitutesUnique =
				    DISTINCT ( 
				        SELECTCOLUMNS ( 
				            HolidayDates_GeneratedSubstitutesExpanded,
				            "UniuqeReplacementHolidayDate", [ReplacementHolidayDate]
				        )
				    )
				VAR HolidayDates_GeneratedSubstitutes =
				    GENERATE (
				        HolidayDates_GeneratedSubstitutesUnique,
				        TOPN (
				            1,
				            FILTER ( 
				                HolidayDates_GeneratedSubstitutesExpanded,
				                [UniuqeReplacementHolidayDate] = [ReplacementHolidayDate]
				            ),
				            [ConflictPriority],
				            ASC,
				            [HolidayName], 
				            ASC
				        )
				    )  
				VAR HolidayDates_Generated =
				    UNION (
				        SELECTCOLUMNS (
				            HolidayDates_GeneratedRaw,
				            "HolidayDate", [HolidayDate],
				            "HolidayName", [HolidayName]
				        ),
				        SELECTCOLUMNS (
				            FILTER ( HolidayDates_GeneratedSubstitutes, [SubstituteHolidayOffset] <> 0 ), 
				            "HolidayDate", [HolidayDate] + [SubstituteHolidayOffset],
				            "HolidayName", InLieuOf_prefix & [HolidayName]
				                & InLieuOf_suffix
				        )
				    )
				-- Alternative way to express holidays: create a table with the list of the dates
				-- The following table should be used instead of HolidayDates_Generated in the following 
				-- HolidayDates variable if you want to use a fixed list of holidays
				VAR HolidayDates_US_ExplicitDates =
				    DATATABLE (
				        "HolidayDate", DATETIME,
				        "HolidayName", STRING,
				        {
				            { "2008-01-01", "New Year's Day" },
				            { "2008-12-25", "Christmas Day" },
				            -------------------------
				            { "2008-11-27", "Thanksgiving Day" },
				            { "2009-11-26", "Thanksgiving Day" },
				            { "2010-11-25", "Thanksgiving Day" },
				            { "2011-11-24", "Thanksgiving Day" },
				            { "2012-11-22", "Thanksgiving Day" },
				            { "2013-11-28", "Thanksgiving Day" },
				            { "2014-11-27", "Thanksgiving Day" },
				            { "2015-11-26", "Thanksgiving Day" },
				            { "2016-11-24", "Thanksgiving Day" },
				            { "2017-11-23", "Thanksgiving Day" },
				            { "2018-11-22", "Thanksgiving Day" },
				            { "2019-11-28", "Thanksgiving Day" },
				            { "2020-11-26", "Thanksgiving Day" }
				        }
				    )
				VAR HolidayDates =
				    SELECTCOLUMNS (
				        HolidayDates_Generated,
				        "Date", [HolidayDate],
				        "Holiday Name", [HolidayName]
				    ) //
				------------------------------------------------------------
				--  
				-- End of Configuration
				--
				------------------------------------------------------------
				--  
				-- The following variables define 
				-- the content of the calendar tables
				--
				------------------------------------------------------------
				------------------------------------------------------------
				VAR FirstDayCalendar =
				    DATE ( FirstYear - 1, 1, 1 )
				VAR LastDayCalendar =
				    DATE ( LastYear + 1, 12, 31 )
				VAR WeekDayCalculationType =
				    IF ( FirstDayOfWeek = 0, 7, FirstDayOfWeek )
				        + 10
				VAR OffsetFiscalYear = 
				    IF ( FiscalCalendarFirstMonth > 1, 1, 0 )
				VAR WeeklyFiscalPeriods =
				    GENERATE (
				        SELECTCOLUMNS (
				            GENERATESERIES ( FirstYear - OffsetFiscalYear, LastYear + OffsetFiscalYear, 1 ),
				            "CalendarType", "Weekly",
				            "Fiscal YearNumber", [Value]
				        ),
				        VAR StartFiscalYearNumber = [Fiscal YearNumber] - (OffsetFiscalYear * TypeStartFiscalYear)
				        VAR FirstDayCurrentYear =
				            DATE ( StartFiscalYearNumber, FiscalCalendarFirstMonth, 1 )
				        VAR FirstDayNextYear =
				            DATE ( StartFiscalYearNumber + 1, FiscalCalendarFirstMonth, 1 )
				        VAR DayOfWeekNumberCurrentYear =
				            WEEKDAY ( FirstDayCurrentYear, WeekDayCalculationType )
				        VAR OffsetStartCurrentFiscalYear =
				            SWITCH (
				                WeeklyType,
				                "Last", 1 - DayOfWeekNumberCurrentYear,
				                "Nearest", IF (
				                    DayOfWeekNumberCurrentYear >= 5,
				                    8 - DayOfWeekNumberCurrentYear,
				                    1 - DayOfWeekNumberCurrentYear
				                ),
				                ERROR ( "Unknown WeeklyType definition.")
				            )
				        VAR DayOfWeekNumberNextYear =
				            WEEKDAY ( FirstDayNextYear, WeekDayCalculationType )
				        VAR OffsetStartNextFiscalYear =
				            SWITCH (
				                WeeklyType,
				                "Last", - DayOfWeekNumberNextYear,
				                "Nearest", IF (
				                    DayOfWeekNumberNextYear >= 5,
				                    7 - DayOfWeekNumberNextYear,
				                    - DayOfWeekNumberNextYear
				                ),
				                ERROR ( "Unknown WeeklyType definition.")
				            )
				        VAR FirstDayOfFiscalYear = FirstDayCurrentYear + OffsetStartCurrentFiscalYear
				        VAR LastDayOfFiscalYear = FirstDayNextYear + OffsetStartNextFiscalYear
				        RETURN
				            ROW ( "FirstDayOfYear", FirstDayOfFiscalYear,
				            "LastDayOfYear", LastDayOfFiscalYear )
				    )
				VAR CheckFirstDayOfWeek =
				    IF (
				        UseCustomFiscalPeriods && (NOT IgnoreWeeklyFiscalPeriods)
				        && WEEKDAY ( MINX ( CustomFiscalPeriods, [FirstDayOfYear] ), 1 )
				              <> ( FirstDayOfWeek + 1 ),
				        ERROR ( "CustomFiscalPeriods table does not match FirstDayOfWeek setting" ),
				        TRUE
				    )
				VAR CustomFiscalPeriodsWithType =
				    GENERATE (
				        ROW ( "CalendarType", "Custom" ),
				        FILTER ( CustomFiscalPeriods, CheckFirstDayOfWeek )
				    )
				VAR FiscalPeriods =
				    SELECTCOLUMNS (
				        FILTER (
				            UNION ( 
				                FILTER ( WeeklyFiscalPeriods, NOT IgnoreWeeklyFiscalPeriods ),
				                CustomFiscalPeriodsWithType 
				            ),
				            [CalendarType] = WeeklyCalendarType
				        ),
				        "FW YearNumber", [Fiscal YearNumber],
				        "FW StartOfYear", [FirstDayOfYear],
				        "FW EndOfYear", [LastDayOfYear]
				    )
				VAR WeeksInP1 =
				    SWITCH (
				        QuarterWeekType,
				        "445", 4,
				        "454", 4,
				        "544", 5,
				        ERROR ( "QuarterWeekType only supports 445, 454, and 544" )
				    )
				VAR WeeksInP2 =
				    SWITCH (
				        QuarterWeekType,
				        "445", 4,
				        "454", 5,
				        "544", 4,
				        ERROR ( "QuarterWeekType only supports 445, 454, and 544" )
				    )
				VAR WeeksInP3 =
				    SWITCH (
				        QuarterWeekType,
				        "445", 5,
				        "454", 4,
				        "544", 4,
				        ERROR ( "QuarterWeekType only supports 445, 454, and 544" )
				    )
				VAR FirstSundayReference =
				    DATE ( 1900, 12, 30 ) -- Do not change this 
				VAR FirstWeekReference = FirstSundayReference + FirstDayOfWeek
				VAR RawDays =
				    CALENDAR ( FirstDayCalendar, LastDayCalendar )
				VAR CalendarGregorianPrefixSpace =
				    IF ( CalendarGregorianPrefix <> "", CalendarGregorianPrefix & " ", "" )
				VAR FiscalGregorianPrefixSpace =
				    IF ( FiscalGregorianPrefix <> "", FiscalGregorianPrefix & " ", "" )
				VAR FiscalWeeklyPrefixSpace =
				    IF ( FiscalWeeklyPrefix <> "", FiscalWeeklyPrefix & " ", "" )
				VAR CustomFiscalRawDays =
				    GENERATE ( FiscalPeriods, CALENDAR ( [FW StartOfYear], [FW EndOfYear] ) )
				VAR CalendarStandardGregorianBase =
				    GENERATE (
				        NATURALLEFTOUTERJOIN ( RawDays, HolidayDates ),
				        VAR CalDate = [Date]
				        VAR CalYear =
				            YEAR ( [Date] )
				        VAR CalMonthNumber =
				            MONTH ( [Date] )
				        VAR CalQuarterNumber =
				            ROUNDUP ( CalMonthNumber / 3, 0 )
				        VAR CalDay =
				            DAY ( [Date] )
				        VAR CalWeekNumber =
				            WEEKNUM ( CalDate, WeekDayCalculationType )
				        VAR CalDayOfMonth =
				            DAY ( CalDate )
				        VAR WeekDayNumber =
				            WEEKDAY ( CalDate, WeekDayCalculationType )
				        VAR YearWeekNumber =
				            INT ( DIVIDE ( CalDate - FirstWeekReference, 7 ) )
				        VAR CalendarFirstDayOfYear =
				            DATE ( CalYear, 1, 1 )
				        VAR CalendarDayOfYear =
				            INT ( CalDate - CalendarFirstDayOfYear + 1 )
				        VAR IsWorkingDay =
				            CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], WEEKDAY ( CalDate, 1 ) - 1 )
				                && ISBLANK ( [Holiday Name] )
				        VAR _CheckLeapYearBefore =
				            CalYear -
				            IF ( (CalMonthNumber = 2 && CalDayOfMonth < 29)
				                     || CalMonthNumber < 2,
				                1,
				                0 )
				        VAR LeapYearsBefore1900 =
				            INT ( 1899 / 4 )
				                - INT ( 1899 / 100 )
				                + INT ( 1899 / 400 )
				        VAR LeapYearsBetween =
				            INT ( _CheckLeapYearBefore / 4 )
				                - INT ( _CheckLeapYearBefore / 100 )
				                + INT ( _CheckLeapYearBefore / 400 )
				                - LeapYearsBefore1900
				        VAR Sequential365DayNumber =
				            INT ( CalDate - LeapYearsBetween ) 
				        RETURN
				            ROW (
				                "DateKey", CalYear * 10000
				                    + CalMonthNumber * 100
				                    + CalDay,
				                "Calendar YearNumber", CalYear,
				                "Calendar Year", CalendarGregorianPrefixSpace & CalYear,
				                "Calendar QuarterNumber", CalQuarterNumber,
				                "Calendar Quarter", CalendarGregorianPrefix & "Q"
				                    & CalQuarterNumber
				                    & " ",
				                "Calendar YearQuarterNumber", CalYear * 4
				                    - 1
				                    + CalQuarterNumber,
				                "Calendar Quarter Year", CalendarGregorianPrefix & "Q"
				                    & CalQuarterNumber
				                    & " "
				                    & CalYear,
				                "Calendar MonthNumber", CalMonthNumber,
				                "Calendar Month", FORMAT ( CalDate, "mmm" ),
				                "Calendar YearMonthNumber", CalYear * 12
				                    - 1
				                    + CalMonthNumber,
				                "Calendar Month Year", FORMAT ( CalDate, "mmm" ) & " "
				                    & CalYear,
				                "Calendar WeekNumber", CalWeekNumber,
				                "Calendar Week", CalendarGregorianPrefix & "W"
				                    & FORMAT ( CalWeekNumber, "00" ),
				                "Calendar YearWeekNumber", YearWeekNumber,
				                "Calendar Week Year", CalendarGregorianPrefix & "W"
				                    & FORMAT ( CalWeekNumber, "00" )
				                    & "-"
				                    & CalYear,
				                "Calendar WeekYearOrder", CalYear * 100
				                    + CalWeekNumber,
				                "Calendar DayOfYearNumber", CalendarDayOfYear,
				                "Day of Month", CalDayOfMonth,
				                "WeekDayNumber", WeekDayNumber,
				                "Week Day", FORMAT ( CalDate, "ddd" ),
				                "IsWorkingDay", IsWorkingDay,
				                "Day Type", IF ( IsWorkingDay, WorkingDayType, NonWorkingDayType ),
				                "Sequential365DayNumber", Sequential365DayNumber
				            )
				    )
				VAR CalendarStandardGregorian =
				    GENERATE (
				        CalendarStandardGregorianBase,
				        VAR CalDate = [Date]
				        VAR YearNumber = [Calendar YearNumber]
				        VAR MonthNumber = [Calendar MonthNumber]
				        VAR YearWeekNumber = [Calendar YearWeekNumber]
				        VAR YearMonthNumber = [Calendar YearMonthNumber]
				        VAR YearQuarterNumber = [Calendar YearQuarterNumber]
				        VAR CurrentWeekPos =
				            AVERAGEX (
				                FILTER ( CalendarStandardGregorianBase, [Date] = TodayReference ),
				                [Calendar YearWeekNumber]
				            )
				        VAR CurrentMonthPos =
				            AVERAGEX (
				                FILTER ( CalendarStandardGregorianBase, [Date] = TodayReference ),
				                [Calendar YearMonthNumber]
				            )
				        VAR CurrentQuarterPos =
				            AVERAGEX (
				                FILTER ( CalendarStandardGregorianBase, [Date] = TodayReference ),
				                [Calendar YearQuarterNumber]
				            )
				        VAR CurrentYearPos =
				            AVERAGEX (
				                FILTER ( CalendarStandardGregorianBase, [Date] = TodayReference ),
				                [Calendar YearNumber]
				            )
				        VAR RelativeWeekPos = YearWeekNumber - CurrentWeekPos
				        VAR RelativeMonthPos = YearMonthNumber - CurrentMonthPos
				        VAR RelativeQuarterPos = YearQuarterNumber - CurrentQuarterPos
				        VAR RelativeYearPos = YearNumber - CurrentYearPos
				        VAR CalStartOfMonth =
				            DATE ( YearNumber, MonthNumber, 1 )
				        VAR CalEndOfMonth =
				            EOMONTH ( CalDate, 0 )
				        VAR CalMonthDays = 
				            INT ( CalEndOfMonth - CalStartOfMonth + 1 ) 
				        VAR CalDayOfMonthNumber =
				            INT ( CalDate - CalStartOfMonth + 1 )
				        VAR CalStartOfQuarter =
				            MINX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearQuarterNumber] = YearQuarterNumber
				                ),
				                [Date]
				            )
				        VAR CalEndOfQuarter =
				            MAXX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearQuarterNumber] = YearQuarterNumber
				                ),
				                [Date]
				            )
				        VAR CalQuarterDays =
				            INT ( CalEndOfQuarter - CalStartOfQuarter + 1 )         
				        VAR CalDayOfQuarterNumber =
				            INT ( CalDate - CalStartOfQuarter + 1 )
				        VAR CalYearDays =
				            INT ( DATE ( YearNumber, 12, 31 ) - DATE ( YearNumber, 1, 1 ) + 1 )
				        VAR CalDatePreviousWeek = CalDate - 7
				        VAR CalDatePreviousMonth = 
				            MAXX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearMonthNumber] = YearMonthNumber - 1
				                    &&
				                    ( [Day of Month] <= CalDayOfMonthNumber
				                      || CalDayOfMonthNumber = CalMonthDays )
				                ),
				                [Date]
				            )
				        VAR CalDatePreviousQuarter = 
				            MAXX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearMonthNumber] = YearMonthNumber - 3
				                    &&
				                    ( [Day of Month] <= CalDayOfMonthNumber
				                      || CalDayOfMonthNumber = CalMonthDays )
				                ),
				                [Date]
				            )
				        VAR CalDatePreviousYear = 
				            MAXX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearMonthNumber] = YearMonthNumber - 12
				                    &&
				                    ( [Day of Month] <= CalDayOfMonthNumber
				                      || CalDayOfMonthNumber = CalMonthDays )
				                ),
				                [Date]
				            )
				        VAR CalStartOfYear =
				            DATE ( YearNumber, 1, 1 )
				        VAR CalEndOfYear =
				            DATE ( YearNumber, 12, 31 )
				        RETURN
				            ROW ( "Calendar RelativeWeekPos", RelativeWeekPos,
				            "Calendar RelativeMonthPos", RelativeMonthPos,
				            "Calendar RelativeQuarterPos", RelativeQuarterPos,
				            "Calendar RelativeYearPos", RelativeYearPos,
				            "Calendar StartOfMonth", CalStartOfMonth,
				            "Calendar EndOfMonth", CalEndOfMonth,
				            "Calendar DayOfMonthNumber", CalDayOfMonthNumber,
				            "Calendar StartOfQuarter", CalStartOfQuarter,
				            "Calendar EndOfQuarter", CalEndOfQuarter,
				            "Calendar DayOfQuarterNumber", CalDayOfQuarterNumber,            
				            "Calendar StartOfYear", CalStartOfYear,
				            "Calendar EndOfYear", CalEndOfYear,
				            "Calendar DatePreviousWeek", CalDatePreviousWeek,
				            "Calendar DatePreviousMonth", CalDatePreviousMonth,
				            "Calendar DatePreviousQuarter", CalDatePreviousQuarter,
				            "Calendar DatePreviousYear", CalDatePreviousYear,
				            "Calendar MonthDays", CalMonthDays,
				            "Calendar QuarterDays", CalQuarterDays,
				            "Calendar YearDays", CalYearDays
				            )
				    )
				VAR FiscalStandardGregorianBase =
				    GENERATE (
				        NATURALLEFTOUTERJOIN ( RawDays, HolidayDates ),
				        VAR FiscalDate = [Date]
				        VAR CalYear =
				            YEAR ( FiscalDate )
				        VAR CalMonthNumber =
				            MONTH ( FiscalDate )
				        VAR CalDay =
				            DAY ( [Date] )
				        VAR WeekDayNumber =
				            WEEKDAY ( FiscalDate, WeekDayCalculationType )
				        VAR YearWeekNumber =
				            INT ( DIVIDE ( FiscalDate - FirstWeekReference, 7 ) )
				        VAR FiscalYear =
				            CalYear 
				                + IF ( FiscalCalendarFirstMonth > 1,
				                      IF ( CalMonthNumber >= FiscalCalendarFirstMonth, 
				                          TypeStartFiscalYear,                     -- TypeStartFiscalYear = 1
				                          -1 * (TypeStartFiscalYear = 0)           -- TypeStartFiscalYear = 0
				                      )
				                  )
				        VAR FiscalMonthNumber =
				            MOD ( CalMonthNumber - FiscalCalendarFirstMonth, 12 )
				                + 1
				        VAR FiscalMonthQuarterNumber = 
				            MOD ( FiscalMonthNumber - 1, 3 ) + 1
				        VAR FiscalFirstDayOfYear =
				            DATE ( FiscalYear - (OffsetFiscalYear * TypeStartFiscalYear), FiscalCalendarFirstMonth, 1 )
				        VAR FiscalDayOfYear =
				            INT ( FiscalDate - FiscalFirstDayOfYear + 1 )
				        VAR FiscalFirstYearWeekNumber =
				            INT ( DIVIDE ( FiscalFirstDayOfYear - FirstWeekReference, 7 ) )
				        VAR FiscalWeekNumber = YearWeekNumber - FiscalFirstYearWeekNumber
				            + 1
				        VAR FiscalQuarterNumber =
				            ROUNDUP ( FiscalMonthNumber / 3, 0 )
				        VAR IsWorkingDay =
				            CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], WEEKDAY ( FiscalDate, 1 ) - 1 )
				                && ISBLANK ( [Holiday Name] )
				        RETURN
				            ROW (
				                "DateKey", CalYear * 10000
				                    + CalMonthNumber * 100
				                    + CalDay,
				                "Fiscal Year", FiscalGregorianPrefixSpace & FiscalYear,
				                "Fiscal YearNumber", FiscalYear,
				                "Fiscal QuarterNumber", FiscalQuarterNumber,
				                "Fiscal Quarter", FiscalGregorianPrefix & "Q"
				                    & FiscalQuarterNumber
				                    & " ",
				                "Fiscal YearQuarterNumber", FiscalYear * 4
				                    - 1
				                    + FiscalQuarterNumber,
				                "Fiscal Quarter Year", FiscalGregorianPrefix & "Q"
				                    & FiscalQuarterNumber
				                    & " "
				                    & FiscalYear,
				                "Fiscal MonthNumber", FiscalMonthNumber,
				                "Fiscal MonthQuarterNumber", FiscalMonthQuarterNumber,
				                "Fiscal Month", FORMAT ( FiscalDate, "mmm" ),
				                "Fiscal YearMonthNumber", FiscalYear * 12
				                    - 1
				                    + FiscalMonthNumber,
				                "Fiscal Month Year", FORMAT ( FiscalDate, "mmm" ) & " "
				                    & CalYear,
				                "Fiscal WeekNumber", FiscalWeekNumber,
				                "Fiscal Week", FiscalGregorianPrefix & "W"
				                    & FORMAT ( FiscalWeekNumber, "00" ),
				                "Fiscal YearWeekNumber", YearWeekNumber,
				                "Fiscal Week Year", FiscalGregorianPrefix & "W"
				                    & FORMAT ( FiscalWeekNumber, "00" )
				                    & "-"
				                    & FiscalYear,
				                "Fiscal WeekYearOrder", FiscalYear * 100
				                    + FiscalWeekNumber,
				                "Fiscal DayOfYearNumber", FiscalDayOfYear,
				                "Day of Month", DAY ( FiscalDate ),
				                "WeekDayNumber", WeekDayNumber,
				                "Week Day", FORMAT ( FiscalDate, "ddd" ),
				                "IsWorkingDay", IsWorkingDay,
				                "Day Type", IF ( IsWorkingDay, WorkingDayType, NonWorkingDayType )
				            )
				    )
				VAR FiscalStandardGregorian =
				    GENERATE (
				        FiscalStandardGregorianBase,
				        VAR FiscalDate = [Date]
				        VAR FiscalYearNumber = [Fiscal YearNumber]
				        VAR MonthNumber = [Fiscal MonthNumber]
				        VAR CalendarYearNumber =
				            YEAR ( FiscalDate )
				        VAR CalendarMonthNumber =
				            MONTH ( FiscalDate )
				        VAR YearWeekNumber = [Fiscal YearWeekNumber]
				        VAR YearMonthNumber = [Fiscal YearMonthNumber]
				        VAR YearQuarterNumber = [Fiscal YearQuarterNumber]
				        VAR CurrentWeekPos =
				            AVERAGEX (
				                FILTER ( FiscalStandardGregorianBase, [Date] = TodayReference ),
				                [Fiscal YearWeekNumber]
				            )
				        VAR CurrentMonthPos =
				            AVERAGEX (
				                FILTER ( FiscalStandardGregorianBase, [Date] = TodayReference ),
				                [Fiscal YearMonthNumber]
				            )
				        VAR CurrentQuarterPos =
				            AVERAGEX (
				                FILTER ( FiscalStandardGregorianBase, [Date] = TodayReference ),
				                [Fiscal YearQuarterNumber]
				            )
				        VAR CurrentYearPos =
				            AVERAGEX (
				                FILTER ( FiscalStandardGregorianBase, [Date] = TodayReference ),
				                [Fiscal YearNumber]
				            )
				        VAR RelativeWeekPos = YearWeekNumber - CurrentWeekPos
				        VAR RelativeMonthPos = YearMonthNumber - CurrentMonthPos
				        VAR RelativeQuarterPos = YearQuarterNumber - CurrentQuarterPos
				        VAR RelativeYearPos = FiscalYearNumber - CurrentYearPos
				        VAR FiscalStartOfMonth =
				            DATE ( CalendarYearNumber, CalendarMonthNumber, 1 )
				        VAR FiscalEndOfMonth =
				            EOMONTH ( FiscalDate, 0 )
				        VAR FiscalMonthDays = 
				            INT ( FiscalEndOfMonth - FiscalStartOfMonth + 1 ) 
				        VAR FiscalDayOfMonthNumber =
				            INT ( FiscalDate - FiscalStartOfMonth + 1 )
				        VAR FiscalStartOfQuarter =
				            MINX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearQuarterNumber] = YearQuarterNumber
				                ),
				                [Date]
				            )
				        VAR FiscalEndOfQuarter =
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearQuarterNumber] = YearQuarterNumber
				                ),
				                [Date]
				            )
				        VAR FiscalQuarterDays = 
				            INT ( FiscalEndOfQuarter - FiscalStartOfQuarter + 1 )
				        VAR FiscalFirstDayOfYear =
				            DATE ( FiscalYearNumber - OffsetFiscalYear, FiscalCalendarFirstMonth, 1 )
				        VAR FiscalLastDayOfYear =
				            DATE ( FiscalYearNumber + (1 * (OffsetFiscalYear = 0)), FiscalCalendarFirstMonth, 1 ) - 1
				        VAR FiscalYearDays = 
				            INT ( FiscalLastDayOfYear - FiscalFirstDayOfYear + 1 ) 
				        VAR FiscalDayOfQuarterNumber =
				            INT ( FiscalDate - FiscalStartOfQuarter + 1 )
				        VAR FiscalStartOfYear =
				            MINX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearNumber] = FiscalYearNumber
				                ),
				                [Date]
				            )
				        VAR FiscalEndOfYear =
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearNumber] = FiscalYearNumber
				                ),
				                [Date]
				            )
				        VAR FiscalDatePreviousWeek = FiscalDate - 7
				        VAR FiscalDatePreviousMonth = 
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearMonthNumber] = YearMonthNumber - 1
				                    &&
				                    ( [Day of Month] <= FiscalDayOfMonthNumber
				                      || FiscalDayOfMonthNumber = FiscalMonthDays )
				                ),
				                [Date]
				            )
				        VAR FiscalDatePreviousQuarter = 
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearMonthNumber] = YearMonthNumber - 3
				                    &&
				                    ( [Day of Month] <= FiscalDayOfMonthNumber
				                      || FiscalDayOfMonthNumber = FiscalMonthDays )
				                ),
				                [Date]
				            )
				        VAR FiscalDatePreviousYear = 
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearMonthNumber] = YearMonthNumber - 12
				                    &&
				                    ( [Day of Month] <= FiscalDayOfMonthNumber
				                      || FiscalDayOfMonthNumber = FiscalMonthDays )
				                ),
				                [Date]
				            )
				        RETURN
				            ROW ( "Fiscal RelativeWeekPos", RelativeWeekPos,
				            "Fiscal RelativeMonthPos", RelativeMonthPos,
				            "Fiscal RelativeQuarterPos", RelativeQuarterPos,
				            "Fiscal RelativeYearPos", RelativeYearPos,
				            "Fiscal StartOfMonth", FiscalStartOfMonth,
				            "Fiscal EndOfMonth", FiscalEndOfMonth,
				            "Fiscal DayOfMonthNumber", FiscalDayOfMonthNumber,
				            "Fiscal StartOfQuarter", FiscalStartOfQuarter,
				            "Fiscal EndOfQuarter", FiscalEndOfQuarter,
				            "Fiscal DayOfQuarterNumber", FiscalDayOfQuarterNumber,
				            "Fiscal StartOfYear", FiscalStartOfYear,
				            "Fiscal EndOfYear", FiscalEndOfYear,
				            "Fiscal DatePreviousWeek", FiscalDatePreviousWeek,
				            "Fiscal DatePreviousMonth", FiscalDatePreviousMonth,
				            "Fiscal DatePreviousQuarter", FiscalDatePreviousQuarter,
				            "Fiscal DatePreviousYear", FiscalDatePreviousYear,
				            "Fiscal MonthDays", FiscalMonthDays,
				            "Fiscal QuarterDays", FiscalQuarterDays,
				            "Fiscal YearDays", FiscalYearDays
				           )
				    )
				VAR FiscalWeeksBase =
				    GENERATE (
				        NATURALLEFTOUTERJOIN ( CustomFiscalRawDays, HolidayDates ),
				        VAR CalDate = [Date]
				        VAR FwFirstDayOfYear = [FW StartOfYear]
				        VAR FwDayOfYear =
				            INT ( CalDate - FwFirstDayOfYear + 1 )
				        VAR CalYear =
				            YEAR ( [Date] )
				        VAR CalMonthNumber =
				            MONTH ( [Date] )
				        VAR CalDay =
				            DAY ( [Date] )
				        VAR FwDayOfYearNumber = CalDate - [FW StartOfYear]
				            + 1
				        VAR FwWeekNumber =
				            INT ( CEILING ( FwDayOfYearNumber / 7, 1 ) )
				        VAR FwPeriodNumber = 
				            IF ( FwWeekNumber > 52, 14, ROUNDUP ( FwWeekNumber / 4, 0 ) )
				        VAR FwYearNumber = [FW YearNumber]
				        VAR FwQuarterNumber =
				            IF ( FwWeekNumber > 52, 4, ROUNDUP ( FwWeekNumber / 13, 0 ) )
				        VAR FwWeekInQuarterNumber =
				            IF ( FwWeekNumber > 52, 14, FwWeekNumber - 13 * ( FwQuarterNumber - 1 ) )
				        VAR FwMonthNumber =
				            ( FwQuarterNumber - 1 )
				                * 3
				                + SWITCH (
				                    TRUE,
				                    FwWeekInQuarterNumber <= WeeksInP1, 1,
				                    FwWeekInQuarterNumber
				                        <= ( WeeksInP1 + WeeksInP2 ), 2,
				                    3
				                )
				        VAR WeekDayNumber =
				            WEEKDAY ( CalDate, WeekDayCalculationType )
				        VAR FirstDayOfWeek = [Date] - WeekDayNumber
				            + 1
				        VAR LastDayOfWeek = FirstDayOfWeek + 6
				        VAR IsWorkingDay =
				            CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], WEEKDAY ( CalDate, 1 ) - 1 )
				                && ISBLANK ( [Holiday Name] )
				        RETURN
				            ROW (
				                "DateKey", CalYear * 10000
				                    + CalMonthNumber * 100
				                    + CalDay,
				                // "FW YearNumber", FwYearNumber, -- It is already in the first set of columns of the GENERATE function
				                "FW Year", FiscalWeeklyPrefixSpace & FwYearNumber,
				                "FW QuarterNumber", FwQuarterNumber,
				                "FW Quarter", FiscalWeeklyPrefix & "Q"
				                    & FwQuarterNumber,
				                "FW YearQuarterNumber", FwYearNumber * 4
				                    - 1
				                    + FwQuarterNumber,
				                "FW Quarter Year", FiscalWeeklyPrefix & "Q"
				                    & FwQuarterNumber
				                    & " "
				                    & FwYearNumber,
				                "FW MonthNumber", FwMonthNumber,
				                "FW Month", FiscalWeeklyPrefix & "P"
				                    & FORMAT ( FwMonthNumber, "00" ),
				                "FW YearMonthNumber", FwYearNumber * 12
				                    - 1
				                    + FwMonthNumber,
				                "FW Month Year", FiscalWeeklyPrefix & "P"
				                    & FORMAT ( FwMonthNumber, "00" )
				                    & " "
				                    & FwYearNumber,
				                "FW WeekNumber", FwWeekNumber,
				                "FW Week", FiscalWeeklyPrefix & "W"
				                    & FORMAT ( FwWeekNumber, "00" ),
				                "FW PeriodNumber", FwPeriodNumber,
				                "FW Period", FiscalWeeklyPrefix & "P"
				                    & FORMAT ( FwPeriodNumber, "00" ),
				                "FW YearWeekNumber", INT ( DIVIDE ( CalDate - FirstWeekReference, 7 ) )
				                    + 1,
				                "FW Week Year", FiscalWeeklyPrefix & "W"
				                    & FORMAT ( FwWeekNumber, "00" )
				                    & " "
				                    & FwYearNumber,
				                "FW StartOfWeek", FirstDayOfWeek,
				                "FW EndOfWeek", LastDayOfWeek,
				                "WeekDayNumber", WeekDayNumber,
				                "Week Day", FORMAT ( CalDate, "ddd" ),
				                "FW DayOfYearNumber", FwDayOfYear,
				                "IsWorkingDay", IsWorkingDay,
				                "Day Type", IF ( IsWorkingDay, WorkingDayType, NonWorkingDayType )
				            )
				    )
				VAR FiscalWeeks_Pre = 
				    GENERATE (
				        FiscalWeeksBase,
				        VAR CalDate = [Date]
				        VAR FWYearNumber = [FW YearNumber]
				        VAR FwYearWeekNumber = [FW YearWeekNumber]
				        VAR FwYearMonthNumber = [FW YearMonthNumber]
				        VAR FwYearQuarterNumber = [FW YearQuarterNumber]
				        VAR CurrentWeekPos =
				            AVERAGEX (
				                FILTER ( FiscalWeeksBase, [Date] = TodayReference ),
				                [FW YearWeekNumber]
				            )
				        VAR CurrentMonthPos =
				            AVERAGEX (
				                FILTER ( FiscalWeeksBase, [Date] = TodayReference ),
				                [FW YearMonthNumber]
				            )
				        VAR CurrentQuarterPos =
				            AVERAGEX (
				                FILTER ( FiscalWeeksBase, [Date] = TodayReference ),
				                [FW YearQuarterNumber]
				            )
				        VAR CurrentYearPos =
				            AVERAGEX (
				                FILTER ( FiscalWeeksBase, [Date] = TodayReference ),
				                [FW YearNumber]
				            )
				        VAR RelativeWeekPos = FwYearWeekNumber - CurrentWeekPos
				        VAR RelativeMonthPos = FwYearMonthNumber - CurrentMonthPos
				        VAR RelativeQuarterPos = FwYearQuarterNumber - CurrentQuarterPos
				        VAR RelativeYearPos = FWYearNumber - CurrentYearPos
				        VAR FwStartOfMonth =
				            MINX (
				                FILTER ( FiscalWeeksBase, [FW YearMonthNumber] = FwYearMonthNumber ),
				                [Date]
				            )
				        VAR FwEndOfMonth =
				            MAXX (
				                FILTER ( FiscalWeeksBase, [FW YearMonthNumber] = FwYearMonthNumber ),
				                [Date]
				            )
				        VAR FwMonthDays = 
				            INT ( FwEndOfMonth - FwStartOfMonth + 1 ) 
				        VAR FwDayOfMonthNumber =
				            INT ( CalDate - FwStartOfMonth + 1 )
				        VAR FwStartOfQuarter =
				            MINX (
				                FILTER ( FiscalWeeksBase, [FW YearQuarterNumber] = FwYearQuarterNumber ),
				                [Date]
				            )
				        VAR FwEndOfQuarter =
				            MAXX (
				                FILTER ( FiscalWeeksBase, [FW YearQuarterNumber] = FwYearQuarterNumber ),
				                [Date]
				            )
				        VAR FwQuarterDays = 
				            INT ( FwEndOfQuarter - FwStartOfQuarter + 1 )
				        VAR FwDayOfQuarterNumber =
				            INT ( CalDate - FwStartOfQuarter + 1 )
				        VAR FwStartOfYear =
				            MINX (
				                FILTER ( FiscalWeeksBase, [FW YearNumber] = FwYearNumber ),
				                [Date]
				            )
				        VAR FwEndOfYear =
				            MAXX (
				                FILTER ( FiscalWeeksBase, [FW YearNumber] = FwYearNumber ),
				                [Date]
				            )
				        VAR FwYearDays = 
				            INT ( FwEndOfYear - FwStartOfYear + 1 )
				        RETURN
				            ROW ( "FW RelativeWeekPos", RelativeWeekPos,
				            "FW RelativeMonthPos", RelativeMonthPos,
				            "FW RelativeQuarterPos", RelativeQuarterPos,
				            "FW RelativeYearPos", RelativeYearPos,
				            "FW StartOfMonth", FwStartOfMonth,
				            "FW EndOfMonth", FwEndOfMonth,
				            "FW DayOfMonthNumber", FwDayOfMonthNumber,
				            "FW StartOfQuarter", FwStartOfQuarter,
				            "FW EndOfQuarter", FwEndOfQuarter,
				            "FW DayOfQuarterNumber", FwDayOfQuarterNumber,
				            "FW MonthDays", FwMonthDays,
				            "FW QuarterDays", FwQuarterDays,
				            "FW YearDays", FwYearDays   
				            )
				    )
				VAR FiscalWeeks =
				    GENERATE (
				        FiscalWeeks_Pre,
				        VAR CalDate = [Date]
				        VAR FwYearMonthNumber = [FW YearMonthNumber]
				        VAR FwYearQuarterNumber = [FW YearQuarterNumber]
				        VAR FWYearNumber = [FW YearNumber]
				        VAR FwDayOfMonthNumber = [FW DayOfMonthNumber]
				        VAR FwDayOfQuarterNumber = [FW DayOfQuarterNumber]
				        VAR FwDayOfYearNumber = [FW DayOfYearNumber]
				        VAR FwMonthDays = [FW EndOfMonth] - [FW StartOfMonth] + 1 
				        VAR FwQuarterDays = [FW EndOfQuarter] - [FW StartOfQuarter] + 1 
				        VAR FwYearDays = [FW EndOfYear] - [FW StartOfYear] + 1 
				        VAR FwDatePreviousWeek = CalDate - 7
				        VAR FwDatePreviousMonth = 
				            MAXX (
				                FILTER (
				                    FiscalWeeks_Pre,
				                    [Fw YearMonthNumber] = FwYearMonthNumber - 1
				                    &&
				                    ( [FW DayOfMonthNumber] <= FwDayOfMonthNumber
				                      || FwDayOfMonthNumber = FwMonthDays )
				                ),
				                [Date]
				            )
				        VAR FwDatePreviousQuarter = 
				            MAXX (
				                FILTER (
				                    FiscalWeeks_Pre,
				                    [Fw YearQuarterNumber] = FwYearQuarterNumber - 1
				                    &&
				                    ( [FW DayOfQuarterNumber] <= FwDayOfQuarterNumber
				                      || FwDayOfQuarterNumber = FwQuarterDays )
				                ),
				                [Date]
				            )        
				        VAR FwDatePreviousYear = 
				            MAXX (
				                FILTER (
				                    FiscalWeeks_Pre,
				                    [Fw YearNumber] = FWYearNumber - 1
				                    &&
				                    ( [FW DayOfYearNumber] <= FwDayOfYearNumber
				                      || FwDayOfYearNumber = FwYearDays )
				                ),
				                [Date]
				            )
				        RETURN
				            ROW ( 
				                "FW DatePreviousWeek", FwDatePreviousWeek,
				                "FW DatePreviousMonth", FwDatePreviousMonth,
				                "FW DatePreviousQuarter", FwDatePreviousQuarter,
				                "FW DatePreviousYear", FwDatePreviousYear         
				            )
				    )
				    
				VAR CompleteCalendarExpanded =
				    NATURALLEFTOUTERJOIN (
				        FiscalStandardGregorian,
				        NATURALLEFTOUTERJOIN ( CalendarStandardGregorian, FiscalWeeks )
				    )
				VAR CompleteCalendar = 
				    FILTER (
				        CompleteCalendarExpanded,
				        ( [Calendar YearNumber] >= FirstYear && [Calendar YearNumber] <= LastYear && CalendarRange = "Calendar" )
				        ||
				        ( [Fiscal YearNumber] >= FirstYear && [Fiscal YearNumber] <= LastYear && CalendarRange = "FiscalGregorian" )
				        ||
				        ( [FW YearNumber] >= FirstYear && [FW YearNumber] <= LastYear && CalendarRange = "FiscalWeekly" )
				    )
				    
				VAR Result =
				    SELECTCOLUMNS (
				        CompleteCalendar,
				        
				        -- Base date columns
				        "Date", [Date],
				        "DateKey", [DateKey],
				
				        "Day of Month", [Day of Month],
				        "WeekDayNumber", [WeekDayNumber],
				
				        "Week Day", [Week Day],
				        "Sequential365DayNumber", [Sequential365DayNumber],
				        "Relative Day", DATEDIFF(VALUES('Date Table Setup'[Today]),[Date],DAY),
				        
				        -- Calendar = Solar Calendar (January-December)
				        "Calendar YearNumber", [Calendar YearNumber],
				        "Calendar Year", [Calendar Year],
				        "Calendar QuarterNumber", [Calendar QuarterNumber],
				        "Calendar Quarter", [Calendar Quarter],
				        "Calendar YearQuarterNumber", [Calendar YearQuarterNumber],
				        "Calendar Quarter Year", [Calendar Quarter Year],
				        "Calendar MonthNumber", [Calendar MonthNumber],
				        "Calendar Month", [Calendar Month],
				        "Calendar YearMonthNumber", [Calendar YearMonthNumber],
				        "Calendar Month Year", [Calendar Month Year],
				        "Calendar WeekNumber", [Calendar WeekNumber],
				        "Calendar Week", [Calendar Week],
				        "Calendar YearWeekNumber", [Calendar YearWeekNumber],
				        "Calendar Week Year", [Calendar Week Year],
				        "Calendar WeekYearOrder", [Calendar WeekYearOrder],
				        "Calendar RelativeWeekPos", [Calendar RelativeWeekPos],
				        "Calendar RelativeMonthPos", [Calendar RelativeMonthPos],
				        "Calendar RelativeQuarterPos", [Calendar RelativeQuarterPos],
				        "Calendar RelativeYearPos", [Calendar RelativeYearPos],
				        "Calendar StartOfMonth", [Calendar StartOfMonth],
				        "Calendar EndOfMonth", [Calendar EndOfMonth],
				        "Calendar StartOfQuarter", [Calendar StartOfQuarter],
				        "Calendar EndOfQuarter", [Calendar EndOfQuarter],
				        "Calendar StartOfYear", [Calendar StartOfYear],
				        "Calendar EndOfYear", [Calendar EndOfYear],
				        "Calendar MonthDays", [Calendar MonthDays],
				        "Calendar QuarterDays", [Calendar QuarterDays],
				        "Calendar YearDays", [Calendar YearDays],
				        "Calendar DayOfMonthNumber", [Calendar DayOfMonthNumber],
				        "Calendar DayOfQuarterNumber", [Calendar DayOfQuarterNumber],
				        "Calendar DayOfYearNumber", [Calendar DayOfYearNumber],
				        "Calendar DatePreviousWeek", [Calendar DatePreviousWeek],
				        "Calendar DatePreviousMonth", [Calendar DatePreviousMonth],
				        "Calendar DatePreviousQuarter", [Calendar DatePreviousQuarter],
				        "Calendar DatePreviousYear", [Calendar DatePreviousYear],
				
				        -- Fiscal = Fiscal Monthly Calendar
				        "Fiscal Year", [Fiscal Year],
				        "Fiscal YearNumber", [Fiscal YearNumber],
				        "Fiscal QuarterNumber", [Fiscal QuarterNumber],
				        "Fiscal Quarter", [Fiscal Quarter],
				        "Fiscal YearQuarterNumber", [Fiscal YearQuarterNumber],
				        "Fiscal Quarter Year", [Fiscal Quarter Year],
				        "Fiscal MonthNumber", [Fiscal MonthNumber],
				        "Fiscal MonthInQuarterNumber", [Fiscal MonthQuarterNumber],
				        "Fiscal Month", [Fiscal Month],
				        "Fiscal YearMonthNumber", [Fiscal YearMonthNumber],
				        "Fiscal Month Year", [Fiscal Month Year],
				        "Fiscal WeekNumber", [Fiscal WeekNumber],
				        "Fiscal Week", [Fiscal Week],
				        "Fiscal YearWeekNumber", [Fiscal YearWeekNumber],
				        "Fiscal Week Year", [Fiscal Week Year],
				        "Fiscal WeekYearOrder", [Fiscal WeekYearOrder],
				        "Fiscal RelativeWeekPos", [Fiscal RelativeWeekPos],
				        "Fiscal RelativeMonthPos", [Fiscal RelativeMonthPos],
				        "Fiscal RelativeQuarterPos", [Fiscal RelativeQuarterPos],
				        "Fiscal RelativeYearPos", [Fiscal RelativeYearPos],
				        "Fiscal StartOfMonth", [Fiscal StartOfMonth],
				        "Fiscal EndOfMonth", [Fiscal EndOfMonth],
				        "Fiscal StartOfQuarter", [Fiscal StartOfQuarter],
				        "Fiscal EndOfQuarter", [Fiscal EndOfQuarter],
				        "Fiscal StartOfYear", [Fiscal StartOfYear],
				        "Fiscal EndOfYear", [Fiscal EndOfYear],
				        "Fiscal MonthDays", [Fiscal MonthDays],
				        "Fiscal QuarterDays", [Fiscal QuarterDays],
				        "Fiscal YearDays", [Fiscal YearDays],
				        "Fiscal DayOfMonthNumber", [Fiscal DayOfMonthNumber],
				        "Fiscal DayOfQuarterNumber", [Fiscal DayOfQuarterNumber],
				        "Fiscal DayOfYearNumber", [Fiscal DayOfYearNumber],
				        "Fiscal DatePreviousWeek", [Fiscal DatePreviousWeek],
				        "Fiscal DatePreviousMonth", [Fiscal DatePreviousMonth],
				        "Fiscal DatePreviousQuarter", [Fiscal DatePreviousQuarter],
				        "Fiscal DatePreviousYear", [Fiscal DatePreviousYear],
				
				        -- FW = Fiscal Weekly calendar
				        "FW YearNumber", [FW YearNumber],
				        "FW Year", [FW Year],
				        "FW QuarterNumber", [FW QuarterNumber],
				        "FW Quarter", [FW Quarter],
				        "FW YearQuarterNumber", [FW YearQuarterNumber],
				        "FW Quarter Year", [FW Quarter Year],
				        "FW MonthNumber", [FW MonthNumber],
				        "FW Month", [FW Month],
				        "FW YearMonthNumber", [FW YearMonthNumber],
				        "FW Month Year", [FW Month Year],
				        "FW WeekNumber", [FW WeekNumber],
				        "FW Week", [FW Week],
				        "FW PeriodNumber", [FW PeriodNumber],
				        "FW Period", [FW Period],
				        "FW YearWeekNumber", [FW YearWeekNumber],
				        "FW Week Year", [FW Week Year],
				        "FW StartOfWeek", [FW StartOfWeek],
				        "FW EndOfWeek", [FW EndOfWeek],
				        "FW RelativeWeekPos", [FW RelativeWeekPos],
				        "FW RelativeMonthPos", [FW RelativeMonthPos],
				        "FW RelativeQuarterPos", [FW RelativeQuarterPos],
				        "FW RelativeYearPos", [FW RelativeYearPos],
				        "FW StartOfMonth", [FW StartOfMonth],
				        "FW EndOfMonth", [FW EndOfMonth],
				        "FW StartOfQuarter", [FW StartOfQuarter],
				        "FW EndOfQuarter", [FW EndOfQuarter],
				        "FW StartOfYear", [FW StartOfYear],
				        "FW EndOfYear", [FW EndOfYear],
				        "FW MonthDays", [FW MonthDays],
				        "FW QuarterDays", [FW QuarterDays],
				        "FW YearDays", [FW YearDays],
				        "FW DayOfMonthNumber", [FW DayOfMonthNumber],
				        "FW DayOfQuarterNumber", [FW DayOfQuarterNumber],
				        "FW DayOfYearNumber", [FW DayOfYearNumber],
				        "FW DatePreviousWeek", [FW DatePreviousWeek],
				        "FW DatePreviousMonth", [FW DatePreviousMonth],
				        "FW DatePreviousQuarter", [FW DatePreviousQuarter],
				        "FW DatePreviousYear", [FW DatePreviousYear],
				
				        -- Holidays and working days
				        "Holiday Name", [Holiday Name],
				        "IsWorkingDay", [IsWorkingDay],
				        "Day Type", [Day Type]    
				    )
				RETURN 
				    Result
				```

	annotation PBI_Id = 3e1e0e32572f4841827cc74f43c94a86

