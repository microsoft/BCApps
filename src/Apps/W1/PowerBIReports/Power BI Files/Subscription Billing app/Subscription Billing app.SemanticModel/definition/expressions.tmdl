expression ENVIRONMENT = "CLASSROOM" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: 7c230b36-e498-4262-9d5c-f42421097eed
	queryGroup: 'Parameters and Functions\Connection Parameters'

	annotation PBI_ResultType = Text

	annotation PBI_NavigationStepName = Navigation

expression Dimensions =
		let
		    Source = Dynamics365BusinessCentral.ApiContentsWithOptions(ENVIRONMENT, COMPANY,API_ENDPOINT, []),
		    TableData = Source{[Name="dimensions",Signature="table"]}[Data],
		    #"Changed Type" = Table.TransformColumnTypes(
		        TableData,
		        {
		            {"dim1Code", type text},
		            {"dim1Name", type text},
		            {"dim1Caption", type text},
		            {"dim2Code", type text},
		            {"dim2Name", type text},
		            {"dim2Caption", type text},
		            {"dim3Code", type text},
		            {"dim3Name", type text},
		            {"dim3Caption", type text},
		            {"dim4Code", type text},
		            {"dim4Name", type text},
		            {"dim4Caption", type text},
		            {"dim5Code", type text},
		            {"dim5Name", type text},
		            {"dim5Caption", type text},
		            {"dim6Code", type text},
		            {"dim6Name", type text},
		            {"dim6Caption", type text},
		            {"dim7Code", type text},
		            {"dim7Name", type text},
		            {"dim7Caption", type text},
		            {"dim8Code", type text},
		            {"dim8Name", type text},
		            {"dim8Caption", type text}
		        }
		    ),
		    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"ETag"})
		in
		    #"Removed Columns"
	lineageTag: 0e7242e1-6de4-4458-b6aa-e47397d3c6c0
	queryGroup: Diemensions

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression DimensionSet_Blank =
		let
		    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i45WMlDSUTIEYtJQbCwA", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [dimensionSetID = _t, valueCount = _t, dimension1ValueCode = _t, dimension1ValueName = _t, dimension2ValueCode = _t, dimension2ValueName = _t, dimension3ValueCode = _t, dimension3ValueName = _t, dimension4ValueCode = _t, dimension4ValueName = _t, dimension5ValueCode = _t, dimension5ValueName = _t, dimension6ValueCode = _t, dimension6ValueName = _t, dimension7ValueCode = _t, dimension7ValueName = _t, dimension8ValueCode = _t, dimension8ValueName = _t]),
		    #"Changed Type" = Table.TransformColumnTypes(Source,{{"dimensionSetID", Int64.Type}, {"valueCount", Int64.Type}, {"dimension1ValueCode", type text}, {"dimension1ValueName", type text}, {"dimension2ValueCode", type text}, {"dimension2ValueName", type text}, {"dimension3ValueCode", type text}, {"dimension3ValueName", type text}, {"dimension4ValueCode", type text}, {"dimension4ValueName", type text}, {"dimension5ValueCode", type text}, {"dimension5ValueName", type text}, {"dimension6ValueCode", type text}, {"dimension6ValueName", type text}, {"dimension7ValueCode", type text}, {"dimension7ValueName", type text}, {"dimension8ValueCode", type text}, {"dimension8ValueName", type text}})
		in
		    #"Changed Type"
	lineageTag: b4247344-244a-48dc-9215-b6ea1325f879
	queryGroup: Diemensions

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression DimensionSets_DataSource =
		let
		    Source = Dynamics365BusinessCentral.ApiContentsWithOptions(ENVIRONMENT, COMPANY,API_ENDPOINT, []),
		    TableData = Source{[Name="dimensionSetEntries",Signature="table"]}[Data],
		    #"Changed Type" = Table.TransformColumnTypes(
		        TableData,
		        {
		            {"dimensionSetID", Int64.Type},
		            {"valueCount", Int64.Type},
		            {"dimension1ValueCode", type text},
		            {"dimension1ValueName", type text},
		            {"dimension2ValueCode", type text},
		            {"dimension2ValueName", type text},
		            {"dimension3ValueCode", type any},
		            {"dimension3ValueName", type any},
		            {"dimension4ValueCode", type any},
		            {"dimension4ValueName", type any},
		            {"dimension5ValueCode", type any},
		            {"dimension5ValueName", type any},
		            {"dimension6ValueCode", type any},
		            {"dimension6ValueName", type any},
		            {"dimension7ValueCode", type any},
		            {"dimension7ValueName", type any},
		            {"dimension8ValueCode", type any},
		            {"dimension8ValueName", type any}
		        }
		    ),
		    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"ETag"}),
		    #"Appended Query" = Table.Combine({#"Removed Columns", DimensionSet_Blank}),
		    #"Filtered Rows" = Table.SelectRows(#"Appended Query", each ([dimensionSetID] <> 0))
		in
		    #"Filtered Rows"
	lineageTag: 946e1eeb-d5fb-44ad-a36f-17324489be24
	queryGroup: Diemensions

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression GetDimCode = ```
		let
		    Source = (DimNo as number) => let 
		    Source = Dimensions,
		    Rec = Table.First(Source),
		    DimCaption = if
		    DimNo = 1 then Record.Field(Rec,"Dim1Code") else if
		    DimNo = 2 then Record.Field(Rec,"Dim2Code") else if
		    DimNo = 3 then Record.Field(Rec,"Dim3Code") else if
		    DimNo = 4 then Record.Field(Rec,"Dim4Code") else if
		    DimNo = 5 then Record.Field(Rec,"Dim5Code") else if
		    DimNo = 6 then Record.Field(Rec,"Dim6Code") else if
		    DimNo = 7 then Record.Field(Rec,"Dim7Code") else if
		    DimNo = 8 then Record.Field(Rec,"Dim8Code") else ""
		in
		    DimCaption
		in
		    Source
		```
	lineageTag: 510862c7-c25e-42da-9d78-6001e7156983
	queryGroup: 'Parameters and Functions\Functions'

	annotation PBI_ResultType = Function

expression GetDimCodeCaption = ```
		let
		    Source = (DimNo as number) => let 
		    Source = Dimensions,
		    Rec = Table.First(Source),
		    DimCaption = if
		    DimNo = 1 then Record.Field(Rec,"Dim1Caption") else if
		    DimNo = 2 then Record.Field(Rec,"Dim2Caption") else if
		    DimNo = 3 then Record.Field(Rec,"Dim3Caption") else if
		    DimNo = 4 then Record.Field(Rec,"Dim4Caption") else if
		    DimNo = 5 then Record.Field(Rec,"Dim5Caption") else if
		    DimNo = 6 then Record.Field(Rec,"Dim6Caption") else if
		    DimNo = 7 then Record.Field(Rec,"Dim7Caption") else if
		    DimNo = 8 then Record.Field(Rec,"Dim8Caption") else "N/A Code",
		    DimCaption2 = if DimCaption="" then "N/A Code" else DimCaption,
		    DimCaption3 = DimCaption2&" (Dim "& Number.ToText(DimNo) & ")"
		in
		    DimCaption3
		in
		    Source
		```
	lineageTag: bb9e9440-7a6e-4528-b25f-c8df576b848f
	queryGroup: 'Parameters and Functions\Functions'

	annotation PBI_ResultType = Function

expression GetDimNameCaption = ```
		let
		    Source = (DimNo as number) => let 
		    Source = Dimensions,
		    Rec = Table.First(Source),
		    DimCaption = if
		    DimNo = 1 then Record.Field(Rec,"Dim1Name") else if
		    DimNo = 2 then Record.Field(Rec,"Dim2Name") else if
		    DimNo = 3 then Record.Field(Rec,"Dim3Name") else if
		    DimNo = 4 then Record.Field(Rec,"Dim4Name") else if
		    DimNo = 5 then Record.Field(Rec,"Dim5Name") else if
		    DimNo = 6 then Record.Field(Rec,"Dim6Name") else if
		    DimNo = 7 then Record.Field(Rec,"Dim7Name") else if
		    DimNo = 8 then Record.Field(Rec,"Dim8Name") else "N/A Name",
		    DimCaption2 = if DimCaption="" then "N/A Name" else DimCaption&" Name",
		    DimCaption3 = DimCaption2&" (Dim "& Number.ToText(DimNo) & ")"
		in
		    DimCaption3
		in
		    Source
		```
	lineageTag: 7a06943c-0bd7-4fbb-8eb0-f507f5438d06
	queryGroup: 'Parameters and Functions\Functions'

	annotation PBI_ResultType = Function

expression API_ENDPOINT = "microsoft/analytics/v0.5" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: 0750104b-0db0-49f8-9dd1-0d6053b4b02b
	queryGroup: 'Parameters and Functions\Connection Parameters'

	annotation PBI_ResultType = Text

	annotation PBI_NavigationStepName = Navigation

/// Default contract lenght for the calculation of total contract value. Used only if service end and term until are empty.
expression 'Default Contract Term' = 12 meta [IsParameterQuery=true, Type="Number", IsParameterQueryRequired=true]
	lineageTag: 33309295-6020-4bbe-a978-e3e8582c0775
	queryGroup: 'Parameters and Functions\Connection Parameters'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Number

expression MaxForecastDate = ```
		let
		    Source = Date.EndOfYear(#"Date Table Setup"[dateTblEnd]{0})
		    
		in
		    Source
		```
	lineageTag: 4950d3ae-7164-49b7-9bdf-a509e38a6648
	queryGroup: 'Parameters and Functions\Connection Parameters'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Date

expression MinReportingDate = ```
		let
		    Source = Date.StartOfYear(#"Date Table Setup"[dateTblStart]{0})
		    
		in
		    Source
		```
	lineageTag: cdafab33-35d6-4449-a371-05ca601a4222
	queryGroup: 'Parameters and Functions\Connection Parameters'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Date

expression fncPeriodsBetween = ```
		let
		//this function calculates the number of periods / month between two dates including the start and end date
		//remaining days are devided by 30
		//("01/01/2024, "12/31/2024") => 12.0000
		//("01/01/2024, "02/01/2024") => 1.0333
		//The function is used to calculate total renvenue (TVC, ARV) based on a given duration
		
		
		    fncPeriodsBetween = (startDate as date, endDate as date) as number => 
		        let 
		            endDateAdj= Date.AddDays(endDate,1) ,
		            periodsBetween = Date.Year(endDateAdj)*12 + Date.Month(endDateAdj) - Date.Year(startDate)*12 - Date.Month(startDate) ,
		            daysBetween = Date.Day(endDateAdj) - Date.Day(startDate),
		            result= periodsBetween + (daysBetween / 30)
		        in 
		            result
		in
		   fncPeriodsBetween
		```
	lineageTag: 75ed47f1-4fd7-4dd6-b290-7a70e647f8b3
	queryGroup: 'Parameters and Functions\Functions'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression fctImproveColumnNames = ```
		let
		    Source = (camelText) => 
		    let
		        
		        charactersWithleadingSpace =  List.Union({{"A".."Z"},{"0".."9"}}),
		        spaceCharPostions = Text.PositionOfAny(camelText, charactersWithleadingSpace, Occurrence.All),
		        //several consecutiv upper case letters are usually an Abbreviation (LCY, ID ect.) there should only be a space for the first Letter 
		        
		        treadAbbr = List.Select(
		                      List.Transform(spaceCharPostions,each if List.Contains(spaceCharPostions,_-1) then -1 else _ ),
		                      each _<>-1),
		        spaceCharPostionsFinal = List.Sort(treadAbbr,Order.Descending),
		        capitalizeFirstLetter = Text.Upper(Text.Start(camelText,1)) & Text.Middle(camelText,1),
		        converted = List.Accumulate(spaceCharPostionsFinal,capitalizeFirstLetter,(state, current) => Text.Insert(state, current, " ")  ),
		        replaceNoSuffix = if Text.EndsWith(converted," No") then converted & "." else converted,
		//the function should only be applied if org text is CamelCase
		        result = if Text.PositionOf(camelText," ") = -1 then replaceNoSuffix else camelText
		    in
		        result
		in
		    Source
		```
	lineageTag: 1c90c1d9-db99-4f37-99ed-035046190764
	queryGroup: 'Parameters and Functions\Functions'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression SourceContractAnalysisEntries = ```
		let
		  Source = BCConnectionSubscriptionBilling,
		  TableData = Source{[Name = "contractAnalysisEntries", Signature = "table"]}[Data],
		    #"Date Filter" = Table.SelectRows(TableData, each [analysisDate] >= MinReportingDate), 
		  #"Subscription Package Key" = Table.AddColumn(
		    #"Date Filter", 
		    "Subscription Package Key", 
		    each Text.Combine({[serviceObjectNo], [packageCode]}, "-"), 
		    type text
		  ), 
		  #"Renamed Columns" = Table.RenameColumns(
		    #"Subscription Package Key", 
		    {{"monthlyRecurrRevenueLCY", "monthlyRecurringRevenueLCY"}}
		  )
		in
		  #"Renamed Columns"
		```
	lineageTag: e417c1bb-7070-4669-ae5b-453842615608
	queryGroup: 'Parameters and Functions\Contract Analysis Entries Base'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression ContractLineBase = ```
		let
		  Source = SourceContractAnalysisEntries,
		    //the colummn serviceObjectItemNo is depricated
		    #"Changed Type" = Table.TransformColumnTypes(Source,{{"serviceObjectSourceType", type text}}),
		    #"Added Custom" = Table.AddColumn(#"Changed Type", "Item No.", each if [serviceObjectSourceType] = "Item" then [serviceObjectSourceNo] else null, type text), 
		  ReplaceEmptyDates = Table.ReplaceValue(
		    #"Added Custom", 
		    #date(1, 1, 1), 
		    null, 
		    Replacer.ReplaceValue, 
		    {
		      "serviceEndDate", 
		      "nextBillingDate", 
		      "termUntil", 
		      "cancellationPossibleUntil", 
		      "currencyFactorDate"
		    }
		  ), 
		  #"Added Contract Line Key" = Table.AddColumn(
		    ReplaceEmptyDates, 
		    "Contract Line Key", 
		    each [contractNo]
		      & "-"
		      & Number.ToText([contractLineNo])
		      & "-"
		      & Date.ToText([analysisDate], "yyMMdd"), 
		    type text
		  ), 
		  #"Added Line Active" = Table.AddColumn(
		    #"Added Contract Line Key", 
		    "Line Active", 
		    each [serviceStartDate]
		      <= [analysisDate]
		      and ([serviceEndDate] = null or [serviceEndDate] >= [analysisDate]), 
		    type logical
		  ), 
		  #"Added Duration Start" = Table.AddColumn(
		    #"Added Line Active", 
		    "Duration Start Date", 
		    each 
		      if [serviceStartDate]
		        <= Date.StartOfMonth(
		          [analysisDate]
		        ) //the current month should be considered fully for TVC and ARR even if analysis date is not on the first of month
		      then
		        Date.StartOfMonth([analysisDate])
		      else
		        [serviceStartDate], 
		    type date
		  ), 
		  #"Added remainingTermEnd" = Table.AddColumn(
		    #"Added Duration Start", 
		    "Remaining Term End", 
		    each if [serviceEndDate] <> null then [serviceEndDate] else [termUntil], 
		    type date
		  ), 
		  #"Added Remaining Term Months" = Table.AddColumn(
		    #"Added remainingTermEnd", 
		    "Remaining Term Months", 
		    each 
		      if ([#"Remaining Term End"] is null) then
		        999
		      else if [#"Remaining Term End"] < [#"Duration Start Date"] then
		        - 1
		      else
		        Number.RoundDown(fncPeriodsBetween([#"Duration Start Date"], [#"Remaining Term End"])), 
		    Int32.Type
		  ), 
		  #"Added Remaining Term" = Table.AddColumn(
		    #"Added Remaining Term Months", 
		    "Remaining Term", 
		    each 
		      if [Remaining Term Months] = 999 then
		        "No End"
		      else if [Remaining Term Months] = - 1 then
		        "Ended"
		      else if [Remaining Term Months] = 0 then
		        "<1 M"
		      else if [Remaining Term Months] = 1 then
		        "1 M"
		      else
		        Number.ToText([Remaining Term Months]) & " M", 
		    type text
		  ), 
		  #"Added ForecastUntil" = Table.AddColumn(
		    #"Added Remaining Term", 
		    "Forecast Until", 
		    each 
		      if [serviceEndDate] <> null then
		        Date.AddMonths(Date.AddDays([serviceEndDate], 1), - 1)
		      else
		        MaxForecastDate, 
		    type date
		  ), 
		  #"Added Billling Rhythm Months" = Table.AddColumn(
		    #"Added ForecastUntil", 
		    "Billing Rhythm Months", 
		    each 
		      let
		        periodType = Text.End([billingRhythm], 1), 
		        NoOfPeriods = Number.FromText(Text.Start([billingRhythm], Text.Length([billingRhythm]) - 1)), 
		        NoOfNonth = 
		          if periodType = "Y" then
		            NoOfPeriods * 12
		          else if periodType = "Q" then
		            NoOfPeriods * 3
		          else if periodType = "M" then
		            NoOfPeriods
		          else if periodType = "W" then
		            Number.RoundUp(NoOfPeriods / 7 * 30)
		          else
		            NoOfPeriods
		      in
		        NoOfPeriods, 
		    Int16.Type
		  ),
		    CleansSourceType = Table.ReplaceValue(#"Added Billling Rhythm Months","G_x002F_L_x0020_Account","G/L Account",Replacer.ReplaceText,{"serviceObjectSourceType"})
		in
		    CleansSourceType
		```
	lineageTag: 9ea82b8a-e0bb-4576-947e-0a3f57ca4113
	queryGroup: 'Parameters and Functions\Contract Analysis Entries Base'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Exception

expression API_ENDPOINT_SUBSCR_BILLING = "microsoft/subsBilling/v1.0" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: 552e550a-53c0-4c25-848b-daf684594e00
	queryGroup: 'Parameters and Functions\Connection Parameters'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Text

expression COMPANY = "PBI Demo US" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: e10f9ee9-59dd-48a2-9ac9-80866bcf123e
	queryGroup: 'Parameters and Functions\Connection Parameters'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Text

expression BCConnectionSubscriptionBilling =
		let
		
		    Source = Dynamics365BusinessCentral.ApiContentsWithOptions(ENVIRONMENT, COMPANY,API_ENDPOINT_SUBSCR_BILLING, [])
		in
		    Source
	lineageTag: 7f64365a-5be9-4b80-bbb1-ebdde9f03063
	queryGroup: 'Parameters and Functions\Connection Parameters'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression ConvertUTC =
		let
		    Source = (dateTableSetup as table) =>
		        let
		            #"Added UTC Now" = Table.AddColumn(dateTableSetup, "UTC Now", each DateTimeZone.UtcNow()),
		            #"Extract UTC Value" = Table.AddColumn(
		                #"Added UTC Now", "Extract UTC", each Text.BetweenDelimiters([timeZoneDisplayName], "(", ")")
		            ),
		            #"Remove UTC prefix" = Table.AddColumn(
		                #"Extract UTC Value", "Remove UTC prefix", each Text.AfterDelimiter([Extract UTC], "UTC")
		            ),
		            #"Replace Colon" = Table.AddColumn(
		                #"Remove UTC prefix", "Offset", each Replacer.ReplaceText([Remove UTC prefix], ":", ".")
		            ),
		            #"Changed Type1" = Table.TransformColumnTypes(#"Replace Colon", {{"Offset", type number}},"en-us"),
		            #"Switch Zone" = Table.AddColumn(
		                #"Changed Type1",
		                "UTC Offset",
		                each if [Offset] = null then [UTC Now] else DateTimeZone.SwitchZone([UTC Now], [Offset])
		            ),
		            #"Set Date" = Table.AddColumn(
		                #"Switch Zone", "Today", each Date.From(DateTimeZone.RemoveZone([UTC Offset])), type date
		            ),
		            #"Set Last Refresh Time" = Table.AddColumn(
		                #"Set Date", "Last Refresh Time", each Time.From(DateTimeZone.RemoveZone([UTC Offset])), type time
		            ),
		            #"Remove unnecessary" = Table.RemoveColumns(
		                #"Set Last Refresh Time", {"UTC Now", "Extract UTC", "Remove UTC prefix", "Offset", "UTC Offset"}
		            )
		        in
		            #"Remove unnecessary"
		in
		    Source
	lineageTag: 827bbd60-43e6-4563-9311-cba3db9ea7ea
	queryGroup: 'Parameters and Functions\Functions'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

