table 'Date Ref'
	isHidden
	lineageTag: a448829e-81fc-4742-9d00-2851f6d56728

	column Date
		formatString: Short Date
		lineageTag: f51512e0-61db-4c90-94ba-80e8f89242a4
		summarizeBy: none
		isNameInferred
		sourceColumn: [Date]

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column DateKey
		formatString: 0
		lineageTag: 476a5dca-2abe-4c01-a947-d46c24c41cdc
		summarizeBy: count
		isNameInferred
		sourceColumn: [DateKey]

		annotation SummarizationSetBy = Automatic

	column 'Day of Month'
		formatString: 0
		lineageTag: e4dfcf9c-5585-4f4e-9568-9aacf680523a
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Day of Month]

		annotation SummarizationSetBy = Automatic

	column WeekDayNumber
		formatString: 0
		lineageTag: 71055f6c-678a-4512-b92f-5ac940df30f1
		summarizeBy: sum
		isNameInferred
		sourceColumn: [WeekDayNumber]

		annotation SummarizationSetBy = Automatic

	column 'Week Day'
		lineageTag: 2b97387c-10dd-4781-baa8-c894b39728e0
		summarizeBy: none
		isNameInferred
		sourceColumn: [Week Day]

		annotation SummarizationSetBy = Automatic

	column Sequential365DayNumber
		formatString: 0
		lineageTag: 1c0826a8-29d4-4092-a15b-d4cbbd862c29
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Sequential365DayNumber]

		annotation SummarizationSetBy = Automatic

	column 'Relative Day'
		formatString: 0
		lineageTag: 9d1766ff-e491-4cbc-99eb-16379fd63bef
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Relative Day]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearNumber'
		formatString: 0
		lineageTag: 4a7ec436-94c0-4ffb-9268-5a4636438d02
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Year'
		lineageTag: 9ae4417d-d622-4c4f-9b7f-de36cf2d199d
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Year]

		annotation SummarizationSetBy = Automatic

	column 'Calendar QuarterNumber'
		lineageTag: 65a5cefe-0372-4286-8e4a-a0817d5a983c
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar QuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar Quarter'
		lineageTag: 78682da8-8cb1-4435-8dc2-8681555179e7
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Quarter]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearQuarterNumber'
		lineageTag: 67da76eb-fadb-4b3e-826f-e0d7f9b5cb3f
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearQuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar Quarter Year'
		lineageTag: e88c3d1e-b736-419c-98f8-ff46e911af4f
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Quarter Year]

		annotation SummarizationSetBy = Automatic

	column 'Calendar MonthNumber'
		formatString: 0
		lineageTag: 811b1cb3-2d74-4962-9ef5-3cd62d86cc0a
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar MonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Month'
		lineageTag: a0cba35c-6896-40da-9e7c-3dc8dacaa9d0
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Month]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearMonthNumber'
		formatString: 0
		lineageTag: 8e99b87d-a228-44b4-b9a1-98d6215e0598
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Month Year'
		lineageTag: e8aa0d15-65eb-4cd5-88c0-cdd3ddd7ae9e
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Month Year]

		annotation SummarizationSetBy = Automatic

	column 'Calendar WeekNumber'
		formatString: 0
		lineageTag: 7021a37d-f204-4b26-85ac-32d4a26561fc
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar WeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Week'
		lineageTag: 3053e6d6-158c-4a8c-a695-ef49f6fcdc22
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Week]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearWeekNumber'
		formatString: 0
		lineageTag: 256b4997-f796-443c-83fe-b9395b90e6f2
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearWeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Week Year'
		lineageTag: fd2d3ef0-e97e-4a7c-8e77-ae447fc439d1
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Week Year]

		annotation SummarizationSetBy = Automatic

	column 'Calendar WeekYearOrder'
		formatString: 0
		lineageTag: 01a4a700-a597-4f30-af80-c27a3966cd13
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar WeekYearOrder]

		annotation SummarizationSetBy = Automatic

	column 'Calendar RelativeWeekPos'
		lineageTag: 4ed55a4e-3962-4cb3-b32f-09ed55d099a9
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar RelativeWeekPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar RelativeMonthPos'
		lineageTag: 9331e8ff-6204-4f31-a640-dd7290ffa157
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar RelativeMonthPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar RelativeQuarterPos'
		lineageTag: a14d9e4a-f31f-4392-a3a5-8776ce5d0085
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar RelativeQuarterPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar RelativeYearPos'
		lineageTag: edde8a25-04d8-4232-bef9-8f0deeacff12
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar RelativeYearPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar StartOfMonth'
		formatString: Short Date
		lineageTag: 4f70b6e1-0b4d-4b0d-9430-2c9c83b02ede
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar StartOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'Calendar EndOfMonth'
		formatString: Short Date
		lineageTag: 18f494b7-4e93-4ea4-b0be-4acd1a15ab4f
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar EndOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'Calendar StartOfQuarter'
		formatString: Short Date
		lineageTag: eadd245e-0c50-4c26-a8b6-ed445903e345
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar StartOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Calendar EndOfQuarter'
		formatString: Short Date
		lineageTag: 2c16125a-2838-4897-99e5-c322ae399c88
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar EndOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Calendar StartOfYear'
		formatString: Short Date
		lineageTag: e28485ec-ef04-40c3-af0e-7a5e6ae345a8
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar StartOfYear]

		annotation SummarizationSetBy = Automatic

	column 'Calendar EndOfYear'
		formatString: Short Date
		lineageTag: 2c6b33fc-b83e-4846-8157-7d9c74e1c7f6
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar EndOfYear]

		annotation SummarizationSetBy = Automatic

	column 'Calendar MonthDays'
		formatString: 0
		lineageTag: 0e551f55-0bb8-4366-8de3-15183e8b4ebf
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar MonthDays]

		annotation SummarizationSetBy = Automatic

	column 'Calendar QuarterDays'
		formatString: 0
		lineageTag: 087d338a-ea05-4e99-aa22-2935f301dcd8
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar QuarterDays]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearDays'
		formatString: 0
		lineageTag: 15f3c19b-a496-4936-a2f7-799d45d61bb3
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearDays]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DayOfMonthNumber'
		formatString: 0
		lineageTag: 201d0a9d-a550-4e38-8ac4-002501b41508
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar DayOfMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DayOfQuarterNumber'
		formatString: 0
		lineageTag: bfa862b3-8952-4ff3-8af3-c47d8add0d80
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar DayOfQuarterNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DayOfYearNumber'
		formatString: 0
		lineageTag: c2811ec8-736d-4547-9a0c-aac262976b2d
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar DayOfYearNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DatePreviousWeek'
		formatString: Short Date
		lineageTag: 1bca0888-5895-44e3-b947-4b1ef77e5256
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar DatePreviousWeek]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DatePreviousMonth'
		formatString: Short Date
		lineageTag: f07ed35e-917f-42d7-9f60-c72d09d83f2b
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar DatePreviousMonth]

		annotation SummarizationSetBy = Date

		annotation UnderlyingDateTimeDataType = Date

	column 'Calendar DatePreviousQuarter'
		formatString: Short Date
		lineageTag: ecae4d00-b0c1-4bb9-8330-323443ef599b
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar DatePreviousQuarter]

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column 'Calendar DatePreviousYear'
		formatString: Short Date
		lineageTag: 9a6dfb21-424e-46ae-af9b-403f1fc07126
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar DatePreviousYear]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Year'
		lineageTag: 200c548d-a039-4b08-ba80-764c6c54f9fe
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Year]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearNumber'
		formatString: 0
		lineageTag: 650ee2b9-1f70-4d79-9979-d114abe50811
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal QuarterNumber'
		lineageTag: 710105fd-ab02-4284-bf9c-da63ffebc910
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal QuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal Quarter'
		lineageTag: 1225c921-49c1-46b6-b2b6-31bb41b8b7bd
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Quarter]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearQuarterNumber'
		lineageTag: 3c154583-31c7-4016-94e7-02bbd2220542
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearQuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal Quarter Year'
		lineageTag: 4e04f5d4-a941-40b1-a265-9172c0531964
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Quarter Year]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal MonthNumber'
		formatString: 0
		lineageTag: f424a58e-3a1f-44e8-a9a0-f24c7d45b919
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal MonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal MonthInQuarterNumber'
		formatString: 0
		lineageTag: d3c442d9-4317-4f7a-9ddd-0e81695c52e7
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal MonthInQuarterNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Month'
		lineageTag: 55a8af55-3e96-4c95-a561-c098e3506881
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Month]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearMonthNumber'
		formatString: 0
		lineageTag: bee490a4-839e-4367-bd6c-7e6bbc32fc59
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Month Year'
		lineageTag: 132ac9b1-4597-403e-b3f7-b2b47f6ddc24
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Month Year]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal WeekNumber'
		formatString: 0
		lineageTag: 6cdbe826-4bbb-4129-be2c-56aba8c3c68f
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal WeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Week'
		lineageTag: 8f6fd0bf-6250-47df-8fe2-5f107779826c
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Week]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearWeekNumber'
		formatString: 0
		lineageTag: d840e6a2-7a76-4416-80aa-1053ecf34ab5
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearWeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Week Year'
		lineageTag: 2f0a3a2a-f480-4ef6-b455-67f828aae0bc
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Week Year]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal WeekYearOrder'
		formatString: 0
		lineageTag: f11b66fa-7be4-4872-8a10-26dafd374288
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal WeekYearOrder]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal RelativeWeekPos'
		lineageTag: afec27d7-5b22-4afc-9832-983428bce46a
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal RelativeWeekPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal RelativeMonthPos'
		lineageTag: 11047f51-2cf5-44bb-a378-7961d41188c5
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal RelativeMonthPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal RelativeQuarterPos'
		lineageTag: b66d8a79-0109-479f-8157-8b7798304b7a
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal RelativeQuarterPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal RelativeYearPos'
		lineageTag: a125442a-28c6-4510-8707-e9ee73fd3607
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal RelativeYearPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal StartOfMonth'
		formatString: Short Date
		lineageTag: 45d602ef-a7fe-47a7-86cc-f96fdeced679
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal StartOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal EndOfMonth'
		formatString: Short Date
		lineageTag: 17a0deb7-0d6b-4afb-9798-bd80c1bb6423
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal EndOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal StartOfQuarter'
		formatString: Short Date
		lineageTag: ff95e120-27c5-47e7-829d-973f0ef43860
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal StartOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal EndOfQuarter'
		formatString: Short Date
		lineageTag: 45be67a7-af5f-4b7d-888d-df414deccd76
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal EndOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal StartOfYear'
		formatString: Short Date
		lineageTag: d53502b5-c6b4-4dcd-90c6-6baff8242207
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal StartOfYear]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal EndOfYear'
		formatString: Short Date
		lineageTag: 9b9b0d42-488f-488a-8108-19cdc4109575
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal EndOfYear]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal MonthDays'
		formatString: 0
		lineageTag: 5bc31b64-777a-4ba9-951e-e041b7ce2701
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal MonthDays]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal QuarterDays'
		formatString: 0
		lineageTag: 33381b99-bbab-425f-9e86-2e040e025c09
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal QuarterDays]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearDays'
		formatString: 0
		lineageTag: 144c2342-83ce-4c27-8ebd-fbd9424ccdb9
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearDays]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DayOfMonthNumber'
		formatString: 0
		lineageTag: f663080a-f0e5-4544-980a-c26bfa918ac7
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal DayOfMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DayOfQuarterNumber'
		formatString: 0
		lineageTag: 9e11b9b2-385a-4d97-bb32-f935f3855b8b
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal DayOfQuarterNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DayOfYearNumber'
		formatString: 0
		lineageTag: 4c46c841-995c-487f-8082-30655e383684
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal DayOfYearNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DatePreviousWeek'
		formatString: Short Date
		lineageTag: f7aa1828-ae4a-4a1b-8692-45ac14a12101
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal DatePreviousWeek]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DatePreviousMonth'
		formatString: Short Date
		lineageTag: 2253c079-01c8-41c0-9fa6-cd2676d22fe3
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal DatePreviousMonth]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DatePreviousQuarter'
		formatString: Short Date
		lineageTag: 59e9687b-83d9-4394-a0c6-05e174031c10
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal DatePreviousQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DatePreviousYear'
		formatString: Short Date
		lineageTag: 33d7638f-9054-4439-8444-1dfa3186a687
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal DatePreviousYear]

		annotation SummarizationSetBy = Automatic

	column 'FW YearNumber'
		formatString: 0
		lineageTag: 1627a64c-54ad-4797-80a4-19d7bd5ec8f5
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW Year'
		lineageTag: ecdbd277-bd92-44d5-99da-38e9c48d7709
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Year]

		annotation SummarizationSetBy = Automatic

	column 'FW QuarterNumber'
		lineageTag: d2397b5d-728e-4e38-94d8-37e41eee24f6
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW QuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Quarter'
		lineageTag: bf490de4-b08b-4e8e-a241-b54fbd6f99c6
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Quarter]

		annotation SummarizationSetBy = Automatic

	column 'FW YearQuarterNumber'
		lineageTag: 84464053-9264-4618-b079-3bf82d211791
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearQuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Quarter Year'
		lineageTag: adc58cf1-d811-487c-863e-52588a19f44f
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Quarter Year]

		annotation SummarizationSetBy = Automatic

	column 'FW MonthNumber'
		lineageTag: e277a15e-8faf-408c-b80c-47686846b6e8
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW MonthNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Month'
		lineageTag: 896345aa-ae83-44cb-ac87-8111bb7cf4ad
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Month]

		annotation SummarizationSetBy = Automatic

	column 'FW YearMonthNumber'
		lineageTag: 554b1750-eab6-4386-b0aa-800e79f809e5
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearMonthNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Month Year'
		lineageTag: 037f3182-109c-4a37-a3f3-8a458db1202e
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Month Year]

		annotation SummarizationSetBy = Automatic

	column 'FW WeekNumber'
		formatString: 0
		lineageTag: 2a86822a-fe1c-4ad8-99bb-dfcf7473e013
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW WeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW Week'
		lineageTag: 06db6673-409a-4d9b-8d6c-3ab554157579
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Week]

		annotation SummarizationSetBy = Automatic

	column 'FW PeriodNumber'
		lineageTag: e51a1586-d035-4e36-acd2-d3246cd75a06
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW PeriodNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Period'
		lineageTag: eb4dd101-a95f-491e-b219-cafb8849a0cb
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Period]

		annotation SummarizationSetBy = Automatic

	column 'FW YearWeekNumber'
		formatString: 0
		lineageTag: 045e1ea9-1e71-44e8-ad6a-106ac210bae3
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearWeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW Week Year'
		lineageTag: 08cd1235-3375-4301-8364-19e71f94dabd
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Week Year]

		annotation SummarizationSetBy = Automatic

	column 'FW StartOfWeek'
		formatString: Short Date
		lineageTag: 6e231bf9-bb88-4ab3-8a52-300ac16ebcb6
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW StartOfWeek]

		annotation SummarizationSetBy = Automatic

	column 'FW EndOfWeek'
		formatString: Short Date
		lineageTag: b0d226b1-b50b-49e3-b770-c29fe3c27924
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW EndOfWeek]

		annotation SummarizationSetBy = Automatic

	column 'FW RelativeWeekPos'
		lineageTag: bb9eddb1-db8d-4aa2-a6ff-5dee37a0036c
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW RelativeWeekPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW RelativeMonthPos'
		lineageTag: a2e1492a-5c9e-4ab5-9416-aaab9dae3cd5
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW RelativeMonthPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW RelativeQuarterPos'
		lineageTag: 86794f4d-9e1a-40f8-a6f3-2211e3e61616
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW RelativeQuarterPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW RelativeYearPos'
		lineageTag: 178642c3-c269-439f-b609-59abed254850
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW RelativeYearPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW StartOfMonth'
		formatString: Short Date
		lineageTag: 08e2e876-a317-4bf6-af26-a7e438308224
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW StartOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'FW EndOfMonth'
		formatString: Short Date
		lineageTag: 0fa8660b-f8f7-460c-b378-99338f8c2818
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW EndOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'FW StartOfQuarter'
		formatString: Short Date
		lineageTag: da6be814-f731-4d8e-9bbd-04bec8157ec1
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW StartOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'FW EndOfQuarter'
		formatString: Short Date
		lineageTag: 645b07fb-43fd-4058-9a47-3ba513fb1173
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW EndOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'FW StartOfYear'
		formatString: Short Date
		lineageTag: 70e906b2-7d35-4e71-ab0b-88efb719b33f
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW StartOfYear]

		annotation SummarizationSetBy = Automatic

	column 'FW EndOfYear'
		formatString: Short Date
		lineageTag: 579f64f3-bedb-458f-9a6a-f08b58a0f728
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW EndOfYear]

		annotation SummarizationSetBy = Automatic

	column 'FW MonthDays'
		formatString: 0
		lineageTag: b7efcce6-4a49-4cd9-9368-e02f471f3cc7
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW MonthDays]

		annotation SummarizationSetBy = Automatic

	column 'FW QuarterDays'
		formatString: 0
		lineageTag: 40f7ab16-65b7-4839-af61-108edd615ad6
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW QuarterDays]

		annotation SummarizationSetBy = Automatic

	column 'FW YearDays'
		formatString: 0
		lineageTag: e0583b05-87e1-41f6-a0e4-bd62d7c4069a
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearDays]

		annotation SummarizationSetBy = Automatic

	column 'FW DayOfMonthNumber'
		formatString: 0
		lineageTag: 456f189c-908d-477a-b12a-2a9d2a85868d
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW DayOfMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW DayOfQuarterNumber'
		formatString: 0
		lineageTag: 8ca0eb34-396a-4420-a979-2729f061645e
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW DayOfQuarterNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW DayOfYearNumber'
		formatString: 0
		lineageTag: eca7d701-867e-4530-90df-49d04d40a45e
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW DayOfYearNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW DatePreviousWeek'
		formatString: Short Date
		lineageTag: 41466bb7-7c50-4a55-ac1a-ebfcde5dc3c6
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW DatePreviousWeek]

		annotation SummarizationSetBy = Automatic

	column 'FW DatePreviousMonth'
		formatString: Short Date
		lineageTag: bbf3a963-ada4-4edd-9b85-ed6d3c416509
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW DatePreviousMonth]

		annotation SummarizationSetBy = Automatic

	column 'FW DatePreviousQuarter'
		formatString: Short Date
		lineageTag: e3f9a3fe-b733-4e05-b2de-bfead98ccefe
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW DatePreviousQuarter]

		annotation SummarizationSetBy = Automatic

	column 'FW DatePreviousYear'
		formatString: Short Date
		lineageTag: 20d4279e-3469-4ba4-859a-7c89d51ea29e
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW DatePreviousYear]

		annotation SummarizationSetBy = Automatic

	column 'Holiday Name'
		lineageTag: 16e096cf-953b-4377-8e96-1f441c357c76
		summarizeBy: none
		isNameInferred
		sourceColumn: [Holiday Name]

		annotation SummarizationSetBy = Automatic

	column IsWorkingDay
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 53ec75b7-a23e-4036-8f9a-548c3f6e0d57
		summarizeBy: none
		isNameInferred
		sourceColumn: [IsWorkingDay]

		annotation SummarizationSetBy = Automatic

	column 'Day Type'
		lineageTag: c321f938-963b-44f5-9ecd-a947313dd5d1
		summarizeBy: none
		isNameInferred
		sourceColumn: [Day Type]

		annotation SummarizationSetBy = Automatic

	partition 'Date Ref' = calculated
		mode: import
		source = ```
				
				------------------------------------------------------------
				--
				-- Configuration
				--
				------------------------------------------------------------
				VAR TodayReference = VALUES('Date Table Setup'[Today]) -- Change this if you need to use another date as a reference "current" day
				
				// Based on the first and last dates in the main fact table
				VAR FirstYear = YEAR(VALUES('Date Table Setup'[dateTblStart]))
				VAR LastYear = YEAR(VALUES('Date Table Setup'[dateTblEnd]))
				
				// For Fiscal 52-53 weeks (start depends on rules) and Gregorian (starts on the first of the month) 
				VAR FiscalCalendarFirstMonth = VALUES('Date Table Setup'[fiscalCalendarFirstMonth])
				
				// Use: 0 - Sunday, 1 - Monday, 2 - Tuesday, ... 5 - Friday, 6 - Saturday
				VAR FirstDayOfWeek = VALUES('Date Table Setup'[First Day of Week]) 
				
				VAR TypeStartFiscalYear = 1 -- Fiscal year as Calendar Year of : 0 - First day of fiscal year, 1 - Last day of fiscal year
				
				VAR IsoCountryHolidays = VALUES('Date Table Setup'[isoCountryHolidays]) -- Use only supported ISO countries or "" for no holidays
				
				VAR WeeklyType = COALESCE(VALUES('Date Table Setup'[weeklyType]), "Nearest") -- Supports only "Nearest", or "Last"
				
				VAR QuarterWeekType = COALESCE(VALUES('Date Table Setup'[quarterWeekType]),"445") -- Supports only "445", "454", and "544"
				
				VAR CalendarRange = VALUES('Date Table Setup'[calendarRange]) -- Supports "Calendar", "FiscalGregorian", "FiscalWeekly"
				-- Last:    for last weekday of the month at fiscal year end
				-- Nearest: for last weekday nearest the end of month 
				-- Reference for Last/Nearest definition: https://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar)
				--
				-- For ISO calendar use 
				--   FiscalCalendarFirstMonth = 1 (ISO always starts in January)
				--   FirstDayOfWeek = 1           (ISO always starts on Monday)
				--   WeeklyType = "Nearest"       (ISO use the nearest week type algorithm)
				-- For US with last Saturday of the month at fiscal year end
				--   FirstDayOfWeek = 0           (US weeks start on Sunday)
				--   WeeklyType = "Last"
				-- For US with last Saturday nearest the end of month
				--   FirstDayOfWeek = 0           (US weeks start on Sunday)
				--   WeeklyType = "Nearest"
				--
				------------------------------
				VAR CalendarGregorianPrefix = VALUES('Date Table Setup'[calendarPrefix]) -- Prefix used in columns of standard Gregorian calendar
				VAR FiscalGregorianPrefix = VALUES('Date Table Setup'[fiscalGregorianPrefix]) -- Prefix used in columns of fiscal Gregorian calendar
				VAR FiscalWeeklyPrefix = VALUES('Date Table Setup'[fiscalWeeklyPrefix]) -- Prefix used in columns of fiscal weekly calendar
				VAR WorkingDayType = "Working day" -- Description for working days
				VAR NonWorkingDayType = "Non-working day" -- Description for non-working days
				------------------------------
				VAR WeeklyCalendarType = "Weekly" -- Supports "Weekly", "Custom"
				-- Set the working days - 0 = Sunday, 1 = Monday, ... 6 = Saturday
				VAR WorkingDays = VALUES('Working Days')
				
				
				-- Use CustomFiscalPeriods in case you need arbitrary definition of weekly fiscal years 
				-- Set "UseCustomFiscalPeriods" to TRUE in order to use CustomFiscalPeriods 
				VAR UseCustomFiscalPeriods = FALSE
				-- Set "IgnoreWeeklyFiscalPeriods" to TRUE in order to ignore the WeeklyFiscalPeriods
				-- You should set IgnoreWeeklyFiscalPeriods to TRUE only when UseCustomFiscalPeriods is TRUE, too
				VAR IgnoreWeeklyFiscalPeriods = FALSE
				-- Include here your own definition of custom fiscal periods
				VAR CustomFiscalPeriods =
				    FILTER ( 
				        DATATABLE (
				            "Fiscal YearNumber", INTEGER,
				            "FirstDayOfYear", DATETIME,
				            "LastDayOfYear", DATETIME,
				            {
				                -- IMPORTANT!!! The first day of each year must be a weekday corresponding to the definition of FirstDayOfWeek
				                --              If you want to use this table, remember to set the UseCustomFiscalPeriods variable to TRUE
				                --              If the IgnoreWeeklyFiscalPeriods is TRUE, there are no warnings in case the FirstDayOfWeek 
				                --              does not match the first day of the year 
				                { 2016, "2015-06-28", "2016-07-02" },
				                { 2017, "2016-07-03", "2017-07-01" },
				                { 2018, "2017-07-02", "2018-06-30" },
				                { 2019, "2018-07-01", "2019-06-29" }
				            }
				        ),
				        UseCustomFiscalPeriods
				    )
				
				------------------------------------------------------------
				--  
				-- End of General Configuration
				--
				------------------------------------------------------------
				--  
				-- The following variables define specific parameters 
				-- for calendars - you should modify them only to 
				-- change configuration of specific countries, translate 
				-- names of holidays, or to add configuration for other 
				-- countries
				--
				------------------------------------------------------------
				VAR InLieuOf_prefix = "(in lieu of " -- prefix of substitute holidays
				VAR InLieuOf_suffix = ")" -- suffix of substitute holidays
				VAR HolidayParameters =
				    DATATABLE (
				        "ISO Country", STRING,
				        -- ISO country code (to enable filter based on country)
				        "MonthNumber", INTEGER,
				        -- Number of month - use 99 for relative dates using Easter as a reference
				        "DayNumber", INTEGER,
				        -- Absolute day (ignore WeekDayNumber, otherwise use 0)
				        "WeekDayNumber", INTEGER,
				        -- 0 = Sunday, 1 = Monday, ... , 7 = Saturday
				        "OffsetWeek", INTEGER,
				        -- 1 = first, 2 = second, ... -1 = last, -2 = second-last, ...
				        "OffsetDays", INTEGER,
				        -- days to add after offsetWeek and WeekDayNumber have been applied
				        "HolidayName", STRING,
				        -- Holiday name 
				        "SubstituteHoliday", INTEGER,
				        -- 0 = no substituteHoliday, 1 = substitute holiday with next working day, 2 = substitute holiday with next working day 
				        -- (use 2 before 1 only, e.g. Christmas = 2, Boxing Day = 1)
				        -- -1 = if it falls on a Saturday then it is observed on Friday, if it falls on a Sunday then it is observed on Monday
				        "ConflictPriority", INTEGER,
				        -- Priority in case of two or more holidays in the same date - lower number --> higher priority
				        -- For example: marking Easter relative days with 150 and other holidays with 100 means that other holidays take 
				        --              precedence over Easter-related days; use 50 for Easter related holidays to invert such a priority
				        "FirstYear", INTEGER,
				        -- First year for the holiday, 0 if it is not defined
				        "LastYear", INTEGER,
				        -- Last year for the holiday, 0 if it is not defined
				        {
				            --
				            -- US = United States
				            { "US", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "US", 1, 0, 1, 3, 0, "Martin Luther King, Jr.", 0, 100, 0, 0 },
				            { "US", 2, 0, 1, 3, 0, "Presidents' Day", 0, 100, 0, 0 },
				            // aka Washington's Birthday
				            { "US", 5, 0, 1, -1, 0, "Memorial Day", 0, 100, 0, 0 },
				            { "US", 6, 19, 0, 0, 0, "Juneteenth", -1, 100, 2021, 0 },
				            { "US", 7, 4, 0, 0, 0, "Independence Day", 0, 100, 0, 0 },
				            { "US", 9, 0, 1, 1, 0, "Labor Day", 0, 100, 0, 0 },
				            { "US", 10, 0, 1, 2, 0, "Columbus Day", 0, 100, 0, 0 },
				            { "US", 11, 11, 0, 0, 0, "Veterans Day", 0, 100, 0, 0 },
				            { "US", 11, 0, 4, 4, 0, "Thanksgiving Day", 0, 100, 0, 0 },
				            { "US", 11, 0, 4, 4, 1, "Black Friday", 0, 100, 0, 0 },
				            { "US", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            -- 
				            -- The following countries are in alphabetical order (by ISO Code)
				            --
				            
				            --
				            -- AT = Austria
				            { "AT", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "AT", 1, 6, 0, 0, 0, "Epiphany", 0, 100, 0, 0 },
				            { "AT", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "AT", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "AT", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "AT", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "AT", 99, 60, 0, 0, 0, "Corpus Christi", 0, 50, 0, 0 },
				            { "AT", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "AT", 10, 26, 0, 0, 0, "National Day", 0, 100, 0, 0 },
				            { "AT", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "AT", 12, 8, 0, 0, 0, "Immaculate Conception Day", 0, 100, 0, 0 },
				            { "AT", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "AT", 12, 26, 0, 0, 0, "St. Stephen's Day", 0, 100, 0, 0 },
				            --
				            -- AU = Australia
				            { "AU", 1, 1, 0, 0, 0, "New Year's Day", 1, 100, 0, 0 },
				            { "AU", 1, 26, 0, 0, 0, "Australia Day", 1, 100, 0, 0 },
				            { "AU", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "AU", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "AU", 4, 25, 0, 0, 0, "Anzac Day", 1, 100, 0, 0 },
				            { "AU", 12, 25, 0, 0, 0, "Christmas Day", 2, 100, 0, 0 },
				            { "AU", 12, 26, 0, 0, 0, "Boxing Day", 1, 100, 0, 0 },
				            --
				            -- BE = Belgium
				            { "BE", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "BE", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "BE", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "BE", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "BE", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "BE", 7, 21, 0, 0, 0, "Belgian National DayDay", 0, 100, 0, 0 },
				            { "BE", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "BE", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "BE", 11, 11, 0, 0, 0, "Armistice Day", 0, 100, 0, 0 },
				            { "BE", 12, 25, 0, 0,0, "Christmas Day", 0, 100, 0, 0 },
				            --
				            -- CA = Canada (include only nationwide and Thanksgiving)
				            { "CA", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "CA", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "CA", 7, 1, 0, 0, 0, "Canada Day", 0, 100, 0, 0 },
				            { "CA", 9, 0, 1, 1, 0, "Labour Day", 0, 100, 0, 0 },
				            { "CA", 10, 0, 1, 2, 0, "Thanksgiving", 0, 100, 0, 0 },
				            { "CA", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            --
				            -- DE = Germany
				            { "DE", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "DE", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "DE", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "DE", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "DE", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "DE", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "DE", 10, 3, 0, 0, 0, "German Unity Day", 0, 100, 0, 0 },
				            { "DE", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "DE", 12, 26, 0, 0, 0, "St. Stephen's Day", 0, 100, 0, 0 },
				            --
				            -- ES = Spain
				            { "ES", 1, 1, 0, 0,0,  "New Year's Day", 0, 100, 0, 0 },
				            { "ES", 1, 6, 0, 0, 0, "Epiphany", 0, 100, 0, 0 },
				            { "ES", 99, -3, 0, 0, 0, "Maundy Thursday", 0, 50, 0, 0 },
				            // Except Catalonia
				            { "ES", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "ES", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            // Belearic Islands, Basque Country, Catalonia, La Rioja, Navarra and Valenciana only
				            { "ES", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "ES", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "ES", 10, 12, 0, 0, 0, "Fiesta Navional de España", 0, 100, 0, 0 },
				            { "ES", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "ES", 12, 6, 0, 0, 0, "Constitution Day", 0, 100, 0, 0 },
				            { "ES", 12, 8, 0, 0, 0, "Immaculate Conception", 0, 100, 0, 0 },
				            { "ES", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            --
				            -- FR = France
				            { "FR", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "FR", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "FR", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "FR", 5, 8, 0, 0, 0, "Victor in Europe Day", 0, 100, 0, 0 },
				            { "FR", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "FR", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "FR", 7, 14, 0, 0, 0, "Bastille Day", 0, 100, 0, 0 },
				            { "FR", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "FR", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "FR", 11, 11, 0, 0, 0, "Armistice Day", 0, 100, 0, 0 },
				            { "FR", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            --
				            -- GB = England (different configuration in Scotland and Northern Ireland)
				            { "GB", 1, 1, 0, 0, 0, "New Year's Day", 1, 100, 0, 0 },
				            { "GB", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "GB", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "GB", 5, 0, 1, 1, 0, "May Day Bank Holiday", 0, 100, 0, 0 },
				            { "GB", 5, 0, 1, -1, 0, "Spring Bank Holiday", 0, 100, 0, 0 },
				            { "GB", 8, 0, 1, -1, 0, "Late Summer Bank Holiday", 0, 100, 0, 0 },
				            { "GB", 12, 25, 0, 0, 0, "Christmas Day", 2, 100, 0, 0 },
				            { "GB", 12, 26, 0, 0, 0, "Boxing Day", 1, 100, 0, 0 },
				            --
				            -- IT = Italy
				            { "IT", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "IT", 1, 6, 0, 0, 0, "Epiphany", 0, 100, 0, 0 },
				            { "IT", 99, 1, 0, 0, 0, "Easter Monday", 0, 100, 0, 0 },
				            { "IT", 4, 25, 0, 0, 0, "Liberation Day", 0, 100, 0, 0 },
				            { "IT", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "IT", 6, 2, 0, 0, 0, "Republic Day", 0, 100, 0, 0 },
				            { "IT", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "IT", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "IT", 12, 8, 0, 0, 0, "Immaculate Conception", 0, 100, 0, 0 },
				            { "IT", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "IT", 12, 26, 0, 0, 0, "St. Stephen's Day", 0, 100, 0, 0 },
				            --
				            -- NL = The Netherlands
				            { "NL", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "NL", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "NL", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "NL", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "NL", 4, 27, 0, 0, 0, "King's Day", 0, 100, 0, 0 },
				            // King's day shifted to Saturday if on a Sunday - not handled in this calendar
				            { "NL", 5, 5, 0, 0, 0, "Liberation Day", 0, 100, 0, 0 },
				            { "NL", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "NL", 12, 26, 0, 0, 0, "St. Stephen's Day", 0, 100, 0, 0 },
				            --
				            -- NO = Norway
				            { "NO", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "NO", 99, -3, 0, 0, 0, "Maundy Thursday", 0, 100, 0, 0 },
				            { "NO", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "NO", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "NO", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "NO", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "NO", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "NO", 5, 17, 0, 0, 0, "Constitution Day", 0, 100, 0, 0 },
				            { "NO", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "NO", 12, 26, 0, 0, 0, "Boxing Day", 0, 100, 0, 0 },
				            -- De facto Holidays in Norway - not official public holidays
				            { "NO", 12, 24, 0, 0, 0, "Christmas Eve", 0, 50, 0, 0 },
				            { "NO", 12, 31, 0, 0, 0, "New Year's Eve", 0, 50, 0, 0 },
				            --
				            -- PT = Portugal
				            { "PT", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "PT", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "PT", 99, 60, 0, 0, 0, "Corpus Christi", 0, 50, 0, 0 },
				            { "PT", 4, 25, 0, 0, 0, "Freedom Day", 0, 100, 0, 0 },
				            { "PT", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "PT", 6, 10, 0, 0, 0, "Portugal Day", 0, 100, 0, 0 },
				            { "PT", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "PT", 10, 5, 0, 0, 0, "Republic Day", 0, 100, 0, 0 },
				            { "PT", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "PT", 12, 1, 0, 0, 0, "Restoration of Independence", 0, 100, 0, 0 },
				            { "PT", 12, 8, 0, 0, 0, "Immaculate Conception", 0, 100, 0, 0 },
				            { "PT", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },            --
				            --
				            -- SE = Sweden
				            { "SE", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "SE", 1, 6, 0, 0, 0, "Epiphany", 0, 100, 0, 0 },
				            { "SE", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "SE", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "SE", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "SE", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "SE", 6, 6, 0, 0, 0, "National Day", 0, 100, 0, 0 },
				            { "SE", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "SE", 12, 26, 0, 0, 0, "Boxing Day", 0, 100, 0, 0 },
				            -- De facto Holidays in Sweden - not official public holidays
				            { "SE", 12, 24, 0, 0, 0, "Christmas Eve", 0, 50, 0, 0 },
				            { "SE", 12, 31, 0, 0, 0, "New Year's Eve", 0, 50, 0, 0 },
				            -- Midsummer Day is a Saturday
				            -- { "SE", 98, 0, 0, 0, "Midsummer Day", 0, 50, 0, 0 },
				            { "SE", 98, -1, 0, 0, 0, "Midsummer Eve", 0, 50, 0, 0 }
				            ------------------------------------------------------------       
				            -- UK --> see GB
				        }
				    )
				VAR HolidayDates_ConfigGeneration =
				    FILTER (
				        HolidayParameters,
				        IF (
				            CONTAINS ( HolidayParameters, [ISO Country], IsoCountryHolidays )
				                || IsoCountryHolidays = "",
				            [ISO Country] = IsoCountryHolidays,
				            ERROR ( "IsoCountryHolidays set to an unsupported country code" )
				        )
				    )
				VAR HolidayDates_GeneratedRawWithDuplicatesUnfiltered =
				    GENERATE (
				        GENERATE (
				            GENERATESERIES ( FirstYear - 1, LastYear + 1, 1 ),
				            HolidayDates_ConfigGeneration
				        ),
				        VAR HolidayYear = [Value]
				        VAR EasterDate =
				            -- Code adapted from original VB version from https://www.assa.org.au/edm 
				            VAR EasterYear = HolidayYear
				            VAR FirstDig =
				                INT ( EasterYear / 100 )
				            VAR Remain19 =
				                MOD ( EasterYear, 19 ) //
				            -- Calculate PFM date
				            VAR temp1 =
				                MOD (
				                    INT ( ( FirstDig - 15 ) / 2 )
				                        + 202
				                        - 11 * Remain19
				                        + SWITCH (
				                            TRUE,
				                            FirstDig IN { 21, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 38 }, -1,
				                            FirstDig IN { 33, 36, 37, 39, 40 }, -2,
				                            0
				                        ),
				                    30
				                )
				            VAR tA =
				                temp1 + 21
				                    + IF ( temp1 = 29 || ( temp1 = 28 && Remain19 > 10 ), -1 ) // 
				            -- Find the next Sunday
				            VAR tB =
				                MOD ( tA - 19, 7 )
				            VAR tCpre =
				                MOD ( 40 - FirstDig, 4 )
				            VAR tC =
				                tCpre
				                    + IF ( tCpre = 3, 1 )
				                    + IF ( tCpre > 1, 1 )
				            VAR temp2 =
				                MOD ( EasterYear, 100 )
				            VAR tD =
				                MOD ( temp2 + INT ( temp2 / 4 ), 7 )
				            VAR tE =
				                MOD ( 20 - tB - tC - tD, 7 )
				                    + 1
				            VAR d = tA + tE //
				            -- Return the date
				            VAR EasterDay =
				                IF ( d > 31, d - 31, d )
				            VAR EasterMonth =
				                IF ( d > 31, 4, 3 )
				            RETURN
				                DATE ( EasterYear, EasterMonth, EasterDay ) //
				        -- End of code adapted from original VB version from https://www.assa.org.au/edm 
				        VAR SwedishMidSummer =
				            -- Compute the Midsummer day in Swedish - it is the Saturday between 20 and 26 June
				            -- This calculation is valid only for years after 1953 
				            -- https://sv.wikipedia.org/wiki/Midsommar_i_Sverige
				            VAR __June20 = 
				                DATE ( HolidayYear, 6, 20 )
				            RETURN
				                DATE ( HolidayYear, 6, 20 + (7 - WEEKDAY ( __June20, 1 ) ) )
				            -- End of SwedishMidSummer calculation
				        VAR HolidayDate =
				            SWITCH (
				                TRUE,
				                [DayNumber] <> 0
				                    && [WeekDayNumber] <> 0, ERROR ( "Wrong configuration in HolidayParameters" ),
				                [DayNumber] <> 0
				                    && [MonthNumber] <= 12, DATE ( HolidayYear, [MonthNumber], [DayNumber] ),
				                [MonthNumber] = 99, -- Easter offset
				                    EasterDate + [DayNumber],
				                [MonthNumber] = 98, -- Swedish Midsummer Day
				                    SwedishMidSummer + [DayNumber],
				                [WeekDayNumber] <> 0,
				                    VAR ReferenceDate =
				                        DATE ( HolidayYear, 1
				                            + MOD ( [MonthNumber] - 1 + IF ( [OffsetWeek] < 0, 1 ), 12 ), 1 )
				                            - IF ( [OffsetWeek] < 0, 1 )
				                    VAR ReferenceWeekDayNumber =
				                        WEEKDAY ( ReferenceDate, 1 ) - 1
				                    VAR Offset =
				                        [WeekDayNumber] - ReferenceWeekDayNumber
				                            + 7 * [OffsetWeek]
				                            + IF (
				                                [OffsetWeek] > 0,
				                                IF ( [WeekDayNumber] >= ReferenceWeekDayNumber, - 7 ),
				                                IF ( ReferenceWeekDayNumber >= [WeekDayNumber], 7 )
				                            )
				                RETURN
				                    ReferenceDate + Offset + [OffsetDays],
				                ERROR ( "Wrong configuration in HolidayParameters" )
				            )
				        VAR HolidayDay =
				            WEEKDAY ( HolidayDate, 1 ) - 1
				        VAR SubstituteHolidayOffset =
				            SWITCH (
				                TRUE,
				                [SubstituteHoliday] = -1,
				                    SWITCH ( 
				                        HolidayDay, 
				                        0, 1,       -- If it falls on a Sunday then it is observed on Monday
				                        6, -1,      -- If it falls on a Saturday then it is observed on Friday
				                        0
				                    ),
				                [SubstituteHoliday] > 0
				                    && NOT CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], HolidayDay ),
				                VAR NextWorkingDay =
				                    MINX (
				                        FILTER ( WorkingDays, [FSG_PBI_Day_Number] > HolidayDay ),
				                        [FSG_PBI_Day_Number]
				                    )
				                VAR SubstituteDay =
				                    IF (
				                        ISBLANK ( NextWorkingDay ),
				                        MINX ( WorkingDays, [FSG_PBI_Day_Number] ) + 7,
				                        NextWorkingDay
				                    )
				                RETURN
				                    SubstituteDay - HolidayDay
				                        + ( [SubstituteHoliday] - 1 )
				            )
				        RETURN
				            ROW (
				                -- Use DATE function to get a DATE column as a result 
				                "HolidayDate", DATE ( YEAR ( HolidayDate ), MONTH ( HolidayDate ), DAY ( HolidayDate ) ),
				                "SubstituteHolidayOffset", SubstituteHolidayOffset
				            )
				    ) //
				VAR HolidayDates_GeneratedRawWithDuplicates =
				    FILTER (
				        HolidayDates_GeneratedRawWithDuplicatesUnfiltered,
				        ( [FirstYear] = 0 || [FirstYear] <= [Value] )
				            && ( [LastYear] = 0 || [LastYear] >= [Value] )
				    )
				VAR HolidayDates_RawDatesUnique = 
				    DISTINCT ( 
				        SELECTCOLUMNS ( 
				            HolidayDates_GeneratedRawWithDuplicates,
				            "HolidayDateUnique", [HolidayDate]
				        )
				    )
				VAR HolidayDates_GeneratedRaw = 
				    GENERATE (
				        HolidayDates_RawDatesUnique,
				        VAR FilterDate = [HolidayDateUnique]
				        RETURN 
				            TOPN (
				                1,
				                FILTER ( 
				                    HolidayDates_GeneratedRawWithDuplicates,
				                    [HolidayDate] = FilterDate
				                ),
				                [ConflictPriority],
				                ASC,
				                [HolidayName], 
				                ASC
				            )
				    )  
				VAR HolidayDates_GeneratedSubstitutesOffset =
				    SELECTCOLUMNS (
				        FILTER ( HolidayDates_GeneratedRawWithDuplicates, [SubstituteHoliday] <> 0 ),
				        "Value", [Value],
				        "ISO Country", [ISO Country],
				        "MonthNumber", [MonthNumber],
				        "DayNumber", [DayNumber],
				        "WeekDayNumber", [WeekDayNumber],
				        "OffsetWeek", [OffsetWeek],
				        "HolidayName", [HolidayName],
				        "SubstituteHoliday", [SubstituteHoliday],
				        "ConflictPriority", [ConflictPriority],
				        "HolidayDate", [HolidayDate],
				        "SubstituteHolidayOffset", 
				            VAR CurrentHolidayDate = [HolidayDate]
				            VAR CurrentHolidayName = [HolidayName]
				            VAR OriginalSubstituteDate = [HolidayDate] + [SubstituteHolidayOffset]
				            VAR OtherHolidays = 
				                FILTER ( 
				                    HolidayDates_GeneratedRawWithDuplicates, 
				                    [HolidayDate] <> CurrentHolidayDate
				                    || [HolidayName] <> CurrentHolidayName
				                )
				            VAR ConflictDay0 = 
				                CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], OriginalSubstituteDate
				                )
				            VAR ConflictDay1 = 
				                ConflictDay0 
				                && CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], OriginalSubstituteDate + 1
				                )
				            VAR ConflictDay2 = 
				                ConflictDay1 
				                && CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], OriginalSubstituteDate + 2
				                )
				            VAR SubstituteOffsetStep1 = [SubstituteHolidayOffset] + ConflictDay0 + ConflictDay1 + ConflictDay2
				            VAR HolidayDateStep1 = CurrentHolidayDate + SubstituteOffsetStep1
				            VAR HolidayDayStep1 =
				                WEEKDAY ( HolidayDateStep1, 1 ) - 1
				            VAR SubstituteHolidayOffsetNonWorkingDays =
				                IF (
				                    NOT CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], HolidayDayStep1 ),
				                    VAR NextWorkingDayStep2 =
				                        MINX (
				                            FILTER ( WorkingDays, [FSG_PBI_Day_Number] > HolidayDayStep1 ),
				                            [FSG_PBI_Day_Number]
				                        )
				                    VAR SubstituteDay =
				                        IF (
				                            ISBLANK ( NextWorkingDayStep2 ),
				                            MINX ( WorkingDays, [FSG_PBI_Day_Number] ) + 7,
				                            NextWorkingDayStep2
				                        )
				                    RETURN SubstituteDay - HolidayDateStep1
				                )
				            VAR SubstituteOffsetStep2 = SubstituteOffsetStep1 + SubstituteHolidayOffsetNonWorkingDays
				            VAR SubstituteDateStep2 = OriginalSubstituteDate + SubstituteOffsetStep2
				            VAR ConflictDayStep2_0 = 
				                CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], SubstituteDateStep2
				                )
				            VAR ConflictDayStep2_1 = 
				                ConflictDayStep2_0
				                && CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], SubstituteDateStep2 + 1
				                )
				            VAR ConflictDayStep2_2 = 
				                ConflictDayStep2_1 
				                && CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], SubstituteDateStep2 + 2
				                )
				            VAR FinalSubstituteHolidayOffset = 
				                SubstituteOffsetStep2 + ConflictDayStep2_0 + ConflictDayStep2_1 + ConflictDayStep2_2
				            RETURN
				                FinalSubstituteHolidayOffset
				        )
				VAR HolidayDates_GeneratedSubstitutesExpanded =
				    ADDCOLUMNS (
				        HolidayDates_GeneratedSubstitutesOffset,
				        "ReplacementHolidayDate", [HolidayDate] + [SubstituteHolidayOffset]
				    )
				VAR HolidayDates_GeneratedSubstitutesUnique =
				    DISTINCT ( 
				        SELECTCOLUMNS ( 
				            HolidayDates_GeneratedSubstitutesExpanded,
				            "UniuqeReplacementHolidayDate", [ReplacementHolidayDate]
				        )
				    )
				VAR HolidayDates_GeneratedSubstitutes =
				    GENERATE (
				        HolidayDates_GeneratedSubstitutesUnique,
				        TOPN (
				            1,
				            FILTER ( 
				                HolidayDates_GeneratedSubstitutesExpanded,
				                [UniuqeReplacementHolidayDate] = [ReplacementHolidayDate]
				            ),
				            [ConflictPriority],
				            ASC,
				            [HolidayName], 
				            ASC
				        )
				    )  
				VAR HolidayDates_Generated =
				    UNION (
				        SELECTCOLUMNS (
				            HolidayDates_GeneratedRaw,
				            "HolidayDate", [HolidayDate],
				            "HolidayName", [HolidayName]
				        ),
				        SELECTCOLUMNS (
				            FILTER ( HolidayDates_GeneratedSubstitutes, [SubstituteHolidayOffset] <> 0 ), 
				            "HolidayDate", [HolidayDate] + [SubstituteHolidayOffset],
				            "HolidayName", InLieuOf_prefix & [HolidayName]
				                & InLieuOf_suffix
				        )
				    )
				-- Alternative way to express holidays: create a table with the list of the dates
				-- The following table should be used instead of HolidayDates_Generated in the following 
				-- HolidayDates variable if you want to use a fixed list of holidays
				VAR HolidayDates_US_ExplicitDates =
				    DATATABLE (
				        "HolidayDate", DATETIME,
				        "HolidayName", STRING,
				        {
				            { "2008-01-01", "New Year's Day" },
				            { "2008-12-25", "Christmas Day" },
				            -------------------------
				            { "2008-11-27", "Thanksgiving Day" },
				            { "2009-11-26", "Thanksgiving Day" },
				            { "2010-11-25", "Thanksgiving Day" },
				            { "2011-11-24", "Thanksgiving Day" },
				            { "2012-11-22", "Thanksgiving Day" },
				            { "2013-11-28", "Thanksgiving Day" },
				            { "2014-11-27", "Thanksgiving Day" },
				            { "2015-11-26", "Thanksgiving Day" },
				            { "2016-11-24", "Thanksgiving Day" },
				            { "2017-11-23", "Thanksgiving Day" },
				            { "2018-11-22", "Thanksgiving Day" },
				            { "2019-11-28", "Thanksgiving Day" },
				            { "2020-11-26", "Thanksgiving Day" }
				        }
				    )
				VAR HolidayDates =
				    SELECTCOLUMNS (
				        HolidayDates_Generated,
				        "Date", [HolidayDate],
				        "Holiday Name", [HolidayName]
				    ) //
				------------------------------------------------------------
				--  
				-- End of Configuration
				--
				------------------------------------------------------------
				--  
				-- The following variables define 
				-- the content of the calendar tables
				--
				------------------------------------------------------------
				------------------------------------------------------------
				VAR FirstDayCalendar =
				    DATE ( FirstYear - 1, 1, 1 )
				VAR LastDayCalendar =
				    DATE ( LastYear + 1, 12, 31 )
				VAR WeekDayCalculationType =
				    IF ( FirstDayOfWeek = 0, 7, FirstDayOfWeek )
				        + 10
				VAR OffsetFiscalYear = 
				    IF ( FiscalCalendarFirstMonth > 1, 1, 0 )
				VAR WeeklyFiscalPeriods =
				    GENERATE (
				        SELECTCOLUMNS (
				            GENERATESERIES ( FirstYear - OffsetFiscalYear, LastYear + OffsetFiscalYear, 1 ),
				            "CalendarType", "Weekly",
				            "Fiscal YearNumber", [Value]
				        ),
				        VAR StartFiscalYearNumber = [Fiscal YearNumber] - (OffsetFiscalYear * TypeStartFiscalYear)
				        VAR FirstDayCurrentYear =
				            DATE ( StartFiscalYearNumber, FiscalCalendarFirstMonth, 1 )
				        VAR FirstDayNextYear =
				            DATE ( StartFiscalYearNumber + 1, FiscalCalendarFirstMonth, 1 )
				        VAR DayOfWeekNumberCurrentYear =
				            WEEKDAY ( FirstDayCurrentYear, WeekDayCalculationType )
				        VAR OffsetStartCurrentFiscalYear =
				            SWITCH (
				                WeeklyType,
				                "Last", 1 - DayOfWeekNumberCurrentYear,
				                "Nearest", IF (
				                    DayOfWeekNumberCurrentYear >= 5,
				                    8 - DayOfWeekNumberCurrentYear,
				                    1 - DayOfWeekNumberCurrentYear
				                ),
				                ERROR ( "Unknown WeeklyType definition.")
				            )
				        VAR DayOfWeekNumberNextYear =
				            WEEKDAY ( FirstDayNextYear, WeekDayCalculationType )
				        VAR OffsetStartNextFiscalYear =
				            SWITCH (
				                WeeklyType,
				                "Last", - DayOfWeekNumberNextYear,
				                "Nearest", IF (
				                    DayOfWeekNumberNextYear >= 5,
				                    7 - DayOfWeekNumberNextYear,
				                    - DayOfWeekNumberNextYear
				                ),
				                ERROR ( "Unknown WeeklyType definition.")
				            )
				        VAR FirstDayOfFiscalYear = FirstDayCurrentYear + OffsetStartCurrentFiscalYear
				        VAR LastDayOfFiscalYear = FirstDayNextYear + OffsetStartNextFiscalYear
				        RETURN
				            ROW ( "FirstDayOfYear", FirstDayOfFiscalYear,
				            "LastDayOfYear", LastDayOfFiscalYear )
				    )
				VAR CheckFirstDayOfWeek =
				    IF (
				        UseCustomFiscalPeriods && (NOT IgnoreWeeklyFiscalPeriods)
				        && WEEKDAY ( MINX ( CustomFiscalPeriods, [FirstDayOfYear] ), 1 )
				              <> ( FirstDayOfWeek + 1 ),
				        ERROR ( "CustomFiscalPeriods table does not match FirstDayOfWeek setting" ),
				        TRUE
				    )
				VAR CustomFiscalPeriodsWithType =
				    GENERATE (
				        ROW ( "CalendarType", "Custom" ),
				        FILTER ( CustomFiscalPeriods, CheckFirstDayOfWeek )
				    )
				VAR FiscalPeriods =
				    SELECTCOLUMNS (
				        FILTER (
				            UNION ( 
				                FILTER ( WeeklyFiscalPeriods, NOT IgnoreWeeklyFiscalPeriods ),
				                CustomFiscalPeriodsWithType 
				            ),
				            [CalendarType] = WeeklyCalendarType
				        ),
				        "FW YearNumber", [Fiscal YearNumber],
				        "FW StartOfYear", [FirstDayOfYear],
				        "FW EndOfYear", [LastDayOfYear]
				    )
				VAR WeeksInP1 =
				    SWITCH (
				        QuarterWeekType,
				        "445", 4,
				        "454", 4,
				        "544", 5,
				        ERROR ( "QuarterWeekType only supports 445, 454, and 544" )
				    )
				VAR WeeksInP2 =
				    SWITCH (
				        QuarterWeekType,
				        "445", 4,
				        "454", 5,
				        "544", 4,
				        ERROR ( "QuarterWeekType only supports 445, 454, and 544" )
				    )
				VAR WeeksInP3 =
				    SWITCH (
				        QuarterWeekType,
				        "445", 5,
				        "454", 4,
				        "544", 4,
				        ERROR ( "QuarterWeekType only supports 445, 454, and 544" )
				    )
				VAR FirstSundayReference =
				    DATE ( 1900, 12, 30 ) -- Do not change this 
				VAR FirstWeekReference = FirstSundayReference + FirstDayOfWeek
				VAR RawDays =
				    CALENDAR ( FirstDayCalendar, LastDayCalendar )
				VAR CalendarGregorianPrefixSpace =
				    IF ( CalendarGregorianPrefix <> "", CalendarGregorianPrefix & " ", "" )
				VAR FiscalGregorianPrefixSpace =
				    IF ( FiscalGregorianPrefix <> "", FiscalGregorianPrefix & " ", "" )
				VAR FiscalWeeklyPrefixSpace =
				    IF ( FiscalWeeklyPrefix <> "", FiscalWeeklyPrefix & " ", "" )
				VAR CustomFiscalRawDays =
				    GENERATE ( FiscalPeriods, CALENDAR ( [FW StartOfYear], [FW EndOfYear] ) )
				VAR CalendarStandardGregorianBase =
				    GENERATE (
				        NATURALLEFTOUTERJOIN ( RawDays, HolidayDates ),
				        VAR CalDate = [Date]
				        VAR CalYear =
				            YEAR ( [Date] )
				        VAR CalMonthNumber =
				            MONTH ( [Date] )
				        VAR CalQuarterNumber =
				            ROUNDUP ( CalMonthNumber / 3, 0 )
				        VAR CalDay =
				            DAY ( [Date] )
				        VAR CalWeekNumber =
				            WEEKNUM ( CalDate, WeekDayCalculationType )
				        VAR CalDayOfMonth =
				            DAY ( CalDate )
				        VAR WeekDayNumber =
				            WEEKDAY ( CalDate, WeekDayCalculationType )
				        VAR YearWeekNumber =
				            INT ( DIVIDE ( CalDate - FirstWeekReference, 7 ) )
				        VAR CalendarFirstDayOfYear =
				            DATE ( CalYear, 1, 1 )
				        VAR CalendarDayOfYear =
				            INT ( CalDate - CalendarFirstDayOfYear + 1 )
				        VAR IsWorkingDay =
				            CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], WEEKDAY ( CalDate, 1 ) - 1 )
				                && ISBLANK ( [Holiday Name] )
				        VAR _CheckLeapYearBefore =
				            CalYear -
				            IF ( (CalMonthNumber = 2 && CalDayOfMonth < 29)
				                     || CalMonthNumber < 2,
				                1,
				                0 )
				        VAR LeapYearsBefore1900 =
				            INT ( 1899 / 4 )
				                - INT ( 1899 / 100 )
				                + INT ( 1899 / 400 )
				        VAR LeapYearsBetween =
				            INT ( _CheckLeapYearBefore / 4 )
				                - INT ( _CheckLeapYearBefore / 100 )
				                + INT ( _CheckLeapYearBefore / 400 )
				                - LeapYearsBefore1900
				        VAR Sequential365DayNumber =
				            INT ( CalDate - LeapYearsBetween ) 
				        RETURN
				            ROW (
				                "DateKey", CalYear * 10000
				                    + CalMonthNumber * 100
				                    + CalDay,
				                "Calendar YearNumber", CalYear,
				                "Calendar Year", CalendarGregorianPrefixSpace & CalYear,
				                "Calendar QuarterNumber", CalQuarterNumber,
				                "Calendar Quarter", CalendarGregorianPrefix & "Q"
				                    & CalQuarterNumber
				                    & " ",
				                "Calendar YearQuarterNumber", CalYear * 4
				                    - 1
				                    + CalQuarterNumber,
				                "Calendar Quarter Year", CalendarGregorianPrefix & "Q"
				                    & CalQuarterNumber
				                    & " "
				                    & CalYear,
				                "Calendar MonthNumber", CalMonthNumber,
				                "Calendar Month", FORMAT ( CalDate, "mmm" ),
				                "Calendar YearMonthNumber", CalYear * 12
				                    - 1
				                    + CalMonthNumber,
				                "Calendar Month Year", FORMAT ( CalDate, "mmm" ) & " "
				                    & CalYear,
				                "Calendar WeekNumber", CalWeekNumber,
				                "Calendar Week", CalendarGregorianPrefix & "W"
				                    & FORMAT ( CalWeekNumber, "00" ),
				                "Calendar YearWeekNumber", YearWeekNumber,
				                "Calendar Week Year", CalendarGregorianPrefix & "W"
				                    & FORMAT ( CalWeekNumber, "00" )
				                    & "-"
				                    & CalYear,
				                "Calendar WeekYearOrder", CalYear * 100
				                    + CalWeekNumber,
				                "Calendar DayOfYearNumber", CalendarDayOfYear,
				                "Day of Month", CalDayOfMonth,
				                "WeekDayNumber", WeekDayNumber,
				                "Week Day", FORMAT ( CalDate, "ddd" ),
				                "IsWorkingDay", IsWorkingDay,
				                "Day Type", IF ( IsWorkingDay, WorkingDayType, NonWorkingDayType ),
				                "Sequential365DayNumber", Sequential365DayNumber
				            )
				    )
				VAR CalendarStandardGregorian =
				    GENERATE (
				        CalendarStandardGregorianBase,
				        VAR CalDate = [Date]
				        VAR YearNumber = [Calendar YearNumber]
				        VAR MonthNumber = [Calendar MonthNumber]
				        VAR YearWeekNumber = [Calendar YearWeekNumber]
				        VAR YearMonthNumber = [Calendar YearMonthNumber]
				        VAR YearQuarterNumber = [Calendar YearQuarterNumber]
				        VAR CurrentWeekPos =
				            AVERAGEX (
				                FILTER ( CalendarStandardGregorianBase, [Date] = TodayReference ),
				                [Calendar YearWeekNumber]
				            )
				        VAR CurrentMonthPos =
				            AVERAGEX (
				                FILTER ( CalendarStandardGregorianBase, [Date] = TodayReference ),
				                [Calendar YearMonthNumber]
				            )
				        VAR CurrentQuarterPos =
				            AVERAGEX (
				                FILTER ( CalendarStandardGregorianBase, [Date] = TodayReference ),
				                [Calendar YearQuarterNumber]
				            )
				        VAR CurrentYearPos =
				            AVERAGEX (
				                FILTER ( CalendarStandardGregorianBase, [Date] = TodayReference ),
				                [Calendar YearNumber]
				            )
				        VAR RelativeWeekPos = YearWeekNumber - CurrentWeekPos
				        VAR RelativeMonthPos = YearMonthNumber - CurrentMonthPos
				        VAR RelativeQuarterPos = YearQuarterNumber - CurrentQuarterPos
				        VAR RelativeYearPos = YearNumber - CurrentYearPos
				        VAR CalStartOfMonth =
				            DATE ( YearNumber, MonthNumber, 1 )
				        VAR CalEndOfMonth =
				            EOMONTH ( CalDate, 0 )
				        VAR CalMonthDays = 
				            INT ( CalEndOfMonth - CalStartOfMonth + 1 ) 
				        VAR CalDayOfMonthNumber =
				            INT ( CalDate - CalStartOfMonth + 1 )
				        VAR CalStartOfQuarter =
				            MINX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearQuarterNumber] = YearQuarterNumber
				                ),
				                [Date]
				            )
				        VAR CalEndOfQuarter =
				            MAXX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearQuarterNumber] = YearQuarterNumber
				                ),
				                [Date]
				            )
				        VAR CalQuarterDays =
				            INT ( CalEndOfQuarter - CalStartOfQuarter + 1 )         
				        VAR CalDayOfQuarterNumber =
				            INT ( CalDate - CalStartOfQuarter + 1 )
				        VAR CalYearDays =
				            INT ( DATE ( YearNumber, 12, 31 ) - DATE ( YearNumber, 1, 1 ) + 1 )
				        VAR CalDatePreviousWeek = CalDate - 7
				        VAR CalDatePreviousMonth = 
				            MAXX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearMonthNumber] = YearMonthNumber - 1
				                    &&
				                    ( [Day of Month] <= CalDayOfMonthNumber
				                      || CalDayOfMonthNumber = CalMonthDays )
				                ),
				                [Date]
				            )
				        VAR CalDatePreviousQuarter = 
				            MAXX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearMonthNumber] = YearMonthNumber - 3
				                    &&
				                    ( [Day of Month] <= CalDayOfMonthNumber
				                      || CalDayOfMonthNumber = CalMonthDays )
				                ),
				                [Date]
				            )
				        VAR CalDatePreviousYear = 
				            MAXX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearMonthNumber] = YearMonthNumber - 12
				                    &&
				                    ( [Day of Month] <= CalDayOfMonthNumber
				                      || CalDayOfMonthNumber = CalMonthDays )
				                ),
				                [Date]
				            )
				        VAR CalStartOfYear =
				            DATE ( YearNumber, 1, 1 )
				        VAR CalEndOfYear =
				            DATE ( YearNumber, 12, 31 )
				        RETURN
				            ROW ( "Calendar RelativeWeekPos", RelativeWeekPos,
				            "Calendar RelativeMonthPos", RelativeMonthPos,
				            "Calendar RelativeQuarterPos", RelativeQuarterPos,
				            "Calendar RelativeYearPos", RelativeYearPos,
				            "Calendar StartOfMonth", CalStartOfMonth,
				            "Calendar EndOfMonth", CalEndOfMonth,
				            "Calendar DayOfMonthNumber", CalDayOfMonthNumber,
				            "Calendar StartOfQuarter", CalStartOfQuarter,
				            "Calendar EndOfQuarter", CalEndOfQuarter,
				            "Calendar DayOfQuarterNumber", CalDayOfQuarterNumber,            
				            "Calendar StartOfYear", CalStartOfYear,
				            "Calendar EndOfYear", CalEndOfYear,
				            "Calendar DatePreviousWeek", CalDatePreviousWeek,
				            "Calendar DatePreviousMonth", CalDatePreviousMonth,
				            "Calendar DatePreviousQuarter", CalDatePreviousQuarter,
				            "Calendar DatePreviousYear", CalDatePreviousYear,
				            "Calendar MonthDays", CalMonthDays,
				            "Calendar QuarterDays", CalQuarterDays,
				            "Calendar YearDays", CalYearDays
				            )
				    )
				VAR FiscalStandardGregorianBase =
				    GENERATE (
				        NATURALLEFTOUTERJOIN ( RawDays, HolidayDates ),
				        VAR FiscalDate = [Date]
				        VAR CalYear =
				            YEAR ( FiscalDate )
				        VAR CalMonthNumber =
				            MONTH ( FiscalDate )
				        VAR CalDay =
				            DAY ( [Date] )
				        VAR WeekDayNumber =
				            WEEKDAY ( FiscalDate, WeekDayCalculationType )
				        VAR YearWeekNumber =
				            INT ( DIVIDE ( FiscalDate - FirstWeekReference, 7 ) )
				        VAR FiscalYear =
				            CalYear 
				                + IF ( FiscalCalendarFirstMonth > 1,
				                      IF ( CalMonthNumber >= FiscalCalendarFirstMonth, 
				                          TypeStartFiscalYear,                     -- TypeStartFiscalYear = 1
				                          -1 * (TypeStartFiscalYear = 0)           -- TypeStartFiscalYear = 0
				                      )
				                  )
				        VAR FiscalMonthNumber =
				            MOD ( CalMonthNumber - FiscalCalendarFirstMonth, 12 )
				                + 1
				        VAR FiscalMonthQuarterNumber = 
				            MOD ( FiscalMonthNumber - 1, 3 ) + 1
				        VAR FiscalFirstDayOfYear =
				            DATE ( FiscalYear - (OffsetFiscalYear * TypeStartFiscalYear), FiscalCalendarFirstMonth, 1 )
				        VAR FiscalDayOfYear =
				            INT ( FiscalDate - FiscalFirstDayOfYear + 1 )
				        VAR FiscalFirstYearWeekNumber =
				            INT ( DIVIDE ( FiscalFirstDayOfYear - FirstWeekReference, 7 ) )
				        VAR FiscalWeekNumber = YearWeekNumber - FiscalFirstYearWeekNumber
				            + 1
				        VAR FiscalQuarterNumber =
				            ROUNDUP ( FiscalMonthNumber / 3, 0 )
				        VAR IsWorkingDay =
				            CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], WEEKDAY ( FiscalDate, 1 ) - 1 )
				                && ISBLANK ( [Holiday Name] )
				        RETURN
				            ROW (
				                "DateKey", CalYear * 10000
				                    + CalMonthNumber * 100
				                    + CalDay,
				                "Fiscal Year", FiscalGregorianPrefixSpace & FiscalYear,
				                "Fiscal YearNumber", FiscalYear,
				                "Fiscal QuarterNumber", FiscalQuarterNumber,
				                "Fiscal Quarter", FiscalGregorianPrefix & "Q"
				                    & FiscalQuarterNumber
				                    & " ",
				                "Fiscal YearQuarterNumber", FiscalYear * 4
				                    - 1
				                    + FiscalQuarterNumber,
				                "Fiscal Quarter Year", FiscalGregorianPrefix & "Q"
				                    & FiscalQuarterNumber
				                    & " "
				                    & FiscalYear,
				                "Fiscal MonthNumber", FiscalMonthNumber,
				                "Fiscal MonthQuarterNumber", FiscalMonthQuarterNumber,
				                "Fiscal Month", FORMAT ( FiscalDate, "mmm" ),
				                "Fiscal YearMonthNumber", FiscalYear * 12
				                    - 1
				                    + FiscalMonthNumber,
				                "Fiscal Month Year", FORMAT ( FiscalDate, "mmm" ) & " "
				                    & CalYear,
				                "Fiscal WeekNumber", FiscalWeekNumber,
				                "Fiscal Week", FiscalGregorianPrefix & "W"
				                    & FORMAT ( FiscalWeekNumber, "00" ),
				                "Fiscal YearWeekNumber", YearWeekNumber,
				                "Fiscal Week Year", FiscalGregorianPrefix & "W"
				                    & FORMAT ( FiscalWeekNumber, "00" )
				                    & "-"
				                    & FiscalYear,
				                "Fiscal WeekYearOrder", FiscalYear * 100
				                    + FiscalWeekNumber,
				                "Fiscal DayOfYearNumber", FiscalDayOfYear,
				                "Day of Month", DAY ( FiscalDate ),
				                "WeekDayNumber", WeekDayNumber,
				                "Week Day", FORMAT ( FiscalDate, "ddd" ),
				                "IsWorkingDay", IsWorkingDay,
				                "Day Type", IF ( IsWorkingDay, WorkingDayType, NonWorkingDayType )
				            )
				    )
				VAR FiscalStandardGregorian =
				    GENERATE (
				        FiscalStandardGregorianBase,
				        VAR FiscalDate = [Date]
				        VAR FiscalYearNumber = [Fiscal YearNumber]
				        VAR MonthNumber = [Fiscal MonthNumber]
				        VAR CalendarYearNumber =
				            YEAR ( FiscalDate )
				        VAR CalendarMonthNumber =
				            MONTH ( FiscalDate )
				        VAR YearWeekNumber = [Fiscal YearWeekNumber]
				        VAR YearMonthNumber = [Fiscal YearMonthNumber]
				        VAR YearQuarterNumber = [Fiscal YearQuarterNumber]
				        VAR CurrentWeekPos =
				            AVERAGEX (
				                FILTER ( FiscalStandardGregorianBase, [Date] = TodayReference ),
				                [Fiscal YearWeekNumber]
				            )
				        VAR CurrentMonthPos =
				            AVERAGEX (
				                FILTER ( FiscalStandardGregorianBase, [Date] = TodayReference ),
				                [Fiscal YearMonthNumber]
				            )
				        VAR CurrentQuarterPos =
				            AVERAGEX (
				                FILTER ( FiscalStandardGregorianBase, [Date] = TodayReference ),
				                [Fiscal YearQuarterNumber]
				            )
				        VAR CurrentYearPos =
				            AVERAGEX (
				                FILTER ( FiscalStandardGregorianBase, [Date] = TodayReference ),
				                [Fiscal YearNumber]
				            )
				        VAR RelativeWeekPos = YearWeekNumber - CurrentWeekPos
				        VAR RelativeMonthPos = YearMonthNumber - CurrentMonthPos
				        VAR RelativeQuarterPos = YearQuarterNumber - CurrentQuarterPos
				        VAR RelativeYearPos = FiscalYearNumber - CurrentYearPos
				        VAR FiscalStartOfMonth =
				            DATE ( CalendarYearNumber, CalendarMonthNumber, 1 )
				        VAR FiscalEndOfMonth =
				            EOMONTH ( FiscalDate, 0 )
				        VAR FiscalMonthDays = 
				            INT ( FiscalEndOfMonth - FiscalStartOfMonth + 1 ) 
				        VAR FiscalDayOfMonthNumber =
				            INT ( FiscalDate - FiscalStartOfMonth + 1 )
				        VAR FiscalStartOfQuarter =
				            MINX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearQuarterNumber] = YearQuarterNumber
				                ),
				                [Date]
				            )
				        VAR FiscalEndOfQuarter =
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearQuarterNumber] = YearQuarterNumber
				                ),
				                [Date]
				            )
				        VAR FiscalQuarterDays = 
				            INT ( FiscalEndOfQuarter - FiscalStartOfQuarter + 1 )
				        VAR FiscalFirstDayOfYear =
				            DATE ( FiscalYearNumber - OffsetFiscalYear, FiscalCalendarFirstMonth, 1 )
				        VAR FiscalLastDayOfYear =
				            DATE ( FiscalYearNumber + (1 * (OffsetFiscalYear = 0)), FiscalCalendarFirstMonth, 1 ) - 1
				        VAR FiscalYearDays = 
				            INT ( FiscalLastDayOfYear - FiscalFirstDayOfYear + 1 ) 
				        VAR FiscalDayOfQuarterNumber =
				            INT ( FiscalDate - FiscalStartOfQuarter + 1 )
				        VAR FiscalStartOfYear =
				            MINX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearNumber] = FiscalYearNumber
				                ),
				                [Date]
				            )
				        VAR FiscalEndOfYear =
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearNumber] = FiscalYearNumber
				                ),
				                [Date]
				            )
				        VAR FiscalDatePreviousWeek = FiscalDate - 7
				        VAR FiscalDatePreviousMonth = 
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearMonthNumber] = YearMonthNumber - 1
				                    &&
				                    ( [Day of Month] <= FiscalDayOfMonthNumber
				                      || FiscalDayOfMonthNumber = FiscalMonthDays )
				                ),
				                [Date]
				            )
				        VAR FiscalDatePreviousQuarter = 
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearMonthNumber] = YearMonthNumber - 3
				                    &&
				                    ( [Day of Month] <= FiscalDayOfMonthNumber
				                      || FiscalDayOfMonthNumber = FiscalMonthDays )
				                ),
				                [Date]
				            )
				        VAR FiscalDatePreviousYear = 
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearMonthNumber] = YearMonthNumber - 12
				                    &&
				                    ( [Day of Month] <= FiscalDayOfMonthNumber
				                      || FiscalDayOfMonthNumber = FiscalMonthDays )
				                ),
				                [Date]
				            )
				        RETURN
				            ROW ( "Fiscal RelativeWeekPos", RelativeWeekPos,
				            "Fiscal RelativeMonthPos", RelativeMonthPos,
				            "Fiscal RelativeQuarterPos", RelativeQuarterPos,
				            "Fiscal RelativeYearPos", RelativeYearPos,
				            "Fiscal StartOfMonth", FiscalStartOfMonth,
				            "Fiscal EndOfMonth", FiscalEndOfMonth,
				            "Fiscal DayOfMonthNumber", FiscalDayOfMonthNumber,
				            "Fiscal StartOfQuarter", FiscalStartOfQuarter,
				            "Fiscal EndOfQuarter", FiscalEndOfQuarter,
				            "Fiscal DayOfQuarterNumber", FiscalDayOfQuarterNumber,
				            "Fiscal StartOfYear", FiscalStartOfYear,
				            "Fiscal EndOfYear", FiscalEndOfYear,
				            "Fiscal DatePreviousWeek", FiscalDatePreviousWeek,
				            "Fiscal DatePreviousMonth", FiscalDatePreviousMonth,
				            "Fiscal DatePreviousQuarter", FiscalDatePreviousQuarter,
				            "Fiscal DatePreviousYear", FiscalDatePreviousYear,
				            "Fiscal MonthDays", FiscalMonthDays,
				            "Fiscal QuarterDays", FiscalQuarterDays,
				            "Fiscal YearDays", FiscalYearDays
				           )
				    )
				VAR FiscalWeeksBase =
				    GENERATE (
				        NATURALLEFTOUTERJOIN ( CustomFiscalRawDays, HolidayDates ),
				        VAR CalDate = [Date]
				        VAR FwFirstDayOfYear = [FW StartOfYear]
				        VAR FwDayOfYear =
				            INT ( CalDate - FwFirstDayOfYear + 1 )
				        VAR CalYear =
				            YEAR ( [Date] )
				        VAR CalMonthNumber =
				            MONTH ( [Date] )
				        VAR CalDay =
				            DAY ( [Date] )
				        VAR FwDayOfYearNumber = CalDate - [FW StartOfYear]
				            + 1
				        VAR FwWeekNumber =
				            INT ( CEILING ( FwDayOfYearNumber / 7, 1 ) )
				        VAR FwPeriodNumber = 
				            IF ( FwWeekNumber > 52, 14, ROUNDUP ( FwWeekNumber / 4, 0 ) )
				        VAR FwYearNumber = [FW YearNumber]
				        VAR FwQuarterNumber =
				            IF ( FwWeekNumber > 52, 4, ROUNDUP ( FwWeekNumber / 13, 0 ) )
				        VAR FwWeekInQuarterNumber =
				            IF ( FwWeekNumber > 52, 14, FwWeekNumber - 13 * ( FwQuarterNumber - 1 ) )
				        VAR FwMonthNumber =
				            ( FwQuarterNumber - 1 )
				                * 3
				                + SWITCH (
				                    TRUE,
				                    FwWeekInQuarterNumber <= WeeksInP1, 1,
				                    FwWeekInQuarterNumber
				                        <= ( WeeksInP1 + WeeksInP2 ), 2,
				                    3
				                )
				        VAR WeekDayNumber =
				            WEEKDAY ( CalDate, WeekDayCalculationType )
				        VAR FirstDayOfWeek = [Date] - WeekDayNumber
				            + 1
				        VAR LastDayOfWeek = FirstDayOfWeek + 6
				        VAR IsWorkingDay =
				            CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], WEEKDAY ( CalDate, 1 ) - 1 )
				                && ISBLANK ( [Holiday Name] )
				        RETURN
				            ROW (
				                "DateKey", CalYear * 10000
				                    + CalMonthNumber * 100
				                    + CalDay,
				                // "FW YearNumber", FwYearNumber, -- It is already in the first set of columns of the GENERATE function
				                "FW Year", FiscalWeeklyPrefixSpace & FwYearNumber,
				                "FW QuarterNumber", FwQuarterNumber,
				                "FW Quarter", FiscalWeeklyPrefix & "Q"
				                    & FwQuarterNumber,
				                "FW YearQuarterNumber", FwYearNumber * 4
				                    - 1
				                    + FwQuarterNumber,
				                "FW Quarter Year", FiscalWeeklyPrefix & "Q"
				                    & FwQuarterNumber
				                    & " "
				                    & FwYearNumber,
				                "FW MonthNumber", FwMonthNumber,
				                "FW Month", FiscalWeeklyPrefix & "P"
				                    & FORMAT ( FwMonthNumber, "00" ),
				                "FW YearMonthNumber", FwYearNumber * 12
				                    - 1
				                    + FwMonthNumber,
				                "FW Month Year", FiscalWeeklyPrefix & "P"
				                    & FORMAT ( FwMonthNumber, "00" )
				                    & " "
				                    & FwYearNumber,
				                "FW WeekNumber", FwWeekNumber,
				                "FW Week", FiscalWeeklyPrefix & "W"
				                    & FORMAT ( FwWeekNumber, "00" ),
				                "FW PeriodNumber", FwPeriodNumber,
				                "FW Period", FiscalWeeklyPrefix & "P"
				                    & FORMAT ( FwPeriodNumber, "00" ),
				                "FW YearWeekNumber", INT ( DIVIDE ( CalDate - FirstWeekReference, 7 ) )
				                    + 1,
				                "FW Week Year", FiscalWeeklyPrefix & "W"
				                    & FORMAT ( FwWeekNumber, "00" )
				                    & " "
				                    & FwYearNumber,
				                "FW StartOfWeek", FirstDayOfWeek,
				                "FW EndOfWeek", LastDayOfWeek,
				                "WeekDayNumber", WeekDayNumber,
				                "Week Day", FORMAT ( CalDate, "ddd" ),
				                "FW DayOfYearNumber", FwDayOfYear,
				                "IsWorkingDay", IsWorkingDay,
				                "Day Type", IF ( IsWorkingDay, WorkingDayType, NonWorkingDayType )
				            )
				    )
				VAR FiscalWeeks_Pre = 
				    GENERATE (
				        FiscalWeeksBase,
				        VAR CalDate = [Date]
				        VAR FWYearNumber = [FW YearNumber]
				        VAR FwYearWeekNumber = [FW YearWeekNumber]
				        VAR FwYearMonthNumber = [FW YearMonthNumber]
				        VAR FwYearQuarterNumber = [FW YearQuarterNumber]
				        VAR CurrentWeekPos =
				            AVERAGEX (
				                FILTER ( FiscalWeeksBase, [Date] = TodayReference ),
				                [FW YearWeekNumber]
				            )
				        VAR CurrentMonthPos =
				            AVERAGEX (
				                FILTER ( FiscalWeeksBase, [Date] = TodayReference ),
				                [FW YearMonthNumber]
				            )
				        VAR CurrentQuarterPos =
				            AVERAGEX (
				                FILTER ( FiscalWeeksBase, [Date] = TodayReference ),
				                [FW YearQuarterNumber]
				            )
				        VAR CurrentYearPos =
				            AVERAGEX (
				                FILTER ( FiscalWeeksBase, [Date] = TodayReference ),
				                [FW YearNumber]
				            )
				        VAR RelativeWeekPos = FwYearWeekNumber - CurrentWeekPos
				        VAR RelativeMonthPos = FwYearMonthNumber - CurrentMonthPos
				        VAR RelativeQuarterPos = FwYearQuarterNumber - CurrentQuarterPos
				        VAR RelativeYearPos = FWYearNumber - CurrentYearPos
				        VAR FwStartOfMonth =
				            MINX (
				                FILTER ( FiscalWeeksBase, [FW YearMonthNumber] = FwYearMonthNumber ),
				                [Date]
				            )
				        VAR FwEndOfMonth =
				            MAXX (
				                FILTER ( FiscalWeeksBase, [FW YearMonthNumber] = FwYearMonthNumber ),
				                [Date]
				            )
				        VAR FwMonthDays = 
				            INT ( FwEndOfMonth - FwStartOfMonth + 1 ) 
				        VAR FwDayOfMonthNumber =
				            INT ( CalDate - FwStartOfMonth + 1 )
				        VAR FwStartOfQuarter =
				            MINX (
				                FILTER ( FiscalWeeksBase, [FW YearQuarterNumber] = FwYearQuarterNumber ),
				                [Date]
				            )
				        VAR FwEndOfQuarter =
				            MAXX (
				                FILTER ( FiscalWeeksBase, [FW YearQuarterNumber] = FwYearQuarterNumber ),
				                [Date]
				            )
				        VAR FwQuarterDays = 
				            INT ( FwEndOfQuarter - FwStartOfQuarter + 1 )
				        VAR FwDayOfQuarterNumber =
				            INT ( CalDate - FwStartOfQuarter + 1 )
				        VAR FwStartOfYear =
				            MINX (
				                FILTER ( FiscalWeeksBase, [FW YearNumber] = FwYearNumber ),
				                [Date]
				            )
				        VAR FwEndOfYear =
				            MAXX (
				                FILTER ( FiscalWeeksBase, [FW YearNumber] = FwYearNumber ),
				                [Date]
				            )
				        VAR FwYearDays = 
				            INT ( FwEndOfYear - FwStartOfYear + 1 )
				        RETURN
				            ROW ( "FW RelativeWeekPos", RelativeWeekPos,
				            "FW RelativeMonthPos", RelativeMonthPos,
				            "FW RelativeQuarterPos", RelativeQuarterPos,
				            "FW RelativeYearPos", RelativeYearPos,
				            "FW StartOfMonth", FwStartOfMonth,
				            "FW EndOfMonth", FwEndOfMonth,
				            "FW DayOfMonthNumber", FwDayOfMonthNumber,
				            "FW StartOfQuarter", FwStartOfQuarter,
				            "FW EndOfQuarter", FwEndOfQuarter,
				            "FW DayOfQuarterNumber", FwDayOfQuarterNumber,
				            "FW MonthDays", FwMonthDays,
				            "FW QuarterDays", FwQuarterDays,
				            "FW YearDays", FwYearDays   
				            )
				    )
				VAR FiscalWeeks =
				    GENERATE (
				        FiscalWeeks_Pre,
				        VAR CalDate = [Date]
				        VAR FwYearMonthNumber = [FW YearMonthNumber]
				        VAR FwYearQuarterNumber = [FW YearQuarterNumber]
				        VAR FWYearNumber = [FW YearNumber]
				        VAR FwDayOfMonthNumber = [FW DayOfMonthNumber]
				        VAR FwDayOfQuarterNumber = [FW DayOfQuarterNumber]
				        VAR FwDayOfYearNumber = [FW DayOfYearNumber]
				        VAR FwMonthDays = [FW EndOfMonth] - [FW StartOfMonth] + 1 
				        VAR FwQuarterDays = [FW EndOfQuarter] - [FW StartOfQuarter] + 1 
				        VAR FwYearDays = [FW EndOfYear] - [FW StartOfYear] + 1 
				        VAR FwDatePreviousWeek = CalDate - 7
				        VAR FwDatePreviousMonth = 
				            MAXX (
				                FILTER (
				                    FiscalWeeks_Pre,
				                    [Fw YearMonthNumber] = FwYearMonthNumber - 1
				                    &&
				                    ( [FW DayOfMonthNumber] <= FwDayOfMonthNumber
				                      || FwDayOfMonthNumber = FwMonthDays )
				                ),
				                [Date]
				            )
				        VAR FwDatePreviousQuarter = 
				            MAXX (
				                FILTER (
				                    FiscalWeeks_Pre,
				                    [Fw YearQuarterNumber] = FwYearQuarterNumber - 1
				                    &&
				                    ( [FW DayOfQuarterNumber] <= FwDayOfQuarterNumber
				                      || FwDayOfQuarterNumber = FwQuarterDays )
				                ),
				                [Date]
				            )        
				        VAR FwDatePreviousYear = 
				            MAXX (
				                FILTER (
				                    FiscalWeeks_Pre,
				                    [Fw YearNumber] = FWYearNumber - 1
				                    &&
				                    ( [FW DayOfYearNumber] <= FwDayOfYearNumber
				                      || FwDayOfYearNumber = FwYearDays )
				                ),
				                [Date]
				            )
				        RETURN
				            ROW ( 
				                "FW DatePreviousWeek", FwDatePreviousWeek,
				                "FW DatePreviousMonth", FwDatePreviousMonth,
				                "FW DatePreviousQuarter", FwDatePreviousQuarter,
				                "FW DatePreviousYear", FwDatePreviousYear         
				            )
				    )
				    
				VAR CompleteCalendarExpanded =
				    NATURALLEFTOUTERJOIN (
				        FiscalStandardGregorian,
				        NATURALLEFTOUTERJOIN ( CalendarStandardGregorian, FiscalWeeks )
				    )
				VAR CompleteCalendar = 
				    FILTER (
				        CompleteCalendarExpanded,
				        ( [Calendar YearNumber] >= FirstYear && [Calendar YearNumber] <= LastYear && CalendarRange = "Calendar" )
				        ||
				        ( [Fiscal YearNumber] >= FirstYear && [Fiscal YearNumber] <= LastYear && CalendarRange = "FiscalGregorian" )
				        ||
				        ( [FW YearNumber] >= FirstYear && [FW YearNumber] <= LastYear && CalendarRange = "FiscalWeekly" )
				    )
				    
				VAR Result =
				    SELECTCOLUMNS (
				        CompleteCalendar,
				        
				        -- Base date columns
				        "Date", [Date],
				        "DateKey", [DateKey],
				
				        "Day of Month", [Day of Month],
				        "WeekDayNumber", [WeekDayNumber],
				
				        "Week Day", [Week Day],
				        "Sequential365DayNumber", [Sequential365DayNumber],
				        "Relative Day", DATEDIFF(VALUES('Date Table Setup'[Today]),[Date],DAY),
				        
				        -- Calendar = Solar Calendar (January-December)
				        "Calendar YearNumber", [Calendar YearNumber],
				        "Calendar Year", [Calendar Year],
				        "Calendar QuarterNumber", [Calendar QuarterNumber],
				        "Calendar Quarter", [Calendar Quarter],
				        "Calendar YearQuarterNumber", [Calendar YearQuarterNumber],
				        "Calendar Quarter Year", [Calendar Quarter Year],
				        "Calendar MonthNumber", [Calendar MonthNumber],
				        "Calendar Month", [Calendar Month],
				        "Calendar YearMonthNumber", [Calendar YearMonthNumber],
				        "Calendar Month Year", [Calendar Month Year],
				        "Calendar WeekNumber", [Calendar WeekNumber],
				        "Calendar Week", [Calendar Week],
				        "Calendar YearWeekNumber", [Calendar YearWeekNumber],
				        "Calendar Week Year", [Calendar Week Year],
				        "Calendar WeekYearOrder", [Calendar WeekYearOrder],
				        "Calendar RelativeWeekPos", [Calendar RelativeWeekPos],
				        "Calendar RelativeMonthPos", [Calendar RelativeMonthPos],
				        "Calendar RelativeQuarterPos", [Calendar RelativeQuarterPos],
				        "Calendar RelativeYearPos", [Calendar RelativeYearPos],
				        "Calendar StartOfMonth", [Calendar StartOfMonth],
				        "Calendar EndOfMonth", [Calendar EndOfMonth],
				        "Calendar StartOfQuarter", [Calendar StartOfQuarter],
				        "Calendar EndOfQuarter", [Calendar EndOfQuarter],
				        "Calendar StartOfYear", [Calendar StartOfYear],
				        "Calendar EndOfYear", [Calendar EndOfYear],
				        "Calendar MonthDays", [Calendar MonthDays],
				        "Calendar QuarterDays", [Calendar QuarterDays],
				        "Calendar YearDays", [Calendar YearDays],
				        "Calendar DayOfMonthNumber", [Calendar DayOfMonthNumber],
				        "Calendar DayOfQuarterNumber", [Calendar DayOfQuarterNumber],
				        "Calendar DayOfYearNumber", [Calendar DayOfYearNumber],
				        "Calendar DatePreviousWeek", [Calendar DatePreviousWeek],
				        "Calendar DatePreviousMonth", [Calendar DatePreviousMonth],
				        "Calendar DatePreviousQuarter", [Calendar DatePreviousQuarter],
				        "Calendar DatePreviousYear", [Calendar DatePreviousYear],
				
				        -- Fiscal = Fiscal Monthly Calendar
				        "Fiscal Year", [Fiscal Year],
				        "Fiscal YearNumber", [Fiscal YearNumber],
				        "Fiscal QuarterNumber", [Fiscal QuarterNumber],
				        "Fiscal Quarter", [Fiscal Quarter],
				        "Fiscal YearQuarterNumber", [Fiscal YearQuarterNumber],
				        "Fiscal Quarter Year", [Fiscal Quarter Year],
				        "Fiscal MonthNumber", [Fiscal MonthNumber],
				        "Fiscal MonthInQuarterNumber", [Fiscal MonthQuarterNumber],
				        "Fiscal Month", [Fiscal Month],
				        "Fiscal YearMonthNumber", [Fiscal YearMonthNumber],
				        "Fiscal Month Year", [Fiscal Month Year],
				        "Fiscal WeekNumber", [Fiscal WeekNumber],
				        "Fiscal Week", [Fiscal Week],
				        "Fiscal YearWeekNumber", [Fiscal YearWeekNumber],
				        "Fiscal Week Year", [Fiscal Week Year],
				        "Fiscal WeekYearOrder", [Fiscal WeekYearOrder],
				        "Fiscal RelativeWeekPos", [Fiscal RelativeWeekPos],
				        "Fiscal RelativeMonthPos", [Fiscal RelativeMonthPos],
				        "Fiscal RelativeQuarterPos", [Fiscal RelativeQuarterPos],
				        "Fiscal RelativeYearPos", [Fiscal RelativeYearPos],
				        "Fiscal StartOfMonth", [Fiscal StartOfMonth],
				        "Fiscal EndOfMonth", [Fiscal EndOfMonth],
				        "Fiscal StartOfQuarter", [Fiscal StartOfQuarter],
				        "Fiscal EndOfQuarter", [Fiscal EndOfQuarter],
				        "Fiscal StartOfYear", [Fiscal StartOfYear],
				        "Fiscal EndOfYear", [Fiscal EndOfYear],
				        "Fiscal MonthDays", [Fiscal MonthDays],
				        "Fiscal QuarterDays", [Fiscal QuarterDays],
				        "Fiscal YearDays", [Fiscal YearDays],
				        "Fiscal DayOfMonthNumber", [Fiscal DayOfMonthNumber],
				        "Fiscal DayOfQuarterNumber", [Fiscal DayOfQuarterNumber],
				        "Fiscal DayOfYearNumber", [Fiscal DayOfYearNumber],
				        "Fiscal DatePreviousWeek", [Fiscal DatePreviousWeek],
				        "Fiscal DatePreviousMonth", [Fiscal DatePreviousMonth],
				        "Fiscal DatePreviousQuarter", [Fiscal DatePreviousQuarter],
				        "Fiscal DatePreviousYear", [Fiscal DatePreviousYear],
				
				        -- FW = Fiscal Weekly calendar
				        "FW YearNumber", [FW YearNumber],
				        "FW Year", [FW Year],
				        "FW QuarterNumber", [FW QuarterNumber],
				        "FW Quarter", [FW Quarter],
				        "FW YearQuarterNumber", [FW YearQuarterNumber],
				        "FW Quarter Year", [FW Quarter Year],
				        "FW MonthNumber", [FW MonthNumber],
				        "FW Month", [FW Month],
				        "FW YearMonthNumber", [FW YearMonthNumber],
				        "FW Month Year", [FW Month Year],
				        "FW WeekNumber", [FW WeekNumber],
				        "FW Week", [FW Week],
				        "FW PeriodNumber", [FW PeriodNumber],
				        "FW Period", [FW Period],
				        "FW YearWeekNumber", [FW YearWeekNumber],
				        "FW Week Year", [FW Week Year],
				        "FW StartOfWeek", [FW StartOfWeek],
				        "FW EndOfWeek", [FW EndOfWeek],
				        "FW RelativeWeekPos", [FW RelativeWeekPos],
				        "FW RelativeMonthPos", [FW RelativeMonthPos],
				        "FW RelativeQuarterPos", [FW RelativeQuarterPos],
				        "FW RelativeYearPos", [FW RelativeYearPos],
				        "FW StartOfMonth", [FW StartOfMonth],
				        "FW EndOfMonth", [FW EndOfMonth],
				        "FW StartOfQuarter", [FW StartOfQuarter],
				        "FW EndOfQuarter", [FW EndOfQuarter],
				        "FW StartOfYear", [FW StartOfYear],
				        "FW EndOfYear", [FW EndOfYear],
				        "FW MonthDays", [FW MonthDays],
				        "FW QuarterDays", [FW QuarterDays],
				        "FW YearDays", [FW YearDays],
				        "FW DayOfMonthNumber", [FW DayOfMonthNumber],
				        "FW DayOfQuarterNumber", [FW DayOfQuarterNumber],
				        "FW DayOfYearNumber", [FW DayOfYearNumber],
				        "FW DatePreviousWeek", [FW DatePreviousWeek],
				        "FW DatePreviousMonth", [FW DatePreviousMonth],
				        "FW DatePreviousQuarter", [FW DatePreviousQuarter],
				        "FW DatePreviousYear", [FW DatePreviousYear],
				
				        -- Holidays and working days
				        "Holiday Name", [Holiday Name],
				        "IsWorkingDay", [IsWorkingDay],
				        "Day Type", [Day Type]    
				    )
				RETURN 
				    Result
				```

	annotation PBI_Id = 7ae3c9341b574049be9f01c943c0a77e

