table 'Date Ref'
	isHidden
	lineageTag: 0e1c9f84-ea79-4e20-92c1-b984e0358554

	column Date
		isHidden
		formatString: Short Date
		lineageTag: 4666d4f3-7251-4b69-ae50-be61839b0b2f
		summarizeBy: none
		isNameInferred
		sourceColumn: [Date]

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column DateKey
		isHidden
		formatString: 0
		lineageTag: 64a02a6f-f3ef-44fb-948d-e2d53ed66a26
		summarizeBy: count
		isNameInferred
		sourceColumn: [DateKey]

		annotation SummarizationSetBy = Automatic

	column 'Day of Month'
		isHidden
		formatString: 0
		lineageTag: 91ea66ae-08f0-4219-b59e-56a5c87ccf08
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Day of Month]

		annotation SummarizationSetBy = Automatic

	column WeekDayNumber
		isHidden
		formatString: 0
		lineageTag: a06fbfcc-b0d2-40b4-b364-30a2b9454074
		summarizeBy: sum
		isNameInferred
		sourceColumn: [WeekDayNumber]

		annotation SummarizationSetBy = Automatic

	column 'Week Day'
		isHidden
		lineageTag: 9d10b1cf-614b-4644-b34e-abee5c3fa5cc
		summarizeBy: none
		isNameInferred
		sourceColumn: [Week Day]

		annotation SummarizationSetBy = Automatic

	column Sequential365DayNumber
		isHidden
		formatString: 0
		lineageTag: 1cee4726-830e-49f8-9a3f-f33870f401b0
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Sequential365DayNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearNumber'
		isHidden
		formatString: 0
		lineageTag: 73bc767f-69cc-4467-929a-81aa5c877bd7
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Year'
		isHidden
		lineageTag: bc0ea52b-eb0c-40ff-9bbd-429701460eef
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Year]

		annotation SummarizationSetBy = Automatic

	column 'Calendar QuarterNumber'
		isHidden
		lineageTag: a8ebc4ef-c725-41a2-9a0d-3b71c849a2af
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar QuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar Quarter'
		isHidden
		lineageTag: a4ba902a-2adb-41e7-bb68-18a820a6888d
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Quarter]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearQuarterNumber'
		isHidden
		lineageTag: a7e8a222-5820-4066-a52a-989b347dea41
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearQuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar Quarter Year'
		isHidden
		lineageTag: 82a591c4-c555-43a6-b57d-6a3eb6226605
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Quarter Year]

		annotation SummarizationSetBy = Automatic

	column 'Calendar MonthNumber'
		isHidden
		formatString: 0
		lineageTag: ba6e1833-8e35-4ab3-a564-3577aaadf673
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar MonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Month'
		isHidden
		lineageTag: 0979286f-e785-421d-8945-9429cb954419
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Month]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearMonthNumber'
		isHidden
		formatString: 0
		lineageTag: 3dac2be2-58a3-479e-9569-3f2745b8f2ac
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Month Year'
		isHidden
		lineageTag: f21d35d7-ccee-4097-b9af-bb4290c69714
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Month Year]

		annotation SummarizationSetBy = Automatic

	column 'Calendar WeekNumber'
		isHidden
		formatString: 0
		lineageTag: 7d309531-4f43-4c51-b45e-4fc4f3eb6af5
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar WeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Week'
		isHidden
		lineageTag: bc0a9230-8b07-4069-af83-5d49bb3e1e82
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Week]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearWeekNumber'
		isHidden
		formatString: 0
		lineageTag: e0fcfb6d-f200-42cf-b86a-adaa8856ad9e
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearWeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar Week Year'
		isHidden
		lineageTag: 0e00f129-f1be-46e1-afbb-4e51ec6810b4
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar Week Year]

		annotation SummarizationSetBy = Automatic

	column 'Calendar WeekYearOrder'
		isHidden
		formatString: 0
		lineageTag: b9fd61e4-6b14-4551-a0c8-8cefbf3cbdab
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar WeekYearOrder]

		annotation SummarizationSetBy = Automatic

	column 'Calendar RelativeWeekPos'
		isHidden
		lineageTag: a7b1fada-68e5-4264-b0af-5ff40448faf2
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar RelativeWeekPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar RelativeMonthPos'
		isHidden
		lineageTag: 9141c455-993c-47e9-98c3-4625421f6383
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar RelativeMonthPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar RelativeQuarterPos'
		isHidden
		lineageTag: 575b5442-b77d-4204-b392-17009d9aafbc
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar RelativeQuarterPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar RelativeYearPos'
		isHidden
		lineageTag: fac47f9b-6fa8-4b8c-be22-baa321b44cf8
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar RelativeYearPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Calendar StartOfMonth'
		isHidden
		formatString: Short Date
		lineageTag: 0eb37113-4550-4a63-97b3-ffc2c91eadfd
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar StartOfMonth]

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column 'Calendar EndOfMonth'
		isHidden
		formatString: General Date
		lineageTag: dee6b606-43c0-4add-a0e5-90dcd204fa90
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar EndOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'Calendar StartOfQuarter'
		isHidden
		formatString: Short Date
		lineageTag: c54ed694-a0f7-4b4d-828d-edd5c3996723
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar StartOfQuarter]

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column 'Calendar EndOfQuarter'
		isHidden
		formatString: General Date
		lineageTag: f2e11510-b411-49ab-bfed-c6a6ba4cb1e9
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar EndOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Calendar StartOfYear'
		isHidden
		formatString: Short Date
		lineageTag: 81f8f30c-e2de-4328-9943-7b53111a09ea
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar StartOfYear]

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column 'Calendar EndOfYear'
		isHidden
		formatString: General Date
		lineageTag: 5c3dbeb1-1ea8-4f85-b302-54740cba41dc
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar EndOfYear]

		annotation SummarizationSetBy = Automatic

	column 'Calendar MonthDays'
		isHidden
		formatString: 0
		lineageTag: 8eeccd75-a728-4f46-92a9-be92102399df
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar MonthDays]

		annotation SummarizationSetBy = Automatic

	column 'Calendar QuarterDays'
		isHidden
		formatString: 0
		lineageTag: c9e7a210-a1ec-46a4-bca5-259bc9c21e5d
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar QuarterDays]

		annotation SummarizationSetBy = Automatic

	column 'Calendar YearDays'
		isHidden
		formatString: 0
		lineageTag: 31fa49c1-5777-4f64-9ca1-5a00b05a063b
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar YearDays]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DayOfMonthNumber'
		isHidden
		formatString: 0
		lineageTag: 233466f9-49a0-45a6-90e8-f93d6b979bca
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar DayOfMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DayOfQuarterNumber'
		isHidden
		formatString: 0
		lineageTag: 5cf05a69-e86a-4f00-8c06-82dc147db8cf
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar DayOfQuarterNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DayOfYearNumber'
		isHidden
		formatString: 0
		lineageTag: 6171a210-e896-48ba-a332-170338bf49b0
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Calendar DayOfYearNumber]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DatePreviousWeek'
		isHidden
		formatString: General Date
		lineageTag: de6d3e93-abc3-4d56-8b7a-9d55984ed56f
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar DatePreviousWeek]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DatePreviousMonth'
		isHidden
		formatString: General Date
		lineageTag: c4544dd2-0aba-4f22-b1c7-427acde220b2
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar DatePreviousMonth]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DatePreviousQuarter'
		isHidden
		formatString: General Date
		lineageTag: 0a48b810-b7ab-484d-9567-25665852cca8
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar DatePreviousQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Calendar DatePreviousYear'
		isHidden
		formatString: General Date
		lineageTag: 50cce5ec-cefc-4e6c-a57e-30c6a814723f
		summarizeBy: none
		isNameInferred
		sourceColumn: [Calendar DatePreviousYear]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Year'
		isHidden
		lineageTag: 6b106ec8-20dd-43db-8f87-c187cab0897b
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Year]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearNumber'
		isHidden
		formatString: 0
		lineageTag: 9658e4c0-1727-4608-9055-64f2bf654b7b
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal QuarterNumber'
		isHidden
		lineageTag: 282bdcff-97c0-41ee-99cf-4721580c49b5
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal QuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal Quarter'
		isHidden
		lineageTag: 19ba65e2-5819-4dc8-99d6-67a3be0c1915
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Quarter]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearQuarterNumber'
		isHidden
		lineageTag: 0d2ba961-506b-48b0-84d9-e442bbd959b0
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearQuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal Quarter Year'
		isHidden
		lineageTag: 66424fe4-dfea-4e29-9cf7-9368b99939d2
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Quarter Year]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal MonthNumber'
		isHidden
		formatString: 0
		lineageTag: 3c9281be-e079-4dc0-9879-e6b0152b9dda
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal MonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal MonthInQuarterNumber'
		isHidden
		formatString: 0
		lineageTag: aa253c7c-48ac-4be5-93f7-14a8e91b01bb
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal MonthInQuarterNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Month'
		isHidden
		lineageTag: 59c17ae4-e375-4b9a-ac6e-0a7db56ec327
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Month]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearMonthNumber'
		isHidden
		formatString: 0
		lineageTag: c1168e25-c0b1-4e5e-b970-f846df6bca9b
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Month Year'
		isHidden
		lineageTag: ae68a704-094d-4bb1-9a85-13f5fbd51f8a
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Month Year]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal WeekNumber'
		isHidden
		formatString: 0
		lineageTag: ea5142b9-d7f6-499f-8d01-fb3fb7f8ea4e
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal WeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Week'
		isHidden
		lineageTag: 55601f84-fcd2-42b6-8cd7-1779dff535cb
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Week]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearWeekNumber'
		isHidden
		formatString: 0
		lineageTag: 6e967ad6-523c-4730-b61b-ef1c064e2e02
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearWeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal Week Year'
		isHidden
		lineageTag: 7beafcf3-2914-4934-8f6c-67e9bb946f51
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal Week Year]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal WeekYearOrder'
		isHidden
		formatString: 0
		lineageTag: fef27f69-e761-40ea-9803-88691170ffe5
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal WeekYearOrder]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal RelativeWeekPos'
		isHidden
		lineageTag: eb0e340d-b446-42bc-835f-999ce79f1805
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal RelativeWeekPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal RelativeMonthPos'
		isHidden
		lineageTag: 8889924b-23dc-4726-8238-7dd94fbb8284
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal RelativeMonthPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal RelativeQuarterPos'
		isHidden
		lineageTag: da7f1da2-85c8-4fc4-8520-d96aecafca3a
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal RelativeQuarterPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal RelativeYearPos'
		isHidden
		lineageTag: 5bd5390f-95bc-4a07-9b09-70bbc49e7845
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal RelativeYearPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fiscal StartOfMonth'
		isHidden
		formatString: General Date
		lineageTag: 30da6f82-bba4-44fa-b294-acc0ad4db317
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal StartOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal EndOfMonth'
		isHidden
		formatString: General Date
		lineageTag: 14345e09-899a-434e-81ac-0e55e2a391cb
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal EndOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal StartOfQuarter'
		isHidden
		formatString: General Date
		lineageTag: 2c6b623d-0251-4daa-ada9-31e53b77ad02
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal StartOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal EndOfQuarter'
		isHidden
		formatString: General Date
		lineageTag: 2675b114-34b3-4097-9c65-8328cc64c13c
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal EndOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal StartOfYear'
		isHidden
		formatString: General Date
		lineageTag: d94dacb3-b8f2-4280-95f3-ab737d742677
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal StartOfYear]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal EndOfYear'
		isHidden
		formatString: General Date
		lineageTag: 8979d70b-e8ea-4795-a5d0-f35ecb029b55
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal EndOfYear]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal MonthDays'
		isHidden
		formatString: 0
		lineageTag: 83e783b3-17c1-4af4-b19b-0da299a1442c
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal MonthDays]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal QuarterDays'
		isHidden
		formatString: 0
		lineageTag: 454e8af7-05de-41f0-b3eb-16c7e8fb3315
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal QuarterDays]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal YearDays'
		isHidden
		formatString: 0
		lineageTag: b52fbb84-851c-4449-8434-35f78c6b5ddd
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal YearDays]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DayOfMonthNumber'
		isHidden
		formatString: 0
		lineageTag: f7ae54d4-32b4-4aa8-b1b8-fa3b2b7eb4cb
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal DayOfMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DayOfQuarterNumber'
		isHidden
		formatString: 0
		lineageTag: ba5a6d2c-4f5c-406d-85f6-95676742b487
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal DayOfQuarterNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DayOfYearNumber'
		isHidden
		formatString: 0
		lineageTag: 38fc62ad-4500-40cf-811a-5632489c4d48
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Fiscal DayOfYearNumber]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DatePreviousWeek'
		isHidden
		formatString: General Date
		lineageTag: 1ba884ba-ff55-4538-b23a-4965b94606e8
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal DatePreviousWeek]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DatePreviousMonth'
		isHidden
		formatString: General Date
		lineageTag: 0b22dd5d-5285-47f7-a8a0-133e29c46abd
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal DatePreviousMonth]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DatePreviousQuarter'
		isHidden
		formatString: General Date
		lineageTag: 18b22fbc-70c2-4028-b5fe-e449987ef6d9
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal DatePreviousQuarter]

		annotation SummarizationSetBy = Automatic

	column 'Fiscal DatePreviousYear'
		isHidden
		formatString: General Date
		lineageTag: 3151640d-9d9f-43cb-b4b5-504e4c532fdc
		summarizeBy: none
		isNameInferred
		sourceColumn: [Fiscal DatePreviousYear]

		annotation SummarizationSetBy = Automatic

	column 'FW YearNumber'
		isHidden
		formatString: 0
		lineageTag: f7baf6a8-21a6-4716-b84b-6bd1bf697ccd
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW Year'
		isHidden
		lineageTag: 12f876c6-8050-4e17-82f1-e193ffb809e8
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Year]

		annotation SummarizationSetBy = Automatic

	column 'FW QuarterNumber'
		isHidden
		lineageTag: 20432951-b329-4a19-aebe-eb16d49de0d1
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW QuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Quarter'
		isHidden
		lineageTag: 61b0dd3d-6d32-4732-a245-b0e32ebe5443
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Quarter]

		annotation SummarizationSetBy = Automatic

	column 'FW YearQuarterNumber'
		isHidden
		lineageTag: a5eaf854-bde2-487f-83d2-e402ef2cdfef
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearQuarterNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Quarter Year'
		isHidden
		lineageTag: 182680b8-8080-4b05-8b35-242e64368caf
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Quarter Year]

		annotation SummarizationSetBy = Automatic

	column 'FW MonthNumber'
		isHidden
		lineageTag: f93a07b6-8968-4f2c-8784-14ae35789d6c
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW MonthNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Month'
		isHidden
		lineageTag: 2a4d4eb3-0605-41b0-9ac0-f14c4e1174fe
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Month]

		annotation SummarizationSetBy = Automatic

	column 'FW YearMonthNumber'
		isHidden
		lineageTag: eeeb8423-06f2-47ec-a002-b7a7073e3ab1
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearMonthNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Month Year'
		isHidden
		lineageTag: f3c8e5a0-8456-4802-8d70-15bea1d0d17a
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Month Year]

		annotation SummarizationSetBy = Automatic

	column 'FW WeekNumber'
		isHidden
		formatString: 0
		lineageTag: 4a5b7796-c105-4e63-b323-f830121314c3
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW WeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW Week'
		isHidden
		lineageTag: a0a246d2-4960-4269-8d50-21aeb3c75309
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Week]

		annotation SummarizationSetBy = Automatic

	column 'FW PeriodNumber'
		isHidden
		lineageTag: c6f25a70-7d0e-4f37-84ba-68d64a9622b1
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW PeriodNumber]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW Period'
		isHidden
		lineageTag: 8e6d84ab-c0cd-4488-9606-f916d01cfbc4
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Period]

		annotation SummarizationSetBy = Automatic

	column 'FW YearWeekNumber'
		isHidden
		formatString: 0
		lineageTag: c6cf0ee2-a47f-49de-818d-55e8cec021e7
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearWeekNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW Week Year'
		isHidden
		lineageTag: 37bf2b68-3a78-498d-948e-112e9061a8ca
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW Week Year]

		annotation SummarizationSetBy = Automatic

	column 'FW StartOfWeek'
		isHidden
		formatString: General Date
		lineageTag: 711c6fbf-0850-491e-868a-a8657b738318
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW StartOfWeek]

		annotation SummarizationSetBy = Automatic

	column 'FW EndOfWeek'
		isHidden
		formatString: General Date
		lineageTag: 06d9fdfd-0bfb-4df9-b2cd-c432a9ba5b1a
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW EndOfWeek]

		annotation SummarizationSetBy = Automatic

	column 'FW RelativeWeekPos'
		isHidden
		lineageTag: 8f0c50c6-a4ac-429d-937e-bcc2e02d67dd
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW RelativeWeekPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW RelativeMonthPos'
		isHidden
		lineageTag: 3cab95d4-39c1-4c46-a3f7-8937fe3ef757
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW RelativeMonthPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW RelativeQuarterPos'
		isHidden
		lineageTag: 15d7ce62-e17f-4f1a-b5f9-c7931622360a
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW RelativeQuarterPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW RelativeYearPos'
		isHidden
		lineageTag: 32419680-6717-490a-b35a-39a576179b37
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW RelativeYearPos]

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'FW StartOfMonth'
		isHidden
		formatString: General Date
		lineageTag: 43cf82d2-0233-475e-86f5-701e2a893736
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW StartOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'FW EndOfMonth'
		isHidden
		formatString: General Date
		lineageTag: efee34f1-5c02-44f5-9cb0-53a09e6bca8f
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW EndOfMonth]

		annotation SummarizationSetBy = Automatic

	column 'FW StartOfQuarter'
		isHidden
		formatString: General Date
		lineageTag: 9329ab39-1f09-4ede-9ad2-bd03f8ba3ed5
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW StartOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'FW EndOfQuarter'
		isHidden
		formatString: General Date
		lineageTag: 521b039a-f57b-4cf4-a969-44f787f7ca27
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW EndOfQuarter]

		annotation SummarizationSetBy = Automatic

	column 'FW StartOfYear'
		isHidden
		formatString: General Date
		lineageTag: 5613569d-610e-44b1-a0b3-fe2d7ff3858f
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW StartOfYear]

		annotation SummarizationSetBy = Automatic

	column 'FW EndOfYear'
		isHidden
		formatString: General Date
		lineageTag: 13d7b5bb-9abf-454c-9a99-52ff526b43f5
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW EndOfYear]

		annotation SummarizationSetBy = Automatic

	column 'FW MonthDays'
		isHidden
		formatString: 0
		lineageTag: 90e198d0-dc6e-4b8a-a679-310debdec2ae
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW MonthDays]

		annotation SummarizationSetBy = Automatic

	column 'FW QuarterDays'
		isHidden
		formatString: 0
		lineageTag: 3f1b8590-833a-4c24-971a-e13b5a27509b
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW QuarterDays]

		annotation SummarizationSetBy = Automatic

	column 'FW YearDays'
		isHidden
		formatString: 0
		lineageTag: f264a596-4367-472e-85f1-9634a5c9cc9e
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW YearDays]

		annotation SummarizationSetBy = Automatic

	column 'FW DayOfMonthNumber'
		isHidden
		formatString: 0
		lineageTag: 843d6f46-372e-41b5-963d-58784c0bafff
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW DayOfMonthNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW DayOfQuarterNumber'
		isHidden
		formatString: 0
		lineageTag: 097b01aa-4eff-4bd3-98a2-58511795adab
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW DayOfQuarterNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW DayOfYearNumber'
		isHidden
		formatString: 0
		lineageTag: 1cea7939-b4fd-4bf2-909f-31105e046960
		summarizeBy: sum
		isNameInferred
		sourceColumn: [FW DayOfYearNumber]

		annotation SummarizationSetBy = Automatic

	column 'FW DatePreviousWeek'
		isHidden
		formatString: General Date
		lineageTag: 8559d6b1-d3f1-456a-bc75-8dce28979e75
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW DatePreviousWeek]

		annotation SummarizationSetBy = Automatic

	column 'FW DatePreviousMonth'
		isHidden
		formatString: General Date
		lineageTag: d9170751-56db-47ed-a0db-6099b0d8e8c7
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW DatePreviousMonth]

		annotation SummarizationSetBy = Automatic

	column 'FW DatePreviousQuarter'
		isHidden
		formatString: General Date
		lineageTag: 81a75bc6-e34d-42fc-8d82-792259f7b406
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW DatePreviousQuarter]

		annotation SummarizationSetBy = Automatic

	column 'FW DatePreviousYear'
		isHidden
		formatString: General Date
		lineageTag: 6645598b-68f5-4504-ac6d-c9bc6769c671
		summarizeBy: none
		isNameInferred
		sourceColumn: [FW DatePreviousYear]

		annotation SummarizationSetBy = Automatic

	column 'Holiday Name'
		isHidden
		lineageTag: 638bf629-f169-45ab-a092-b1cf8dad5dca
		summarizeBy: none
		isNameInferred
		sourceColumn: [Holiday Name]

		annotation SummarizationSetBy = Automatic

	column IsWorkingDay
		isHidden
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 409aafa5-b73a-4b68-a4d5-41893abd5802
		summarizeBy: none
		isNameInferred
		sourceColumn: [IsWorkingDay]

		annotation SummarizationSetBy = Automatic

	column 'Day Type'
		isHidden
		lineageTag: 462596c3-156c-458d-9262-8b9966096708
		summarizeBy: none
		isNameInferred
		sourceColumn: [Day Type]

		annotation SummarizationSetBy = Automatic

	column DateWithSales = ```
			
			'Date Ref'[Date]
			    <= MAXX (
			        {
			            MAX ( 'Sales Lines'[quoteValidUntilDate] ),
			            MAX ( 'Sales Lines'[Order Date] ),
			            MAX ( 'Sales Lines'[Document Date] ),
			            MAX ( 'Sales Lines'[Due Date] ),
			            MAX ( 'Sales Lines'[Shipment Date] ),
			            MAX ( 'Sales Lines'[Planned Shipment Date] ),
			            MAX ( 'Sales Lines'[Planned Delivery Date] ),
			            MAX ( 'Sales Lines'[Requested Delivery Date] ),
			            MAX ( 'Sales Lines'[Promised Delivery Date] ),
			            MAX ( 'Sales Lines'[Posting Date] ),
			            MAX ( 'Sales Value Entries'[documentDate] ),
			            MAX ( 'Sales Value Entries'[postingDate] )
			        },
			        [Value]
			    )
			&& 'Date Ref'[Date]
			    >= MINX ({
			            MIN ( 'Sales Lines'[quoteValidUntilDate] ),
			            MIN ( 'Sales Lines'[Order Date] ),
			            MIN ( 'Sales Lines'[Document Date] ),
			            MIN ( 'Sales Lines'[Due Date] ),
			            MIN ( 'Sales Lines'[Shipment Date] ),
			            MIN ( 'Sales Lines'[Planned Shipment Date] ),
			            MIN ( 'Sales Lines'[Planned Delivery Date] ),
			            MIN ( 'Sales Lines'[Requested Delivery Date] ),
			            MIN ( 'Sales Lines'[Promised Delivery Date] ),
			            MIN ( 'Sales Lines'[Posting Date] ),
			            MIN ( 'Sales Value Entries'[documentDate] ),
			            MIN ( 'Sales Value Entries'[postingDate] )
			        },
			        [Value]
			    )
			
			```
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: a2b07ccb-04c0-4bb5-91f6-ba2fb205e0c8
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column 'Relative Day'
		formatString: 0
		lineageTag: 45705e24-9371-48d8-adfc-a0e1e98a2fb2
		summarizeBy: sum
		isNameInferred
		sourceColumn: [Relative Day]

		annotation SummarizationSetBy = Automatic

	partition 'Date Ref-17d7e050-69ce-412b-b68e-30ef7cdc8fcf' = calculated
		mode: import
		source = ```
				
				------------------------------------------------------------
				--
				-- Configuration
				--
				------------------------------------------------------------
				VAR TodayReference = VALUES('Date Table Setup'[Today]) -- Change this if you need to use another date as a reference "current" day
				
				// Based on the first and last dates in the main fact table
				VAR FirstYear = YEAR(VALUES('Date Table Setup'[dateTblStart]))
				VAR LastYear = YEAR(VALUES('Date Table Setup'[dateTblEnd]))
				
				// For Fiscal 52-53 weeks (start depends on rules) and Gregorian (starts on the first of the month) 
				VAR FiscalCalendarFirstMonth = VALUES('Date Table Setup'[fiscalCalendarFirstMonth])
				
				// Use: 0 - Sunday, 1 - Monday, 2 - Tuesday, ... 5 - Friday, 6 - Saturday
				VAR FirstDayOfWeek = VALUES('Date Table Setup'[First Day of Week]) 
				
				VAR TypeStartFiscalYear = 1 -- Fiscal year as Calendar Year of : 0 - First day of fiscal year, 1 - Last day of fiscal year
				
				VAR IsoCountryHolidays = VALUES('Date Table Setup'[isoCountryHolidays]) -- Use only supported ISO countries or "" for no holidays
				
				VAR WeeklyType = COALESCE(VALUES('Date Table Setup'[weeklyType]), "Nearest") -- Supports only "Nearest", or "Last"
				
				VAR QuarterWeekType = COALESCE(VALUES('Date Table Setup'[quarterWeekType]),"445") -- Supports only "445", "454", and "544"
				
				VAR CalendarRange = VALUES('Date Table Setup'[calendarRange]) -- Supports "Calendar", "FiscalGregorian", "FiscalWeekly"
				-- Last:    for last weekday of the month at fiscal year end
				-- Nearest: for last weekday nearest the end of month 
				-- Reference for Last/Nearest definition: https://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar)
				--
				-- For ISO calendar use 
				--   FiscalCalendarFirstMonth = 1 (ISO always starts in January)
				--   FirstDayOfWeek = 1           (ISO always starts on Monday)
				--   WeeklyType = "Nearest"       (ISO use the nearest week type algorithm)
				-- For US with last Saturday of the month at fiscal year end
				--   FirstDayOfWeek = 0           (US weeks start on Sunday)
				--   WeeklyType = "Last"
				-- For US with last Saturday nearest the end of month
				--   FirstDayOfWeek = 0           (US weeks start on Sunday)
				--   WeeklyType = "Nearest"
				--
				------------------------------
				VAR CalendarGregorianPrefix = VALUES('Date Table Setup'[calendarPrefix]) -- Prefix used in columns of standard Gregorian calendar
				VAR FiscalGregorianPrefix = VALUES('Date Table Setup'[fiscalGregorianPrefix]) -- Prefix used in columns of fiscal Gregorian calendar
				VAR FiscalWeeklyPrefix = VALUES('Date Table Setup'[fiscalWeeklyPrefix]) -- Prefix used in columns of fiscal weekly calendar
				VAR WorkingDayType = "Working day" -- Description for working days
				VAR NonWorkingDayType = "Non-working day" -- Description for non-working days
				------------------------------
				VAR WeeklyCalendarType = "Weekly" -- Supports "Weekly", "Custom"
				-- Set the working days - 0 = Sunday, 1 = Monday, ... 6 = Saturday
				VAR WorkingDays = VALUES('Working Days')
				
				
				-- Use CustomFiscalPeriods in case you need arbitrary definition of weekly fiscal years 
				-- Set "UseCustomFiscalPeriods" to TRUE in order to use CustomFiscalPeriods 
				VAR UseCustomFiscalPeriods = FALSE
				-- Set "IgnoreWeeklyFiscalPeriods" to TRUE in order to ignore the WeeklyFiscalPeriods
				-- You should set IgnoreWeeklyFiscalPeriods to TRUE only when UseCustomFiscalPeriods is TRUE, too
				VAR IgnoreWeeklyFiscalPeriods = FALSE
				-- Include here your own definition of custom fiscal periods
				VAR CustomFiscalPeriods =
				    FILTER ( 
				        DATATABLE (
				            "Fiscal YearNumber", INTEGER,
				            "FirstDayOfYear", DATETIME,
				            "LastDayOfYear", DATETIME,
				            {
				                -- IMPORTANT!!! The first day of each year must be a weekday corresponding to the definition of FirstDayOfWeek
				                --              If you want to use this table, remember to set the UseCustomFiscalPeriods variable to TRUE
				                --              If the IgnoreWeeklyFiscalPeriods is TRUE, there are no warnings in case the FirstDayOfWeek 
				                --              does not match the first day of the year 
				                { 2016, "2015-06-28", "2016-07-02" },
				                { 2017, "2016-07-03", "2017-07-01" },
				                { 2018, "2017-07-02", "2018-06-30" },
				                { 2019, "2018-07-01", "2019-06-29" }
				            }
				        ),
				        UseCustomFiscalPeriods
				    )
				
				------------------------------------------------------------
				--  
				-- End of General Configuration
				--
				------------------------------------------------------------
				--  
				-- The following variables define specific parameters 
				-- for calendars - you should modify them only to 
				-- change configuration of specific countries, translate 
				-- names of holidays, or to add configuration for other 
				-- countries
				--
				------------------------------------------------------------
				VAR InLieuOf_prefix = "(in lieu of " -- prefix of substitute holidays
				VAR InLieuOf_suffix = ")" -- suffix of substitute holidays
				VAR HolidayParameters =
				    DATATABLE (
				        "ISO Country", STRING,
				        -- ISO country code (to enable filter based on country)
				        "MonthNumber", INTEGER,
				        -- Number of month - use 99 for relative dates using Easter as a reference
				        "DayNumber", INTEGER,
				        -- Absolute day (ignore WeekDayNumber, otherwise use 0)
				        "WeekDayNumber", INTEGER,
				        -- 0 = Sunday, 1 = Monday, ... , 7 = Saturday
				        "OffsetWeek", INTEGER,
				        -- 1 = first, 2 = second, ... -1 = last, -2 = second-last, ...
				        "OffsetDays", INTEGER,
				        -- days to add after offsetWeek and WeekDayNumber have been applied
				        "HolidayName", STRING,
				        -- Holiday name 
				        "SubstituteHoliday", INTEGER,
				        -- 0 = no substituteHoliday, 1 = substitute holiday with next working day, 2 = substitute holiday with next working day 
				        -- (use 2 before 1 only, e.g. Christmas = 2, Boxing Day = 1)
				        -- -1 = if it falls on a Saturday then it is observed on Friday, if it falls on a Sunday then it is observed on Monday
				        "ConflictPriority", INTEGER,
				        -- Priority in case of two or more holidays in the same date - lower number --> higher priority
				        -- For example: marking Easter relative days with 150 and other holidays with 100 means that other holidays take 
				        --              precedence over Easter-related days; use 50 for Easter related holidays to invert such a priority
				        "FirstYear", INTEGER,
				        -- First year for the holiday, 0 if it is not defined
				        "LastYear", INTEGER,
				        -- Last year for the holiday, 0 if it is not defined
				        {
				            --
				            -- US = United States
				            { "US", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "US", 1, 0, 1, 3, 0, "Martin Luther King, Jr.", 0, 100, 0, 0 },
				            { "US", 2, 0, 1, 3, 0, "Presidents' Day", 0, 100, 0, 0 },
				            // aka Washington's Birthday
				            { "US", 5, 0, 1, -1, 0, "Memorial Day", 0, 100, 0, 0 },
				            { "US", 6, 19, 0, 0, 0, "Juneteenth", -1, 100, 2021, 0 },
				            { "US", 7, 4, 0, 0, 0, "Independence Day", 0, 100, 0, 0 },
				            { "US", 9, 0, 1, 1, 0, "Labor Day", 0, 100, 0, 0 },
				            { "US", 10, 0, 1, 2, 0, "Columbus Day", 0, 100, 0, 0 },
				            { "US", 11, 11, 0, 0, 0, "Veterans Day", 0, 100, 0, 0 },
				            { "US", 11, 0, 4, 4, 0, "Thanksgiving Day", 0, 100, 0, 0 },
				            { "US", 11, 0, 4, 4, 1, "Black Friday", 0, 100, 0, 0 },
				            { "US", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            -- 
				            -- The following countries are in alphabetical order (by ISO Code)
				            --
				            
				            --
				            -- AT = Austria
				            { "AT", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "AT", 1, 6, 0, 0, 0, "Epiphany", 0, 100, 0, 0 },
				            { "AT", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "AT", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "AT", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "AT", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "AT", 99, 60, 0, 0, 0, "Corpus Christi", 0, 50, 0, 0 },
				            { "AT", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "AT", 10, 26, 0, 0, 0, "National Day", 0, 100, 0, 0 },
				            { "AT", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "AT", 12, 8, 0, 0, 0, "Immaculate Conception Day", 0, 100, 0, 0 },
				            { "AT", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "AT", 12, 26, 0, 0, 0, "St. Stephen's Day", 0, 100, 0, 0 },
				            --
				            -- AU = Australia
				            { "AU", 1, 1, 0, 0, 0, "New Year's Day", 1, 100, 0, 0 },
				            { "AU", 1, 26, 0, 0, 0, "Australia Day", 1, 100, 0, 0 },
				            { "AU", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "AU", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "AU", 4, 25, 0, 0, 0, "Anzac Day", 1, 100, 0, 0 },
				            { "AU", 12, 25, 0, 0, 0, "Christmas Day", 2, 100, 0, 0 },
				            { "AU", 12, 26, 0, 0, 0, "Boxing Day", 1, 100, 0, 0 },
				            --
				            -- BE = Belgium
				            { "BE", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "BE", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "BE", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "BE", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "BE", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "BE", 7, 21, 0, 0, 0, "Belgian National DayDay", 0, 100, 0, 0 },
				            { "BE", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "BE", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "BE", 11, 11, 0, 0, 0, "Armistice Day", 0, 100, 0, 0 },
				            { "BE", 12, 25, 0, 0,0, "Christmas Day", 0, 100, 0, 0 },
				            --
				            -- CA = Canada (include only nationwide and Thanksgiving)
				            { "CA", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "CA", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "CA", 7, 1, 0, 0, 0, "Canada Day", 0, 100, 0, 0 },
				            { "CA", 9, 0, 1, 1, 0, "Labour Day", 0, 100, 0, 0 },
				            { "CA", 10, 0, 1, 2, 0, "Thanksgiving", 0, 100, 0, 0 },
				            { "CA", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            --
				            -- DE = Germany
				            { "DE", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "DE", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "DE", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "DE", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "DE", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "DE", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "DE", 10, 3, 0, 0, 0, "German Unity Day", 0, 100, 0, 0 },
				            { "DE", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "DE", 12, 26, 0, 0, 0, "St. Stephen's Day", 0, 100, 0, 0 },
				            --
				            -- ES = Spain
				            { "ES", 1, 1, 0, 0,0,  "New Year's Day", 0, 100, 0, 0 },
				            { "ES", 1, 6, 0, 0, 0, "Epiphany", 0, 100, 0, 0 },
				            { "ES", 99, -3, 0, 0, 0, "Maundy Thursday", 0, 50, 0, 0 },
				            // Except Catalonia
				            { "ES", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "ES", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            // Belearic Islands, Basque Country, Catalonia, La Rioja, Navarra and Valenciana only
				            { "ES", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "ES", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "ES", 10, 12, 0, 0, 0, "Fiesta Navional de España", 0, 100, 0, 0 },
				            { "ES", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "ES", 12, 6, 0, 0, 0, "Constitution Day", 0, 100, 0, 0 },
				            { "ES", 12, 8, 0, 0, 0, "Immaculate Conception", 0, 100, 0, 0 },
				            { "ES", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            --
				            -- FR = France
				            { "FR", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "FR", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "FR", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "FR", 5, 8, 0, 0, 0, "Victor in Europe Day", 0, 100, 0, 0 },
				            { "FR", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "FR", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "FR", 7, 14, 0, 0, 0, "Bastille Day", 0, 100, 0, 0 },
				            { "FR", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "FR", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "FR", 11, 11, 0, 0, 0, "Armistice Day", 0, 100, 0, 0 },
				            { "FR", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            --
				            -- GB = England (different configuration in Scotland and Northern Ireland)
				            { "GB", 1, 1, 0, 0, 0, "New Year's Day", 1, 100, 0, 0 },
				            { "GB", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "GB", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "GB", 5, 0, 1, 1, 0, "May Day Bank Holiday", 0, 100, 0, 0 },
				            { "GB", 5, 0, 1, -1, 0, "Spring Bank Holiday", 0, 100, 0, 0 },
				            { "GB", 8, 0, 1, -1, 0, "Late Summer Bank Holiday", 0, 100, 0, 0 },
				            { "GB", 12, 25, 0, 0, 0, "Christmas Day", 2, 100, 0, 0 },
				            { "GB", 12, 26, 0, 0, 0, "Boxing Day", 1, 100, 0, 0 },
				            --
				            -- IT = Italy
				            { "IT", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "IT", 1, 6, 0, 0, 0, "Epiphany", 0, 100, 0, 0 },
				            { "IT", 99, 1, 0, 0, 0, "Easter Monday", 0, 100, 0, 0 },
				            { "IT", 4, 25, 0, 0, 0, "Liberation Day", 0, 100, 0, 0 },
				            { "IT", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "IT", 6, 2, 0, 0, 0, "Republic Day", 0, 100, 0, 0 },
				            { "IT", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "IT", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "IT", 12, 8, 0, 0, 0, "Immaculate Conception", 0, 100, 0, 0 },
				            { "IT", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "IT", 12, 26, 0, 0, 0, "St. Stephen's Day", 0, 100, 0, 0 },
				            --
				            -- NL = The Netherlands
				            { "NL", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "NL", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "NL", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "NL", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "NL", 4, 27, 0, 0, 0, "King's Day", 0, 100, 0, 0 },
				            // King's day shifted to Saturday if on a Sunday - not handled in this calendar
				            { "NL", 5, 5, 0, 0, 0, "Liberation Day", 0, 100, 0, 0 },
				            { "NL", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "NL", 12, 26, 0, 0, 0, "St. Stephen's Day", 0, 100, 0, 0 },
				            --
				            -- NO = Norway
				            { "NO", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "NO", 99, -3, 0, 0, 0, "Maundy Thursday", 0, 100, 0, 0 },
				            { "NO", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "NO", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "NO", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "NO", 99, 50, 0, 0, 0, "Whit Monday", 0, 50, 0, 0 },
				            { "NO", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "NO", 5, 17, 0, 0, 0, "Constitution Day", 0, 100, 0, 0 },
				            { "NO", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "NO", 12, 26, 0, 0, 0, "Boxing Day", 0, 100, 0, 0 },
				            -- De facto Holidays in Norway - not official public holidays
				            { "NO", 12, 24, 0, 0, 0, "Christmas Eve", 0, 50, 0, 0 },
				            { "NO", 12, 31, 0, 0, 0, "New Year's Eve", 0, 50, 0, 0 },
				            --
				            -- PT = Portugal
				            { "PT", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "PT", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "PT", 99, 60, 0, 0, 0, "Corpus Christi", 0, 50, 0, 0 },
				            { "PT", 4, 25, 0, 0, 0, "Freedom Day", 0, 100, 0, 0 },
				            { "PT", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "PT", 6, 10, 0, 0, 0, "Portugal Day", 0, 100, 0, 0 },
				            { "PT", 8, 15, 0, 0, 0, "Assumption Day", 0, 100, 0, 0 },
				            { "PT", 10, 5, 0, 0, 0, "Republic Day", 0, 100, 0, 0 },
				            { "PT", 11, 1, 0, 0, 0, "All Saints' Day", 0, 100, 0, 0 },
				            { "PT", 12, 1, 0, 0, 0, "Restoration of Independence", 0, 100, 0, 0 },
				            { "PT", 12, 8, 0, 0, 0, "Immaculate Conception", 0, 100, 0, 0 },
				            { "PT", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },            --
				            --
				            -- SE = Sweden
				            { "SE", 1, 1, 0, 0, 0, "New Year's Day", 0, 100, 0, 0 },
				            { "SE", 1, 6, 0, 0, 0, "Epiphany", 0, 100, 0, 0 },
				            { "SE", 99, -2, 0, 0, 0, "Good Friday", 0, 50, 0, 0 },
				            { "SE", 99, 1, 0, 0, 0, "Easter Monday", 0, 50, 0, 0 },
				            { "SE", 99, 39, 0, 0, 0, "Ascension Day", 0, 50, 0, 0 },
				            { "SE", 5, 1, 0, 0, 0, "Labour Day", 0, 100, 0, 0 },
				            { "SE", 6, 6, 0, 0, 0, "National Day", 0, 100, 0, 0 },
				            { "SE", 12, 25, 0, 0, 0, "Christmas Day", 0, 100, 0, 0 },
				            { "SE", 12, 26, 0, 0, 0, "Boxing Day", 0, 100, 0, 0 },
				            -- De facto Holidays in Sweden - not official public holidays
				            { "SE", 12, 24, 0, 0, 0, "Christmas Eve", 0, 50, 0, 0 },
				            { "SE", 12, 31, 0, 0, 0, "New Year's Eve", 0, 50, 0, 0 },
				            -- Midsummer Day is a Saturday
				            -- { "SE", 98, 0, 0, 0, "Midsummer Day", 0, 50, 0, 0 },
				            { "SE", 98, -1, 0, 0, 0, "Midsummer Eve", 0, 50, 0, 0 }
				            ------------------------------------------------------------       
				            -- UK --> see GB
				        }
				    )
				VAR HolidayDates_ConfigGeneration =
				    FILTER (
				        HolidayParameters,
				        IF (
				            CONTAINS ( HolidayParameters, [ISO Country], IsoCountryHolidays )
				                || IsoCountryHolidays = "",
				            [ISO Country] = IsoCountryHolidays,
				            ERROR ( "IsoCountryHolidays set to an unsupported country code" )
				        )
				    )
				VAR HolidayDates_GeneratedRawWithDuplicatesUnfiltered =
				    GENERATE (
				        GENERATE (
				            GENERATESERIES ( FirstYear - 1, LastYear + 1, 1 ),
				            HolidayDates_ConfigGeneration
				        ),
				        VAR HolidayYear = [Value]
				        VAR EasterDate =
				            -- Code adapted from original VB version from https://www.assa.org.au/edm 
				            VAR EasterYear = HolidayYear
				            VAR FirstDig =
				                INT ( EasterYear / 100 )
				            VAR Remain19 =
				                MOD ( EasterYear, 19 ) //
				            -- Calculate PFM date
				            VAR temp1 =
				                MOD (
				                    INT ( ( FirstDig - 15 ) / 2 )
				                        + 202
				                        - 11 * Remain19
				                        + SWITCH (
				                            TRUE,
				                            FirstDig IN { 21, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 38 }, -1,
				                            FirstDig IN { 33, 36, 37, 39, 40 }, -2,
				                            0
				                        ),
				                    30
				                )
				            VAR tA =
				                temp1 + 21
				                    + IF ( temp1 = 29 || ( temp1 = 28 && Remain19 > 10 ), -1 ) // 
				            -- Find the next Sunday
				            VAR tB =
				                MOD ( tA - 19, 7 )
				            VAR tCpre =
				                MOD ( 40 - FirstDig, 4 )
				            VAR tC =
				                tCpre
				                    + IF ( tCpre = 3, 1 )
				                    + IF ( tCpre > 1, 1 )
				            VAR temp2 =
				                MOD ( EasterYear, 100 )
				            VAR tD =
				                MOD ( temp2 + INT ( temp2 / 4 ), 7 )
				            VAR tE =
				                MOD ( 20 - tB - tC - tD, 7 )
				                    + 1
				            VAR d = tA + tE //
				            -- Return the date
				            VAR EasterDay =
				                IF ( d > 31, d - 31, d )
				            VAR EasterMonth =
				                IF ( d > 31, 4, 3 )
				            RETURN
				                DATE ( EasterYear, EasterMonth, EasterDay ) //
				        -- End of code adapted from original VB version from https://www.assa.org.au/edm 
				        VAR SwedishMidSummer =
				            -- Compute the Midsummer day in Swedish - it is the Saturday between 20 and 26 June
				            -- This calculation is valid only for years after 1953 
				            -- https://sv.wikipedia.org/wiki/Midsommar_i_Sverige
				            VAR __June20 = 
				                DATE ( HolidayYear, 6, 20 )
				            RETURN
				                DATE ( HolidayYear, 6, 20 + (7 - WEEKDAY ( __June20, 1 ) ) )
				            -- End of SwedishMidSummer calculation
				        VAR HolidayDate =
				            SWITCH (
				                TRUE,
				                [DayNumber] <> 0
				                    && [WeekDayNumber] <> 0, ERROR ( "Wrong configuration in HolidayParameters" ),
				                [DayNumber] <> 0
				                    && [MonthNumber] <= 12, DATE ( HolidayYear, [MonthNumber], [DayNumber] ),
				                [MonthNumber] = 99, -- Easter offset
				                    EasterDate + [DayNumber],
				                [MonthNumber] = 98, -- Swedish Midsummer Day
				                    SwedishMidSummer + [DayNumber],
				                [WeekDayNumber] <> 0,
				                    VAR ReferenceDate =
				                        DATE ( HolidayYear, 1
				                            + MOD ( [MonthNumber] - 1 + IF ( [OffsetWeek] < 0, 1 ), 12 ), 1 )
				                            - IF ( [OffsetWeek] < 0, 1 )
				                    VAR ReferenceWeekDayNumber =
				                        WEEKDAY ( ReferenceDate, 1 ) - 1
				                    VAR Offset =
				                        [WeekDayNumber] - ReferenceWeekDayNumber
				                            + 7 * [OffsetWeek]
				                            + IF (
				                                [OffsetWeek] > 0,
				                                IF ( [WeekDayNumber] >= ReferenceWeekDayNumber, - 7 ),
				                                IF ( ReferenceWeekDayNumber >= [WeekDayNumber], 7 )
				                            )
				                RETURN
				                    ReferenceDate + Offset + [OffsetDays],
				                ERROR ( "Wrong configuration in HolidayParameters" )
				            )
				        VAR HolidayDay =
				            WEEKDAY ( HolidayDate, 1 ) - 1
				        VAR SubstituteHolidayOffset =
				            SWITCH (
				                TRUE,
				                [SubstituteHoliday] = -1,
				                    SWITCH ( 
				                        HolidayDay, 
				                        0, 1,       -- If it falls on a Sunday then it is observed on Monday
				                        6, -1,      -- If it falls on a Saturday then it is observed on Friday
				                        0
				                    ),
				                [SubstituteHoliday] > 0
				                    && NOT CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], HolidayDay ),
				                VAR NextWorkingDay =
				                    MINX (
				                        FILTER ( WorkingDays, [FSG_PBI_Day_Number] > HolidayDay ),
				                        [FSG_PBI_Day_Number]
				                    )
				                VAR SubstituteDay =
				                    IF (
				                        ISBLANK ( NextWorkingDay ),
				                        MINX ( WorkingDays, [FSG_PBI_Day_Number] ) + 7,
				                        NextWorkingDay
				                    )
				                RETURN
				                    SubstituteDay - HolidayDay
				                        + ( [SubstituteHoliday] - 1 )
				            )
				        RETURN
				            ROW (
				                -- Use DATE function to get a DATE column as a result 
				                "HolidayDate", DATE ( YEAR ( HolidayDate ), MONTH ( HolidayDate ), DAY ( HolidayDate ) ),
				                "SubstituteHolidayOffset", SubstituteHolidayOffset
				            )
				    ) //
				VAR HolidayDates_GeneratedRawWithDuplicates =
				    FILTER (
				        HolidayDates_GeneratedRawWithDuplicatesUnfiltered,
				        ( [FirstYear] = 0 || [FirstYear] <= [Value] )
				            && ( [LastYear] = 0 || [LastYear] >= [Value] )
				    )
				VAR HolidayDates_RawDatesUnique = 
				    DISTINCT ( 
				        SELECTCOLUMNS ( 
				            HolidayDates_GeneratedRawWithDuplicates,
				            "HolidayDateUnique", [HolidayDate]
				        )
				    )
				VAR HolidayDates_GeneratedRaw = 
				    GENERATE (
				        HolidayDates_RawDatesUnique,
				        VAR FilterDate = [HolidayDateUnique]
				        RETURN 
				            TOPN (
				                1,
				                FILTER ( 
				                    HolidayDates_GeneratedRawWithDuplicates,
				                    [HolidayDate] = FilterDate
				                ),
				                [ConflictPriority],
				                ASC,
				                [HolidayName], 
				                ASC
				            )
				    )  
				VAR HolidayDates_GeneratedSubstitutesOffset =
				    SELECTCOLUMNS (
				        FILTER ( HolidayDates_GeneratedRawWithDuplicates, [SubstituteHoliday] <> 0 ),
				        "Value", [Value],
				        "ISO Country", [ISO Country],
				        "MonthNumber", [MonthNumber],
				        "DayNumber", [DayNumber],
				        "WeekDayNumber", [WeekDayNumber],
				        "OffsetWeek", [OffsetWeek],
				        "HolidayName", [HolidayName],
				        "SubstituteHoliday", [SubstituteHoliday],
				        "ConflictPriority", [ConflictPriority],
				        "HolidayDate", [HolidayDate],
				        "SubstituteHolidayOffset", 
				            VAR CurrentHolidayDate = [HolidayDate]
				            VAR CurrentHolidayName = [HolidayName]
				            VAR OriginalSubstituteDate = [HolidayDate] + [SubstituteHolidayOffset]
				            VAR OtherHolidays = 
				                FILTER ( 
				                    HolidayDates_GeneratedRawWithDuplicates, 
				                    [HolidayDate] <> CurrentHolidayDate
				                    || [HolidayName] <> CurrentHolidayName
				                )
				            VAR ConflictDay0 = 
				                CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], OriginalSubstituteDate
				                )
				            VAR ConflictDay1 = 
				                ConflictDay0 
				                && CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], OriginalSubstituteDate + 1
				                )
				            VAR ConflictDay2 = 
				                ConflictDay1 
				                && CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], OriginalSubstituteDate + 2
				                )
				            VAR SubstituteOffsetStep1 = [SubstituteHolidayOffset] + ConflictDay0 + ConflictDay1 + ConflictDay2
				            VAR HolidayDateStep1 = CurrentHolidayDate + SubstituteOffsetStep1
				            VAR HolidayDayStep1 =
				                WEEKDAY ( HolidayDateStep1, 1 ) - 1
				            VAR SubstituteHolidayOffsetNonWorkingDays =
				                IF (
				                    NOT CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], HolidayDayStep1 ),
				                    VAR NextWorkingDayStep2 =
				                        MINX (
				                            FILTER ( WorkingDays, [FSG_PBI_Day_Number] > HolidayDayStep1 ),
				                            [FSG_PBI_Day_Number]
				                        )
				                    VAR SubstituteDay =
				                        IF (
				                            ISBLANK ( NextWorkingDayStep2 ),
				                            MINX ( WorkingDays, [FSG_PBI_Day_Number] ) + 7,
				                            NextWorkingDayStep2
				                        )
				                    RETURN SubstituteDay - HolidayDateStep1
				                )
				            VAR SubstituteOffsetStep2 = SubstituteOffsetStep1 + SubstituteHolidayOffsetNonWorkingDays
				            VAR SubstituteDateStep2 = OriginalSubstituteDate + SubstituteOffsetStep2
				            VAR ConflictDayStep2_0 = 
				                CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], SubstituteDateStep2
				                )
				            VAR ConflictDayStep2_1 = 
				                ConflictDayStep2_0
				                && CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], SubstituteDateStep2 + 1
				                )
				            VAR ConflictDayStep2_2 = 
				                ConflictDayStep2_1 
				                && CONTAINS ( 
				                    OtherHolidays,
				                    [HolidayDate], SubstituteDateStep2 + 2
				                )
				            VAR FinalSubstituteHolidayOffset = 
				                SubstituteOffsetStep2 + ConflictDayStep2_0 + ConflictDayStep2_1 + ConflictDayStep2_2
				            RETURN
				                FinalSubstituteHolidayOffset
				        )
				VAR HolidayDates_GeneratedSubstitutesExpanded =
				    ADDCOLUMNS (
				        HolidayDates_GeneratedSubstitutesOffset,
				        "ReplacementHolidayDate", [HolidayDate] + [SubstituteHolidayOffset]
				    )
				VAR HolidayDates_GeneratedSubstitutesUnique =
				    DISTINCT ( 
				        SELECTCOLUMNS ( 
				            HolidayDates_GeneratedSubstitutesExpanded,
				            "UniuqeReplacementHolidayDate", [ReplacementHolidayDate]
				        )
				    )
				VAR HolidayDates_GeneratedSubstitutes =
				    GENERATE (
				        HolidayDates_GeneratedSubstitutesUnique,
				        TOPN (
				            1,
				            FILTER ( 
				                HolidayDates_GeneratedSubstitutesExpanded,
				                [UniuqeReplacementHolidayDate] = [ReplacementHolidayDate]
				            ),
				            [ConflictPriority],
				            ASC,
				            [HolidayName], 
				            ASC
				        )
				    )  
				VAR HolidayDates_Generated =
				    UNION (
				        SELECTCOLUMNS (
				            HolidayDates_GeneratedRaw,
				            "HolidayDate", [HolidayDate],
				            "HolidayName", [HolidayName]
				        ),
				        SELECTCOLUMNS (
				            FILTER ( HolidayDates_GeneratedSubstitutes, [SubstituteHolidayOffset] <> 0 ), 
				            "HolidayDate", [HolidayDate] + [SubstituteHolidayOffset],
				            "HolidayName", InLieuOf_prefix & [HolidayName]
				                & InLieuOf_suffix
				        )
				    )
				-- Alternative way to express holidays: create a table with the list of the dates
				-- The following table should be used instead of HolidayDates_Generated in the following 
				-- HolidayDates variable if you want to use a fixed list of holidays
				VAR HolidayDates_US_ExplicitDates =
				    DATATABLE (
				        "HolidayDate", DATETIME,
				        "HolidayName", STRING,
				        {
				            { "2008-01-01", "New Year's Day" },
				            { "2008-12-25", "Christmas Day" },
				            -------------------------
				            { "2008-11-27", "Thanksgiving Day" },
				            { "2009-11-26", "Thanksgiving Day" },
				            { "2010-11-25", "Thanksgiving Day" },
				            { "2011-11-24", "Thanksgiving Day" },
				            { "2012-11-22", "Thanksgiving Day" },
				            { "2013-11-28", "Thanksgiving Day" },
				            { "2014-11-27", "Thanksgiving Day" },
				            { "2015-11-26", "Thanksgiving Day" },
				            { "2016-11-24", "Thanksgiving Day" },
				            { "2017-11-23", "Thanksgiving Day" },
				            { "2018-11-22", "Thanksgiving Day" },
				            { "2019-11-28", "Thanksgiving Day" },
				            { "2020-11-26", "Thanksgiving Day" }
				        }
				    )
				VAR HolidayDates =
				    SELECTCOLUMNS (
				        HolidayDates_Generated,
				        "Date", [HolidayDate],
				        "Holiday Name", [HolidayName]
				    ) //
				------------------------------------------------------------
				--  
				-- End of Configuration
				--
				------------------------------------------------------------
				--  
				-- The following variables define 
				-- the content of the calendar tables
				--
				------------------------------------------------------------
				------------------------------------------------------------
				VAR FirstDayCalendar =
				    DATE ( FirstYear - 1, 1, 1 )
				VAR LastDayCalendar =
				    DATE ( LastYear + 1, 12, 31 )
				VAR WeekDayCalculationType =
				    IF ( FirstDayOfWeek = 0, 7, FirstDayOfWeek )
				        + 10
				VAR OffsetFiscalYear = 
				    IF ( FiscalCalendarFirstMonth > 1, 1, 0 )
				VAR WeeklyFiscalPeriods =
				    GENERATE (
				        SELECTCOLUMNS (
				            GENERATESERIES ( FirstYear - OffsetFiscalYear, LastYear + OffsetFiscalYear, 1 ),
				            "CalendarType", "Weekly",
				            "Fiscal YearNumber", [Value]
				        ),
				        VAR StartFiscalYearNumber = [Fiscal YearNumber] - (OffsetFiscalYear * TypeStartFiscalYear)
				        VAR FirstDayCurrentYear =
				            DATE ( StartFiscalYearNumber, FiscalCalendarFirstMonth, 1 )
				        VAR FirstDayNextYear =
				            DATE ( StartFiscalYearNumber + 1, FiscalCalendarFirstMonth, 1 )
				        VAR DayOfWeekNumberCurrentYear =
				            WEEKDAY ( FirstDayCurrentYear, WeekDayCalculationType )
				        VAR OffsetStartCurrentFiscalYear =
				            SWITCH (
				                WeeklyType,
				                "Last", 1 - DayOfWeekNumberCurrentYear,
				                "Nearest", IF (
				                    DayOfWeekNumberCurrentYear >= 5,
				                    8 - DayOfWeekNumberCurrentYear,
				                    1 - DayOfWeekNumberCurrentYear
				                ),
				                ERROR ( "Unknown WeeklyType definition.")
				            )
				        VAR DayOfWeekNumberNextYear =
				            WEEKDAY ( FirstDayNextYear, WeekDayCalculationType )
				        VAR OffsetStartNextFiscalYear =
				            SWITCH (
				                WeeklyType,
				                "Last", - DayOfWeekNumberNextYear,
				                "Nearest", IF (
				                    DayOfWeekNumberNextYear >= 5,
				                    7 - DayOfWeekNumberNextYear,
				                    - DayOfWeekNumberNextYear
				                ),
				                ERROR ( "Unknown WeeklyType definition.")
				            )
				        VAR FirstDayOfFiscalYear = FirstDayCurrentYear + OffsetStartCurrentFiscalYear
				        VAR LastDayOfFiscalYear = FirstDayNextYear + OffsetStartNextFiscalYear
				        RETURN
				            ROW ( "FirstDayOfYear", FirstDayOfFiscalYear,
				            "LastDayOfYear", LastDayOfFiscalYear )
				    )
				VAR CheckFirstDayOfWeek =
				    IF (
				        UseCustomFiscalPeriods && (NOT IgnoreWeeklyFiscalPeriods)
				        && WEEKDAY ( MINX ( CustomFiscalPeriods, [FirstDayOfYear] ), 1 )
				              <> ( FirstDayOfWeek + 1 ),
				        ERROR ( "CustomFiscalPeriods table does not match FirstDayOfWeek setting" ),
				        TRUE
				    )
				VAR CustomFiscalPeriodsWithType =
				    GENERATE (
				        ROW ( "CalendarType", "Custom" ),
				        FILTER ( CustomFiscalPeriods, CheckFirstDayOfWeek )
				    )
				VAR FiscalPeriods =
				    SELECTCOLUMNS (
				        FILTER (
				            UNION ( 
				                FILTER ( WeeklyFiscalPeriods, NOT IgnoreWeeklyFiscalPeriods ),
				                CustomFiscalPeriodsWithType 
				            ),
				            [CalendarType] = WeeklyCalendarType
				        ),
				        "FW YearNumber", [Fiscal YearNumber],
				        "FW StartOfYear", [FirstDayOfYear],
				        "FW EndOfYear", [LastDayOfYear]
				    )
				VAR WeeksInP1 =
				    SWITCH (
				        QuarterWeekType,
				        "445", 4,
				        "454", 4,
				        "544", 5,
				        ERROR ( "QuarterWeekType only supports 445, 454, and 544" )
				    )
				VAR WeeksInP2 =
				    SWITCH (
				        QuarterWeekType,
				        "445", 4,
				        "454", 5,
				        "544", 4,
				        ERROR ( "QuarterWeekType only supports 445, 454, and 544" )
				    )
				VAR WeeksInP3 =
				    SWITCH (
				        QuarterWeekType,
				        "445", 5,
				        "454", 4,
				        "544", 4,
				        ERROR ( "QuarterWeekType only supports 445, 454, and 544" )
				    )
				VAR FirstSundayReference =
				    DATE ( 1900, 12, 30 ) -- Do not change this 
				VAR FirstWeekReference = FirstSundayReference + FirstDayOfWeek
				VAR RawDays =
				    CALENDAR ( FirstDayCalendar, LastDayCalendar )
				VAR CalendarGregorianPrefixSpace =
				    IF ( CalendarGregorianPrefix <> "", CalendarGregorianPrefix & " ", "" )
				VAR FiscalGregorianPrefixSpace =
				    IF ( FiscalGregorianPrefix <> "", FiscalGregorianPrefix & " ", "" )
				VAR FiscalWeeklyPrefixSpace =
				    IF ( FiscalWeeklyPrefix <> "", FiscalWeeklyPrefix & " ", "" )
				VAR CustomFiscalRawDays =
				    GENERATE ( FiscalPeriods, CALENDAR ( [FW StartOfYear], [FW EndOfYear] ) )
				VAR CalendarStandardGregorianBase =
				    GENERATE (
				        NATURALLEFTOUTERJOIN ( RawDays, HolidayDates ),
				        VAR CalDate = [Date]
				        VAR CalYear =
				            YEAR ( [Date] )
				        VAR CalMonthNumber =
				            MONTH ( [Date] )
				        VAR CalQuarterNumber =
				            ROUNDUP ( CalMonthNumber / 3, 0 )
				        VAR CalDay =
				            DAY ( [Date] )
				        VAR CalWeekNumber =
				            WEEKNUM ( CalDate, WeekDayCalculationType )
				        VAR CalDayOfMonth =
				            DAY ( CalDate )
				        VAR WeekDayNumber =
				            WEEKDAY ( CalDate, WeekDayCalculationType )
				        VAR YearWeekNumber =
				            INT ( DIVIDE ( CalDate - FirstWeekReference, 7 ) )
				        VAR CalendarFirstDayOfYear =
				            DATE ( CalYear, 1, 1 )
				        VAR CalendarDayOfYear =
				            INT ( CalDate - CalendarFirstDayOfYear + 1 )
				        VAR IsWorkingDay =
				            CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], WEEKDAY ( CalDate, 1 ) - 1 )
				                && ISBLANK ( [Holiday Name] )
				        VAR _CheckLeapYearBefore =
				            CalYear -
				            IF ( (CalMonthNumber = 2 && CalDayOfMonth < 29)
				                     || CalMonthNumber < 2,
				                1,
				                0 )
				        VAR LeapYearsBefore1900 =
				            INT ( 1899 / 4 )
				                - INT ( 1899 / 100 )
				                + INT ( 1899 / 400 )
				        VAR LeapYearsBetween =
				            INT ( _CheckLeapYearBefore / 4 )
				                - INT ( _CheckLeapYearBefore / 100 )
				                + INT ( _CheckLeapYearBefore / 400 )
				                - LeapYearsBefore1900
				        VAR Sequential365DayNumber =
				            INT ( CalDate - LeapYearsBetween ) 
				        RETURN
				            ROW (
				                "DateKey", CalYear * 10000
				                    + CalMonthNumber * 100
				                    + CalDay,
				                "Calendar YearNumber", CalYear,
				                "Calendar Year", CalendarGregorianPrefixSpace & CalYear,
				                "Calendar QuarterNumber", CalQuarterNumber,
				                "Calendar Quarter", CalendarGregorianPrefix & "Q"
				                    & CalQuarterNumber
				                    & " ",
				                "Calendar YearQuarterNumber", CalYear * 4
				                    - 1
				                    + CalQuarterNumber,
				                "Calendar Quarter Year", CalendarGregorianPrefix & "Q"
				                    & CalQuarterNumber
				                    & " "
				                    & CalYear,
				                "Calendar MonthNumber", CalMonthNumber,
				                "Calendar Month", FORMAT ( CalDate, "mmm" ),
				                "Calendar YearMonthNumber", CalYear * 12
				                    - 1
				                    + CalMonthNumber,
				                "Calendar Month Year", FORMAT ( CalDate, "mmm" ) & " "
				                    & CalYear,
				                "Calendar WeekNumber", CalWeekNumber,
				                "Calendar Week", CalendarGregorianPrefix & "W"
				                    & FORMAT ( CalWeekNumber, "00" ),
				                "Calendar YearWeekNumber", YearWeekNumber,
				                "Calendar Week Year", CalendarGregorianPrefix & "W"
				                    & FORMAT ( CalWeekNumber, "00" )
				                    & "-"
				                    & CalYear,
				                "Calendar WeekYearOrder", CalYear * 100
				                    + CalWeekNumber,
				                "Calendar DayOfYearNumber", CalendarDayOfYear,
				                "Day of Month", CalDayOfMonth,
				                "WeekDayNumber", WeekDayNumber,
				                "Week Day", FORMAT ( CalDate, "ddd" ),
				                "IsWorkingDay", IsWorkingDay,
				                "Day Type", IF ( IsWorkingDay, WorkingDayType, NonWorkingDayType ),
				                "Sequential365DayNumber", Sequential365DayNumber
				            )
				    )
				VAR CalendarStandardGregorian =
				    GENERATE (
				        CalendarStandardGregorianBase,
				        VAR CalDate = [Date]
				        VAR YearNumber = [Calendar YearNumber]
				        VAR MonthNumber = [Calendar MonthNumber]
				        VAR YearWeekNumber = [Calendar YearWeekNumber]
				        VAR YearMonthNumber = [Calendar YearMonthNumber]
				        VAR YearQuarterNumber = [Calendar YearQuarterNumber]
				        VAR CurrentWeekPos =
				            AVERAGEX (
				                FILTER ( CalendarStandardGregorianBase, [Date] = TodayReference ),
				                [Calendar YearWeekNumber]
				            )
				        VAR CurrentMonthPos =
				            AVERAGEX (
				                FILTER ( CalendarStandardGregorianBase, [Date] = TodayReference ),
				                [Calendar YearMonthNumber]
				            )
				        VAR CurrentQuarterPos =
				            AVERAGEX (
				                FILTER ( CalendarStandardGregorianBase, [Date] = TodayReference ),
				                [Calendar YearQuarterNumber]
				            )
				        VAR CurrentYearPos =
				            AVERAGEX (
				                FILTER ( CalendarStandardGregorianBase, [Date] = TodayReference ),
				                [Calendar YearNumber]
				            )
				        VAR RelativeWeekPos = YearWeekNumber - CurrentWeekPos
				        VAR RelativeMonthPos = YearMonthNumber - CurrentMonthPos
				        VAR RelativeQuarterPos = YearQuarterNumber - CurrentQuarterPos
				        VAR RelativeYearPos = YearNumber - CurrentYearPos
				        VAR CalStartOfMonth =
				            DATE ( YearNumber, MonthNumber, 1 )
				        VAR CalEndOfMonth =
				            EOMONTH ( CalDate, 0 )
				        VAR CalMonthDays = 
				            INT ( CalEndOfMonth - CalStartOfMonth + 1 ) 
				        VAR CalDayOfMonthNumber =
				            INT ( CalDate - CalStartOfMonth + 1 )
				        VAR CalStartOfQuarter =
				            MINX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearQuarterNumber] = YearQuarterNumber
				                ),
				                [Date]
				            )
				        VAR CalEndOfQuarter =
				            MAXX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearQuarterNumber] = YearQuarterNumber
				                ),
				                [Date]
				            )
				        VAR CalQuarterDays =
				            INT ( CalEndOfQuarter - CalStartOfQuarter + 1 )         
				        VAR CalDayOfQuarterNumber =
				            INT ( CalDate - CalStartOfQuarter + 1 )
				        VAR CalYearDays =
				            INT ( DATE ( YearNumber, 12, 31 ) - DATE ( YearNumber, 1, 1 ) + 1 )
				        VAR CalDatePreviousWeek = CalDate - 7
				        VAR CalDatePreviousMonth = 
				            MAXX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearMonthNumber] = YearMonthNumber - 1
				                    &&
				                    ( [Day of Month] <= CalDayOfMonthNumber
				                      || CalDayOfMonthNumber = CalMonthDays )
				                ),
				                [Date]
				            )
				        VAR CalDatePreviousQuarter = 
				            MAXX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearMonthNumber] = YearMonthNumber - 3
				                    &&
				                    ( [Day of Month] <= CalDayOfMonthNumber
				                      || CalDayOfMonthNumber = CalMonthDays )
				                ),
				                [Date]
				            )
				        VAR CalDatePreviousYear = 
				            MAXX (
				                FILTER (
				                    CalendarStandardGregorianBase,
				                    [Calendar YearMonthNumber] = YearMonthNumber - 12
				                    &&
				                    ( [Day of Month] <= CalDayOfMonthNumber
				                      || CalDayOfMonthNumber = CalMonthDays )
				                ),
				                [Date]
				            )
				        VAR CalStartOfYear =
				            DATE ( YearNumber, 1, 1 )
				        VAR CalEndOfYear =
				            DATE ( YearNumber, 12, 31 )
				        RETURN
				            ROW ( "Calendar RelativeWeekPos", RelativeWeekPos,
				            "Calendar RelativeMonthPos", RelativeMonthPos,
				            "Calendar RelativeQuarterPos", RelativeQuarterPos,
				            "Calendar RelativeYearPos", RelativeYearPos,
				            "Calendar StartOfMonth", CalStartOfMonth,
				            "Calendar EndOfMonth", CalEndOfMonth,
				            "Calendar DayOfMonthNumber", CalDayOfMonthNumber,
				            "Calendar StartOfQuarter", CalStartOfQuarter,
				            "Calendar EndOfQuarter", CalEndOfQuarter,
				            "Calendar DayOfQuarterNumber", CalDayOfQuarterNumber,            
				            "Calendar StartOfYear", CalStartOfYear,
				            "Calendar EndOfYear", CalEndOfYear,
				            "Calendar DatePreviousWeek", CalDatePreviousWeek,
				            "Calendar DatePreviousMonth", CalDatePreviousMonth,
				            "Calendar DatePreviousQuarter", CalDatePreviousQuarter,
				            "Calendar DatePreviousYear", CalDatePreviousYear,
				            "Calendar MonthDays", CalMonthDays,
				            "Calendar QuarterDays", CalQuarterDays,
				            "Calendar YearDays", CalYearDays
				            )
				    )
				VAR FiscalStandardGregorianBase =
				    GENERATE (
				        NATURALLEFTOUTERJOIN ( RawDays, HolidayDates ),
				        VAR FiscalDate = [Date]
				        VAR CalYear =
				            YEAR ( FiscalDate )
				        VAR CalMonthNumber =
				            MONTH ( FiscalDate )
				        VAR CalDay =
				            DAY ( [Date] )
				        VAR WeekDayNumber =
				            WEEKDAY ( FiscalDate, WeekDayCalculationType )
				        VAR YearWeekNumber =
				            INT ( DIVIDE ( FiscalDate - FirstWeekReference, 7 ) )
				        VAR FiscalYear =
				            CalYear 
				                + IF ( FiscalCalendarFirstMonth > 1,
				                      IF ( CalMonthNumber >= FiscalCalendarFirstMonth, 
				                          TypeStartFiscalYear,                     -- TypeStartFiscalYear = 1
				                          -1 * (TypeStartFiscalYear = 0)           -- TypeStartFiscalYear = 0
				                      )
				                  )
				        VAR FiscalMonthNumber =
				            MOD ( CalMonthNumber - FiscalCalendarFirstMonth, 12 )
				                + 1
				        VAR FiscalMonthQuarterNumber = 
				            MOD ( FiscalMonthNumber - 1, 3 ) + 1
				        VAR FiscalFirstDayOfYear =
				            DATE ( FiscalYear - (OffsetFiscalYear * TypeStartFiscalYear), FiscalCalendarFirstMonth, 1 )
				        VAR FiscalDayOfYear =
				            INT ( FiscalDate - FiscalFirstDayOfYear + 1 )
				        VAR FiscalFirstYearWeekNumber =
				            INT ( DIVIDE ( FiscalFirstDayOfYear - FirstWeekReference, 7 ) )
				        VAR FiscalWeekNumber = YearWeekNumber - FiscalFirstYearWeekNumber
				            + 1
				        VAR FiscalQuarterNumber =
				            ROUNDUP ( FiscalMonthNumber / 3, 0 )
				        VAR IsWorkingDay =
				            CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], WEEKDAY ( FiscalDate, 1 ) - 1 )
				                && ISBLANK ( [Holiday Name] )
				        RETURN
				            ROW (
				                "DateKey", CalYear * 10000
				                    + CalMonthNumber * 100
				                    + CalDay,
				                "Fiscal Year", FiscalGregorianPrefixSpace & FiscalYear,
				                "Fiscal YearNumber", FiscalYear,
				                "Fiscal QuarterNumber", FiscalQuarterNumber,
				                "Fiscal Quarter", FiscalGregorianPrefix & "Q"
				                    & FiscalQuarterNumber
				                    & " ",
				                "Fiscal YearQuarterNumber", FiscalYear * 4
				                    - 1
				                    + FiscalQuarterNumber,
				                "Fiscal Quarter Year", FiscalGregorianPrefix & "Q"
				                    & FiscalQuarterNumber
				                    & " "
				                    & FiscalYear,
				                "Fiscal MonthNumber", FiscalMonthNumber,
				                "Fiscal MonthQuarterNumber", FiscalMonthQuarterNumber,
				                "Fiscal Month", FORMAT ( FiscalDate, "mmm" ),
				                "Fiscal YearMonthNumber", FiscalYear * 12
				                    - 1
				                    + FiscalMonthNumber,
				                "Fiscal Month Year", FORMAT ( FiscalDate, "mmm" ) & " "
				                    & CalYear,
				                "Fiscal WeekNumber", FiscalWeekNumber,
				                "Fiscal Week", FiscalGregorianPrefix & "W"
				                    & FORMAT ( FiscalWeekNumber, "00" ),
				                "Fiscal YearWeekNumber", YearWeekNumber,
				                "Fiscal Week Year", FiscalGregorianPrefix & "W"
				                    & FORMAT ( FiscalWeekNumber, "00" )
				                    & "-"
				                    & FiscalYear,
				                "Fiscal WeekYearOrder", FiscalYear * 100
				                    + FiscalWeekNumber,
				                "Fiscal DayOfYearNumber", FiscalDayOfYear,
				                "Day of Month", DAY ( FiscalDate ),
				                "WeekDayNumber", WeekDayNumber,
				                "Week Day", FORMAT ( FiscalDate, "ddd" ),
				                "IsWorkingDay", IsWorkingDay,
				                "Day Type", IF ( IsWorkingDay, WorkingDayType, NonWorkingDayType )
				            )
				    )
				VAR FiscalStandardGregorian =
				    GENERATE (
				        FiscalStandardGregorianBase,
				        VAR FiscalDate = [Date]
				        VAR FiscalYearNumber = [Fiscal YearNumber]
				        VAR MonthNumber = [Fiscal MonthNumber]
				        VAR CalendarYearNumber =
				            YEAR ( FiscalDate )
				        VAR CalendarMonthNumber =
				            MONTH ( FiscalDate )
				        VAR YearWeekNumber = [Fiscal YearWeekNumber]
				        VAR YearMonthNumber = [Fiscal YearMonthNumber]
				        VAR YearQuarterNumber = [Fiscal YearQuarterNumber]
				        VAR CurrentWeekPos =
				            AVERAGEX (
				                FILTER ( FiscalStandardGregorianBase, [Date] = TodayReference ),
				                [Fiscal YearWeekNumber]
				            )
				        VAR CurrentMonthPos =
				            AVERAGEX (
				                FILTER ( FiscalStandardGregorianBase, [Date] = TodayReference ),
				                [Fiscal YearMonthNumber]
				            )
				        VAR CurrentQuarterPos =
				            AVERAGEX (
				                FILTER ( FiscalStandardGregorianBase, [Date] = TodayReference ),
				                [Fiscal YearQuarterNumber]
				            )
				        VAR CurrentYearPos =
				            AVERAGEX (
				                FILTER ( FiscalStandardGregorianBase, [Date] = TodayReference ),
				                [Fiscal YearNumber]
				            )
				        VAR RelativeWeekPos = YearWeekNumber - CurrentWeekPos
				        VAR RelativeMonthPos = YearMonthNumber - CurrentMonthPos
				        VAR RelativeQuarterPos = YearQuarterNumber - CurrentQuarterPos
				        VAR RelativeYearPos = FiscalYearNumber - CurrentYearPos
				        VAR FiscalStartOfMonth =
				            DATE ( CalendarYearNumber, CalendarMonthNumber, 1 )
				        VAR FiscalEndOfMonth =
				            EOMONTH ( FiscalDate, 0 )
				        VAR FiscalMonthDays = 
				            INT ( FiscalEndOfMonth - FiscalStartOfMonth + 1 ) 
				        VAR FiscalDayOfMonthNumber =
				            INT ( FiscalDate - FiscalStartOfMonth + 1 )
				        VAR FiscalStartOfQuarter =
				            MINX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearQuarterNumber] = YearQuarterNumber
				                ),
				                [Date]
				            )
				        VAR FiscalEndOfQuarter =
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearQuarterNumber] = YearQuarterNumber
				                ),
				                [Date]
				            )
				        VAR FiscalQuarterDays = 
				            INT ( FiscalEndOfQuarter - FiscalStartOfQuarter + 1 )
				        VAR FiscalFirstDayOfYear =
				            DATE ( FiscalYearNumber - OffsetFiscalYear, FiscalCalendarFirstMonth, 1 )
				        VAR FiscalLastDayOfYear =
				            DATE ( FiscalYearNumber + (1 * (OffsetFiscalYear = 0)), FiscalCalendarFirstMonth, 1 ) - 1
				        VAR FiscalYearDays = 
				            INT ( FiscalLastDayOfYear - FiscalFirstDayOfYear + 1 ) 
				        VAR FiscalDayOfQuarterNumber =
				            INT ( FiscalDate - FiscalStartOfQuarter + 1 )
				        VAR FiscalStartOfYear =
				            MINX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearNumber] = FiscalYearNumber
				                ),
				                [Date]
				            )
				        VAR FiscalEndOfYear =
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearNumber] = FiscalYearNumber
				                ),
				                [Date]
				            )
				        VAR FiscalDatePreviousWeek = FiscalDate - 7
				        VAR FiscalDatePreviousMonth = 
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearMonthNumber] = YearMonthNumber - 1
				                    &&
				                    ( [Day of Month] <= FiscalDayOfMonthNumber
				                      || FiscalDayOfMonthNumber = FiscalMonthDays )
				                ),
				                [Date]
				            )
				        VAR FiscalDatePreviousQuarter = 
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearMonthNumber] = YearMonthNumber - 3
				                    &&
				                    ( [Day of Month] <= FiscalDayOfMonthNumber
				                      || FiscalDayOfMonthNumber = FiscalMonthDays )
				                ),
				                [Date]
				            )
				        VAR FiscalDatePreviousYear = 
				            MAXX (
				                FILTER (
				                    FiscalStandardGregorianBase,
				                    [Fiscal YearMonthNumber] = YearMonthNumber - 12
				                    &&
				                    ( [Day of Month] <= FiscalDayOfMonthNumber
				                      || FiscalDayOfMonthNumber = FiscalMonthDays )
				                ),
				                [Date]
				            )
				        RETURN
				            ROW ( "Fiscal RelativeWeekPos", RelativeWeekPos,
				            "Fiscal RelativeMonthPos", RelativeMonthPos,
				            "Fiscal RelativeQuarterPos", RelativeQuarterPos,
				            "Fiscal RelativeYearPos", RelativeYearPos,
				            "Fiscal StartOfMonth", FiscalStartOfMonth,
				            "Fiscal EndOfMonth", FiscalEndOfMonth,
				            "Fiscal DayOfMonthNumber", FiscalDayOfMonthNumber,
				            "Fiscal StartOfQuarter", FiscalStartOfQuarter,
				            "Fiscal EndOfQuarter", FiscalEndOfQuarter,
				            "Fiscal DayOfQuarterNumber", FiscalDayOfQuarterNumber,
				            "Fiscal StartOfYear", FiscalStartOfYear,
				            "Fiscal EndOfYear", FiscalEndOfYear,
				            "Fiscal DatePreviousWeek", FiscalDatePreviousWeek,
				            "Fiscal DatePreviousMonth", FiscalDatePreviousMonth,
				            "Fiscal DatePreviousQuarter", FiscalDatePreviousQuarter,
				            "Fiscal DatePreviousYear", FiscalDatePreviousYear,
				            "Fiscal MonthDays", FiscalMonthDays,
				            "Fiscal QuarterDays", FiscalQuarterDays,
				            "Fiscal YearDays", FiscalYearDays
				           )
				    )
				VAR FiscalWeeksBase =
				    GENERATE (
				        NATURALLEFTOUTERJOIN ( CustomFiscalRawDays, HolidayDates ),
				        VAR CalDate = [Date]
				        VAR FwFirstDayOfYear = [FW StartOfYear]
				        VAR FwDayOfYear =
				            INT ( CalDate - FwFirstDayOfYear + 1 )
				        VAR CalYear =
				            YEAR ( [Date] )
				        VAR CalMonthNumber =
				            MONTH ( [Date] )
				        VAR CalDay =
				            DAY ( [Date] )
				        VAR FwDayOfYearNumber = CalDate - [FW StartOfYear]
				            + 1
				        VAR FwWeekNumber =
				            INT ( CEILING ( FwDayOfYearNumber / 7, 1 ) )
				        VAR FwPeriodNumber = 
				            IF ( FwWeekNumber > 52, 14, ROUNDUP ( FwWeekNumber / 4, 0 ) )
				        VAR FwYearNumber = [FW YearNumber]
				        VAR FwQuarterNumber =
				            IF ( FwWeekNumber > 52, 4, ROUNDUP ( FwWeekNumber / 13, 0 ) )
				        VAR FwWeekInQuarterNumber =
				            IF ( FwWeekNumber > 52, 14, FwWeekNumber - 13 * ( FwQuarterNumber - 1 ) )
				        VAR FwMonthNumber =
				            ( FwQuarterNumber - 1 )
				                * 3
				                + SWITCH (
				                    TRUE,
				                    FwWeekInQuarterNumber <= WeeksInP1, 1,
				                    FwWeekInQuarterNumber
				                        <= ( WeeksInP1 + WeeksInP2 ), 2,
				                    3
				                )
				        VAR WeekDayNumber =
				            WEEKDAY ( CalDate, WeekDayCalculationType )
				        VAR FirstDayOfWeek = [Date] - WeekDayNumber
				            + 1
				        VAR LastDayOfWeek = FirstDayOfWeek + 6
				        VAR IsWorkingDay =
				            CONTAINS ( WorkingDays, [FSG_PBI_Day_Number], WEEKDAY ( CalDate, 1 ) - 1 )
				                && ISBLANK ( [Holiday Name] )
				        RETURN
				            ROW (
				                "DateKey", CalYear * 10000
				                    + CalMonthNumber * 100
				                    + CalDay,
				                // "FW YearNumber", FwYearNumber, -- It is already in the first set of columns of the GENERATE function
				                "FW Year", FiscalWeeklyPrefixSpace & FwYearNumber,
				                "FW QuarterNumber", FwQuarterNumber,
				                "FW Quarter", FiscalWeeklyPrefix & "Q"
				                    & FwQuarterNumber,
				                "FW YearQuarterNumber", FwYearNumber * 4
				                    - 1
				                    + FwQuarterNumber,
				                "FW Quarter Year", FiscalWeeklyPrefix & "Q"
				                    & FwQuarterNumber
				                    & " "
				                    & FwYearNumber,
				                "FW MonthNumber", FwMonthNumber,
				                "FW Month", FiscalWeeklyPrefix & "P"
				                    & FORMAT ( FwMonthNumber, "00" ),
				                "FW YearMonthNumber", FwYearNumber * 12
				                    - 1
				                    + FwMonthNumber,
				                "FW Month Year", FiscalWeeklyPrefix & "P"
				                    & FORMAT ( FwMonthNumber, "00" )
				                    & " "
				                    & FwYearNumber,
				                "FW WeekNumber", FwWeekNumber,
				                "FW Week", FiscalWeeklyPrefix & "W"
				                    & FORMAT ( FwWeekNumber, "00" ),
				                "FW PeriodNumber", FwPeriodNumber,
				                "FW Period", FiscalWeeklyPrefix & "P"
				                    & FORMAT ( FwPeriodNumber, "00" ),
				                "FW YearWeekNumber", INT ( DIVIDE ( CalDate - FirstWeekReference, 7 ) )
				                    + 1,
				                "FW Week Year", FiscalWeeklyPrefix & "W"
				                    & FORMAT ( FwWeekNumber, "00" )
				                    & " "
				                    & FwYearNumber,
				                "FW StartOfWeek", FirstDayOfWeek,
				                "FW EndOfWeek", LastDayOfWeek,
				                "WeekDayNumber", WeekDayNumber,
				                "Week Day", FORMAT ( CalDate, "ddd" ),
				                "FW DayOfYearNumber", FwDayOfYear,
				                "IsWorkingDay", IsWorkingDay,
				                "Day Type", IF ( IsWorkingDay, WorkingDayType, NonWorkingDayType )
				            )
				    )
				VAR FiscalWeeks_Pre = 
				    GENERATE (
				        FiscalWeeksBase,
				        VAR CalDate = [Date]
				        VAR FWYearNumber = [FW YearNumber]
				        VAR FwYearWeekNumber = [FW YearWeekNumber]
				        VAR FwYearMonthNumber = [FW YearMonthNumber]
				        VAR FwYearQuarterNumber = [FW YearQuarterNumber]
				        VAR CurrentWeekPos =
				            AVERAGEX (
				                FILTER ( FiscalWeeksBase, [Date] = TodayReference ),
				                [FW YearWeekNumber]
				            )
				        VAR CurrentMonthPos =
				            AVERAGEX (
				                FILTER ( FiscalWeeksBase, [Date] = TodayReference ),
				                [FW YearMonthNumber]
				            )
				        VAR CurrentQuarterPos =
				            AVERAGEX (
				                FILTER ( FiscalWeeksBase, [Date] = TodayReference ),
				                [FW YearQuarterNumber]
				            )
				        VAR CurrentYearPos =
				            AVERAGEX (
				                FILTER ( FiscalWeeksBase, [Date] = TodayReference ),
				                [FW YearNumber]
				            )
				        VAR RelativeWeekPos = FwYearWeekNumber - CurrentWeekPos
				        VAR RelativeMonthPos = FwYearMonthNumber - CurrentMonthPos
				        VAR RelativeQuarterPos = FwYearQuarterNumber - CurrentQuarterPos
				        VAR RelativeYearPos = FWYearNumber - CurrentYearPos
				        VAR FwStartOfMonth =
				            MINX (
				                FILTER ( FiscalWeeksBase, [FW YearMonthNumber] = FwYearMonthNumber ),
				                [Date]
				            )
				        VAR FwEndOfMonth =
				            MAXX (
				                FILTER ( FiscalWeeksBase, [FW YearMonthNumber] = FwYearMonthNumber ),
				                [Date]
				            )
				        VAR FwMonthDays = 
				            INT ( FwEndOfMonth - FwStartOfMonth + 1 ) 
				        VAR FwDayOfMonthNumber =
				            INT ( CalDate - FwStartOfMonth + 1 )
				        VAR FwStartOfQuarter =
				            MINX (
				                FILTER ( FiscalWeeksBase, [FW YearQuarterNumber] = FwYearQuarterNumber ),
				                [Date]
				            )
				        VAR FwEndOfQuarter =
				            MAXX (
				                FILTER ( FiscalWeeksBase, [FW YearQuarterNumber] = FwYearQuarterNumber ),
				                [Date]
				            )
				        VAR FwQuarterDays = 
				            INT ( FwEndOfQuarter - FwStartOfQuarter + 1 )
				        VAR FwDayOfQuarterNumber =
				            INT ( CalDate - FwStartOfQuarter + 1 )
				        VAR FwStartOfYear =
				            MINX (
				                FILTER ( FiscalWeeksBase, [FW YearNumber] = FwYearNumber ),
				                [Date]
				            )
				        VAR FwEndOfYear =
				            MAXX (
				                FILTER ( FiscalWeeksBase, [FW YearNumber] = FwYearNumber ),
				                [Date]
				            )
				        VAR FwYearDays = 
				            INT ( FwEndOfYear - FwStartOfYear + 1 )
				        RETURN
				            ROW ( "FW RelativeWeekPos", RelativeWeekPos,
				            "FW RelativeMonthPos", RelativeMonthPos,
				            "FW RelativeQuarterPos", RelativeQuarterPos,
				            "FW RelativeYearPos", RelativeYearPos,
				            "FW StartOfMonth", FwStartOfMonth,
				            "FW EndOfMonth", FwEndOfMonth,
				            "FW DayOfMonthNumber", FwDayOfMonthNumber,
				            "FW StartOfQuarter", FwStartOfQuarter,
				            "FW EndOfQuarter", FwEndOfQuarter,
				            "FW DayOfQuarterNumber", FwDayOfQuarterNumber,
				            "FW MonthDays", FwMonthDays,
				            "FW QuarterDays", FwQuarterDays,
				            "FW YearDays", FwYearDays   
				            )
				    )
				VAR FiscalWeeks =
				    GENERATE (
				        FiscalWeeks_Pre,
				        VAR CalDate = [Date]
				        VAR FwYearMonthNumber = [FW YearMonthNumber]
				        VAR FwYearQuarterNumber = [FW YearQuarterNumber]
				        VAR FWYearNumber = [FW YearNumber]
				        VAR FwDayOfMonthNumber = [FW DayOfMonthNumber]
				        VAR FwDayOfQuarterNumber = [FW DayOfQuarterNumber]
				        VAR FwDayOfYearNumber = [FW DayOfYearNumber]
				        VAR FwMonthDays = [FW EndOfMonth] - [FW StartOfMonth] + 1 
				        VAR FwQuarterDays = [FW EndOfQuarter] - [FW StartOfQuarter] + 1 
				        VAR FwYearDays = [FW EndOfYear] - [FW StartOfYear] + 1 
				        VAR FwDatePreviousWeek = CalDate - 7
				        VAR FwDatePreviousMonth = 
				            MAXX (
				                FILTER (
				                    FiscalWeeks_Pre,
				                    [Fw YearMonthNumber] = FwYearMonthNumber - 1
				                    &&
				                    ( [FW DayOfMonthNumber] <= FwDayOfMonthNumber
				                      || FwDayOfMonthNumber = FwMonthDays )
				                ),
				                [Date]
				            )
				        VAR FwDatePreviousQuarter = 
				            MAXX (
				                FILTER (
				                    FiscalWeeks_Pre,
				                    [Fw YearQuarterNumber] = FwYearQuarterNumber - 1
				                    &&
				                    ( [FW DayOfQuarterNumber] <= FwDayOfQuarterNumber
				                      || FwDayOfQuarterNumber = FwQuarterDays )
				                ),
				                [Date]
				            )        
				        VAR FwDatePreviousYear = 
				            MAXX (
				                FILTER (
				                    FiscalWeeks_Pre,
				                    [Fw YearNumber] = FWYearNumber - 1
				                    &&
				                    ( [FW DayOfYearNumber] <= FwDayOfYearNumber
				                      || FwDayOfYearNumber = FwYearDays )
				                ),
				                [Date]
				            )
				        RETURN
				            ROW ( 
				                "FW DatePreviousWeek", FwDatePreviousWeek,
				                "FW DatePreviousMonth", FwDatePreviousMonth,
				                "FW DatePreviousQuarter", FwDatePreviousQuarter,
				                "FW DatePreviousYear", FwDatePreviousYear         
				            )
				    )
				    
				VAR CompleteCalendarExpanded =
				    NATURALLEFTOUTERJOIN (
				        FiscalStandardGregorian,
				        NATURALLEFTOUTERJOIN ( CalendarStandardGregorian, FiscalWeeks )
				    )
				VAR CompleteCalendar = 
				    FILTER (
				        CompleteCalendarExpanded,
				        ( [Calendar YearNumber] >= FirstYear && [Calendar YearNumber] <= LastYear && CalendarRange = "Calendar" )
				        ||
				        ( [Fiscal YearNumber] >= FirstYear && [Fiscal YearNumber] <= LastYear && CalendarRange = "FiscalGregorian" )
				        ||
				        ( [FW YearNumber] >= FirstYear && [FW YearNumber] <= LastYear && CalendarRange = "FiscalWeekly" )
				    )
				    
				VAR Result =
				    SELECTCOLUMNS (
				        CompleteCalendar,
				        
				        -- Base date columns
				        "Date", [Date],
				        "DateKey", [DateKey],
				
				        "Day of Month", [Day of Month],
				        "WeekDayNumber", [WeekDayNumber],
				
				        "Week Day", [Week Day],
				        "Sequential365DayNumber", [Sequential365DayNumber],
				        "Relative Day", DATEDIFF(VALUES('Date Table Setup'[Today]),[Date],DAY),
				        
				        -- Calendar = Solar Calendar (January-December)
				        "Calendar YearNumber", [Calendar YearNumber],
				        "Calendar Year", [Calendar Year],
				        "Calendar QuarterNumber", [Calendar QuarterNumber],
				        "Calendar Quarter", [Calendar Quarter],
				        "Calendar YearQuarterNumber", [Calendar YearQuarterNumber],
				        "Calendar Quarter Year", [Calendar Quarter Year],
				        "Calendar MonthNumber", [Calendar MonthNumber],
				        "Calendar Month", [Calendar Month],
				        "Calendar YearMonthNumber", [Calendar YearMonthNumber],
				        "Calendar Month Year", [Calendar Month Year],
				        "Calendar WeekNumber", [Calendar WeekNumber],
				        "Calendar Week", [Calendar Week],
				        "Calendar YearWeekNumber", [Calendar YearWeekNumber],
				        "Calendar Week Year", [Calendar Week Year],
				        "Calendar WeekYearOrder", [Calendar WeekYearOrder],
				        "Calendar RelativeWeekPos", [Calendar RelativeWeekPos],
				        "Calendar RelativeMonthPos", [Calendar RelativeMonthPos],
				        "Calendar RelativeQuarterPos", [Calendar RelativeQuarterPos],
				        "Calendar RelativeYearPos", [Calendar RelativeYearPos],
				        "Calendar StartOfMonth", [Calendar StartOfMonth],
				        "Calendar EndOfMonth", [Calendar EndOfMonth],
				        "Calendar StartOfQuarter", [Calendar StartOfQuarter],
				        "Calendar EndOfQuarter", [Calendar EndOfQuarter],
				        "Calendar StartOfYear", [Calendar StartOfYear],
				        "Calendar EndOfYear", [Calendar EndOfYear],
				        "Calendar MonthDays", [Calendar MonthDays],
				        "Calendar QuarterDays", [Calendar QuarterDays],
				        "Calendar YearDays", [Calendar YearDays],
				        "Calendar DayOfMonthNumber", [Calendar DayOfMonthNumber],
				        "Calendar DayOfQuarterNumber", [Calendar DayOfQuarterNumber],
				        "Calendar DayOfYearNumber", [Calendar DayOfYearNumber],
				        "Calendar DatePreviousWeek", [Calendar DatePreviousWeek],
				        "Calendar DatePreviousMonth", [Calendar DatePreviousMonth],
				        "Calendar DatePreviousQuarter", [Calendar DatePreviousQuarter],
				        "Calendar DatePreviousYear", [Calendar DatePreviousYear],
				
				        -- Fiscal = Fiscal Monthly Calendar
				        "Fiscal Year", [Fiscal Year],
				        "Fiscal YearNumber", [Fiscal YearNumber],
				        "Fiscal QuarterNumber", [Fiscal QuarterNumber],
				        "Fiscal Quarter", [Fiscal Quarter],
				        "Fiscal YearQuarterNumber", [Fiscal YearQuarterNumber],
				        "Fiscal Quarter Year", [Fiscal Quarter Year],
				        "Fiscal MonthNumber", [Fiscal MonthNumber],
				        "Fiscal MonthInQuarterNumber", [Fiscal MonthQuarterNumber],
				        "Fiscal Month", [Fiscal Month],
				        "Fiscal YearMonthNumber", [Fiscal YearMonthNumber],
				        "Fiscal Month Year", [Fiscal Month Year],
				        "Fiscal WeekNumber", [Fiscal WeekNumber],
				        "Fiscal Week", [Fiscal Week],
				        "Fiscal YearWeekNumber", [Fiscal YearWeekNumber],
				        "Fiscal Week Year", [Fiscal Week Year],
				        "Fiscal WeekYearOrder", [Fiscal WeekYearOrder],
				        "Fiscal RelativeWeekPos", [Fiscal RelativeWeekPos],
				        "Fiscal RelativeMonthPos", [Fiscal RelativeMonthPos],
				        "Fiscal RelativeQuarterPos", [Fiscal RelativeQuarterPos],
				        "Fiscal RelativeYearPos", [Fiscal RelativeYearPos],
				        "Fiscal StartOfMonth", [Fiscal StartOfMonth],
				        "Fiscal EndOfMonth", [Fiscal EndOfMonth],
				        "Fiscal StartOfQuarter", [Fiscal StartOfQuarter],
				        "Fiscal EndOfQuarter", [Fiscal EndOfQuarter],
				        "Fiscal StartOfYear", [Fiscal StartOfYear],
				        "Fiscal EndOfYear", [Fiscal EndOfYear],
				        "Fiscal MonthDays", [Fiscal MonthDays],
				        "Fiscal QuarterDays", [Fiscal QuarterDays],
				        "Fiscal YearDays", [Fiscal YearDays],
				        "Fiscal DayOfMonthNumber", [Fiscal DayOfMonthNumber],
				        "Fiscal DayOfQuarterNumber", [Fiscal DayOfQuarterNumber],
				        "Fiscal DayOfYearNumber", [Fiscal DayOfYearNumber],
				        "Fiscal DatePreviousWeek", [Fiscal DatePreviousWeek],
				        "Fiscal DatePreviousMonth", [Fiscal DatePreviousMonth],
				        "Fiscal DatePreviousQuarter", [Fiscal DatePreviousQuarter],
				        "Fiscal DatePreviousYear", [Fiscal DatePreviousYear],
				
				        -- FW = Fiscal Weekly calendar
				        "FW YearNumber", [FW YearNumber],
				        "FW Year", [FW Year],
				        "FW QuarterNumber", [FW QuarterNumber],
				        "FW Quarter", [FW Quarter],
				        "FW YearQuarterNumber", [FW YearQuarterNumber],
				        "FW Quarter Year", [FW Quarter Year],
				        "FW MonthNumber", [FW MonthNumber],
				        "FW Month", [FW Month],
				        "FW YearMonthNumber", [FW YearMonthNumber],
				        "FW Month Year", [FW Month Year],
				        "FW WeekNumber", [FW WeekNumber],
				        "FW Week", [FW Week],
				        "FW PeriodNumber", [FW PeriodNumber],
				        "FW Period", [FW Period],
				        "FW YearWeekNumber", [FW YearWeekNumber],
				        "FW Week Year", [FW Week Year],
				        "FW StartOfWeek", [FW StartOfWeek],
				        "FW EndOfWeek", [FW EndOfWeek],
				        "FW RelativeWeekPos", [FW RelativeWeekPos],
				        "FW RelativeMonthPos", [FW RelativeMonthPos],
				        "FW RelativeQuarterPos", [FW RelativeQuarterPos],
				        "FW RelativeYearPos", [FW RelativeYearPos],
				        "FW StartOfMonth", [FW StartOfMonth],
				        "FW EndOfMonth", [FW EndOfMonth],
				        "FW StartOfQuarter", [FW StartOfQuarter],
				        "FW EndOfQuarter", [FW EndOfQuarter],
				        "FW StartOfYear", [FW StartOfYear],
				        "FW EndOfYear", [FW EndOfYear],
				        "FW MonthDays", [FW MonthDays],
				        "FW QuarterDays", [FW QuarterDays],
				        "FW YearDays", [FW YearDays],
				        "FW DayOfMonthNumber", [FW DayOfMonthNumber],
				        "FW DayOfQuarterNumber", [FW DayOfQuarterNumber],
				        "FW DayOfYearNumber", [FW DayOfYearNumber],
				        "FW DatePreviousWeek", [FW DatePreviousWeek],
				        "FW DatePreviousMonth", [FW DatePreviousMonth],
				        "FW DatePreviousQuarter", [FW DatePreviousQuarter],
				        "FW DatePreviousYear", [FW DatePreviousYear],
				
				        -- Holidays and working days
				        "Holiday Name", [Holiday Name],
				        "IsWorkingDay", [IsWorkingDay],
				        "Day Type", [Day Type]    
				    )
				RETURN 
				    Result
				```

	annotation PBI_Id = ef8c45692e6244a7bc1177e82e96a730

