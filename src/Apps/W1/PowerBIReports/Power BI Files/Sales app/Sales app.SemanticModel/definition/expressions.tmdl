expression Dimensions =
		let
		    Source = Dynamics365BusinessCentral.ApiContentsWithOptions(ENVIRONMENT, COMPANY,API_ENDPOINT, []),
		    TableData = Source{[Name="dimensions",Signature="table"]}[Data],
		    #"Changed Type" = Table.TransformColumnTypes(
		        TableData,
		        {
		            {"dim1Code", type text},
		            {"dim1Name", type text},
		            {"dim1Caption", type text},
		            {"dim2Code", type text},
		            {"dim2Name", type text},
		            {"dim2Caption", type text},
		            {"dim3Code", type text},
		            {"dim3Name", type text},
		            {"dim3Caption", type text},
		            {"dim4Code", type text},
		            {"dim4Name", type text},
		            {"dim4Caption", type text},
		            {"dim5Code", type text},
		            {"dim5Name", type text},
		            {"dim5Caption", type text},
		            {"dim6Code", type text},
		            {"dim6Name", type text},
		            {"dim6Caption", type text},
		            {"dim7Code", type text},
		            {"dim7Name", type text},
		            {"dim7Caption", type text},
		            {"dim8Code", type text},
		            {"dim8Name", type text},
		            {"dim8Caption", type text}
		        }
		    ),
		    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"ETag"})
		in
		    #"Removed Columns"
	lineageTag: 73c748a0-f1bb-4682-a85f-a88eb985c159

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression DimensionSet_Blank =
		let
		    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i45WMlDSUTIEYtJQbCwA", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [dimensionSetID = _t, valueCount = _t, dimension1ValueCode = _t, dimension1ValueName = _t, dimension2ValueCode = _t, dimension2ValueName = _t, dimension3ValueCode = _t, dimension3ValueName = _t, dimension4ValueCode = _t, dimension4ValueName = _t, dimension5ValueCode = _t, dimension5ValueName = _t, dimension6ValueCode = _t, dimension6ValueName = _t, dimension7ValueCode = _t, dimension7ValueName = _t, dimension8ValueCode = _t, dimension8ValueName = _t]),
		    #"Changed Type" = Table.TransformColumnTypes(Source,{{"dimensionSetID", Int64.Type}, {"valueCount", Int64.Type}, {"dimension1ValueCode", type text}, {"dimension1ValueName", type text}, {"dimension2ValueCode", type text}, {"dimension2ValueName", type text}, {"dimension3ValueCode", type text}, {"dimension3ValueName", type text}, {"dimension4ValueCode", type text}, {"dimension4ValueName", type text}, {"dimension5ValueCode", type text}, {"dimension5ValueName", type text}, {"dimension6ValueCode", type text}, {"dimension6ValueName", type text}, {"dimension7ValueCode", type text}, {"dimension7ValueName", type text}, {"dimension8ValueCode", type text}, {"dimension8ValueName", type text}})
		in
		    #"Changed Type"
	lineageTag: 86940942-dfaa-4885-a446-614a4738ac06

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression DimensionSets_DataSource =
		let
		    Source = Dynamics365BusinessCentral.ApiContentsWithOptions(ENVIRONMENT, COMPANY,API_ENDPOINT, []),
		    TableData = Source{[Name="dimensionSetEntries",Signature="table"]}[Data],
		    #"Changed Type" = Table.TransformColumnTypes(
		        TableData,
		        {
		            {"dimensionSetID", Int64.Type},
		            {"valueCount", Int64.Type},
		            {"dimension1ValueCode", type text},
		            {"dimension1ValueName", type text},
		            {"dimension2ValueCode", type text},
		            {"dimension2ValueName", type text},
		            {"dimension3ValueCode", type text},
		            {"dimension3ValueName", type text},
		            {"dimension4ValueCode", type text},
		            {"dimension4ValueName", type text},
		            {"dimension5ValueCode", type text},
		            {"dimension5ValueName", type text},
		            {"dimension6ValueCode", type text},
		            {"dimension6ValueName", type text},
		            {"dimension7ValueCode", type text},
		            {"dimension7ValueName", type text},
		            {"dimension8ValueCode", type text},
		            {"dimension8ValueName", type text}
		        }
		    ),
		    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"ETag"}),
		    #"Appended Query" = Table.Combine({#"Removed Columns", DimensionSet_Blank}),
		    #"Filtered Rows" = Table.SelectRows(#"Appended Query", each ([dimensionSetID] <> 0))
		in
		    #"Filtered Rows"
	lineageTag: 9ac1170e-9787-4e0f-9fe1-e727c486426a

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression GetDimCode = ```
		let
		    Source = (DimNo as number) => let 
		    Source = Dimensions,
		    Rec = Table.First(Source),
		    DimCaption = if
		    DimNo = 1 then Record.Field(Rec,"Dim1Code") else if
		    DimNo = 2 then Record.Field(Rec,"Dim2Code") else if
		    DimNo = 3 then Record.Field(Rec,"Dim3Code") else if
		    DimNo = 4 then Record.Field(Rec,"Dim4Code") else if
		    DimNo = 5 then Record.Field(Rec,"Dim5Code") else if
		    DimNo = 6 then Record.Field(Rec,"Dim6Code") else if
		    DimNo = 7 then Record.Field(Rec,"Dim7Code") else if
		    DimNo = 8 then Record.Field(Rec,"Dim8Code") else ""
		in
		    DimCaption
		in
		    Source
		```
	lineageTag: 24e1cb17-7043-4fde-8b33-b03e91c71d6a
	queryGroup: 'Parameters and Functions'

	annotation PBI_ResultType = Function

expression GetDimCodeCaption = ```
		let
		    Source = (DimNo as number) => let 
		    Source = Dimensions,
		    Rec = Table.First(Source),
		    DimCaption = if
		    DimNo = 1 then Record.Field(Rec,"Dim1Caption") else if
		    DimNo = 2 then Record.Field(Rec,"Dim2Caption") else if
		    DimNo = 3 then Record.Field(Rec,"Dim3Caption") else if
		    DimNo = 4 then Record.Field(Rec,"Dim4Caption") else if
		    DimNo = 5 then Record.Field(Rec,"Dim5Caption") else if
		    DimNo = 6 then Record.Field(Rec,"Dim6Caption") else if
		    DimNo = 7 then Record.Field(Rec,"Dim7Caption") else if
		    DimNo = 8 then Record.Field(Rec,"Dim8Caption") else "N/A Code",
		    DimCaption2 = if DimCaption="" then "N/A Code" else DimCaption,
		    DimCaption3 = DimCaption2&" (Dim "& Number.ToText(DimNo) & ")"
		in
		    DimCaption3
		in
		    Source
		```
	lineageTag: d1f148f8-10ef-459c-aaac-04342658dd74
	queryGroup: 'Parameters and Functions'

	annotation PBI_ResultType = Function

expression GetDimNameCaption = ```
		let
		    Source = (DimNo as number) => let 
		    Source = Dimensions,
		    Rec = Table.First(Source),
		    DimCaption = if
		    DimNo = 1 then Record.Field(Rec,"Dim1Name") else if
		    DimNo = 2 then Record.Field(Rec,"Dim2Name") else if
		    DimNo = 3 then Record.Field(Rec,"Dim3Name") else if
		    DimNo = 4 then Record.Field(Rec,"Dim4Name") else if
		    DimNo = 5 then Record.Field(Rec,"Dim5Name") else if
		    DimNo = 6 then Record.Field(Rec,"Dim6Name") else if
		    DimNo = 7 then Record.Field(Rec,"Dim7Name") else if
		    DimNo = 8 then Record.Field(Rec,"Dim8Name") else "N/A Name",
		    DimCaption2 = if DimCaption="" then "N/A Name" else DimCaption&" Name",
		    DimCaption3 = DimCaption2&" (Dim "& Number.ToText(DimNo) & ")"
		in
		    DimCaption3
		in
		    Source
		```
	lineageTag: aceedc99-0961-4dcd-9998-3311dda6c3ed
	queryGroup: 'Parameters and Functions'

	annotation PBI_ResultType = Function

expression API_ENDPOINT = "microsoft/analytics/v1.0" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: ef7de3fe-8315-45e1-a12c-c3d5e50d3430
	queryGroup: 'Parameters and Functions'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Text

expression ConvertUTC =
		let
		    Source = (dateTableSetup as table) =>
		        let
		            #"Added UTC Now" = Table.AddColumn(dateTableSetup, "UTC Now", each DateTimeZone.UtcNow()),
		            #"Extract UTC Value" = Table.AddColumn(
		                #"Added UTC Now", "Extract UTC", each Text.BetweenDelimiters([timeZoneDisplayName], "(", ")")
		            ),
		            #"Remove UTC prefix" = Table.AddColumn(
		                #"Extract UTC Value", "Remove UTC prefix", each Text.AfterDelimiter([Extract UTC], "UTC")
		            ),
		            #"Extract Hour and Minutes" = Table.SplitColumn(#"Remove UTC prefix", "Remove UTC prefix", Splitter.SplitTextByDelimiter(":", QuoteStyle.None), {"UTC Hours", "UTC Minutes"}),
		            #"Changed Type" = Table.TransformColumnTypes(#"Extract Hour and Minutes",{{"UTC Hours", Int64.Type}, {"UTC Minutes", Int64.Type}},"en-us"),
		            #"Switch Zone" = Table.AddColumn(
		                #"Changed Type",
		                "UTC Offset",
		                each if [UTC Hours] = null then [UTC Now] else DateTimeZone.SwitchZone([UTC Now], [UTC Hours], [UTC Minutes])
		            ),
		            #"Set Date" = Table.AddColumn(
		                #"Switch Zone", "Today", each Date.From(DateTimeZone.RemoveZone([UTC Offset])), type date
		            ),
		            #"Set Last Refresh Time" = Table.AddColumn(
		                #"Set Date", "Last Refresh Time", each Time.From(DateTimeZone.RemoveZone([UTC Offset])), type time
		            ),
		            #"Remove unnecessary" = Table.RemoveColumns(
		                #"Set Last Refresh Time", {"UTC Now", "Extract UTC", "UTC Offset"}
		            )
		        in
		            #"Remove unnecessary"
		in
		    Source
	lineageTag: e1bb646d-611b-4433-95d2-597a76f1b585
	queryGroup: 'Parameters and Functions'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression InvertSignsSalesLines = ```
		let 
		InvertSigns = (inputTable as table) as table =>
		    let
		        // Adjust "amount" column
		        AdjustedAmount = Table.ReplaceValue(
		            inputTable,
		            each if [Document Type] = "CR/Adj Note" or [Document Type] = "Return Order" then [outstandingAmountLCY] else false, 
		            each [outstandingAmountLCY] * -1, 
		            Replacer.ReplaceValue, 
		            {"outstandingAmountLCY"}
		        ),
		 
		        // Adjust "quantityBase" column
		        AdjustedQuantity = Table.ReplaceValue(
		            AdjustedAmount,
		            each if [Document Type] = "CR/Adj Note" or [Document Type] = "Return Order" then [outstandingQtyBase] else false, 
		            each [outstandingQtyBase] * -1, 
		            Replacer.ReplaceValue, 
		            {"outstandingQtyBase"}
		        ),
		
		        // Adjust "returnQtyRcdNotInvd" column
		        AdjustedReturnQtyRcdNotInvd = Table.ReplaceValue(
		            AdjustedQuantity,
		            each [returnQtyRcdNotInvd], 
		            each [returnQtyRcdNotInvd] * -1, 
		            Replacer.ReplaceValue, 
		            {"returnQtyRcdNotInvd"}
		        ),
		
		        // Adjust "returnRcdNotInvdLCY" column
		        AdjustedReturnRcdNotInvdLCY = Table.ReplaceValue(
		            AdjustedReturnQtyRcdNotInvd,
		            each [returnRcdNotInvdLCY], 
		            each [returnRcdNotInvdLCY] * -1, 
		            Replacer.ReplaceValue, 
		            {"returnRcdNotInvdLCY"}
		        ),
		
		        // Adjust "OutstandingQuantity" column
		        AdjustedOutstandingQuantity = Table.ReplaceValue(
		            AdjustedReturnRcdNotInvdLCY,
		            each if [Document Type] = "CR/Adj Note" or [Document Type] = "Return Order" then [outstandingQuantity] else false, 
		            each [outstandingQuantity] * -1, 
		            Replacer.ReplaceValue, 
		            {"outstandingQuantity"}
		        ),
		        
		        // Adjust "amount" column
		         AdjustedSalesLineAmount = Table.ReplaceValue(
		            AdjustedOutstandingQuantity,
		            each if [Document Type] = "CR/Adj Note" or [Document Type] = "Return Order" then [amount] else false, 
		            each [amount] * -1, 
		            Replacer.ReplaceValue, 
		            {"amount"}
		        ),
		        // Adjust "quantityBase" column
		         AdjustedQuantityBase = Table.ReplaceValue(
		            AdjustedSalesLineAmount,
		            each if [Document Type] = "CR/Adj Note" or [Document Type] = "Return Order" then [quantityBase] else false, 
		            each [quantityBase] * -1, 
		            Replacer.ReplaceValue, 
		            {"quantityBase"}
		        ),
		        // Set column types
		        ConvertedTypes = Table.TransformColumnTypes(AdjustedQuantityBase, {
		            {"outstandingAmountLCY", Currency.Type},
		            {"outstandingQtyBase", Decimal.Type},
		            {"returnQtyRcdNotInvd", Decimal.Type},
		            {"returnRcdNotInvdLCY", Currency.Type},
		            {"outstandingQuantity", Decimal.Type},
		            {"amount", Currency.Type}
		            })
		    in
		        ConvertedTypes
		in InvertSigns
		```
	lineageTag: 3905044e-0550-4ce1-8a9d-7e1987ca8559
	queryGroup: 'Parameters and Functions'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression InvertSignsResourceLedgerEntries =
		let
		    InvertSigns = (inputTable as table) as table =>
		        let
		            AdjustedTable = Table.TransformColumns(
		                inputTable,
		                {
		                    {"quantityBase", each _ * -1, type number},
		                    {"cost", each _ * -1, type number},
		                    {"price", each _ * -1, type number}
		                }
		            )
		        in
		            AdjustedTable
		in
		    InvertSigns
	lineageTag: f898484b-af24-40a1-9371-65667ae9fd9c
	queryGroup: 'Parameters and Functions'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression InvertSignsGeneralLedgerEntries =
		let
		    InvertSigns = (inputTable as table) as table =>
		        let
		            AdjustedTable = Table.TransformColumns(
		                inputTable,
		                {
		                    {"amount", each _ * -1, type number}
		                }
		            )
		        in
		            AdjustedTable
		in
		    InvertSigns
	lineageTag: 39cba724-ae06-46f4-8384-f74cd6d1fe7f
	queryGroup: 'Parameters and Functions'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression 'Sales Credit Project Ledger Entries' =
		let
		    Source = Dynamics365BusinessCentral.ApiContentsWithOptions(ENVIRONMENT, COMPANY, API_ENDPOINT, []),
		    salesCrProjectLedgerEntries_table = Source{[Name="salesCrProjectLedgerEntries",Signature="table"]}[Data],
		    #"Added Custom" = Table.AddColumn(salesCrProjectLedgerEntries_table, "Document Type", each "Posted Sales CR/Adj Note", type text),
		    #"Added Custom1" = Table.AddColumn(#"Added Custom", "Source Table", each "Project Ledger Entry", type text),
		    #"Renamed Columns" = Table.RenameColumns(#"Added Custom1",{{"documentNo", "Document No."}})
		in
		    #"Renamed Columns"
	lineageTag: c8ac85b1-c0d9-4376-bca6-11955775a8f0
	queryGroup: 'Fact Tables\Project Ledger Entries'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Sales Invoice Project Ledger Entries' =
		let
		    Source = Dynamics365BusinessCentral.ApiContentsWithOptions(ENVIRONMENT, COMPANY, API_ENDPOINT, []),
		    salesInvoiceProjectLedgerEntries_table = Source{[Name="salesInvoiceProjectLedgerEntries",Signature="table"]}[Data],
		    #"Added Custom" = Table.AddColumn(salesInvoiceProjectLedgerEntries_table, "Document Type", each "Posted Sales Invoice", type text),
		    #"Added Custom1" = Table.AddColumn(#"Added Custom", "Source Table", each "Project Ledger Entry", type text),
		    #"Renamed Columns" = Table.RenameColumns(#"Added Custom1",{{"documentNo", "Document No."}})
		in
		    #"Renamed Columns"
	lineageTag: 6d258828-4b18-4f95-8e7b-70090a2e495e
	queryGroup: 'Fact Tables\Project Ledger Entries'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

